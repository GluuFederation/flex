name: release-snapshot
on:
  workflow_dispatch:
    inputs:
      jans_release_as:
        description: 'Release version for the python projects, admin ui, docker images, and helm charts'
        required: true
        default: '1.1.1'
      mega_release_as:
        description: 'Mega release version'
        required: true
        default: '5.1.1'
      next_jans_release_as:
        description: 'next anticipated jans Mega release version'
        required: true
        default: '1.1.1'
      next_mega_release_as:
        description: 'next anticipated Mega release version'
        required: true
        default: '5.1.1'

jobs:
  mega-release-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Configure Git
      run: |
        git config user.name "mo-auto"
        git config user.email "54212639+mo-auto@users.noreply.github.com"
        git config --global user.signingkey "${{ steps.import_gpg.outputs.keyid }}"
        git config --global pull.rebase true

    - name: Prepare release
      run: |
        
        # echo "Install helm docs
        mkdir helmtemp
        cd helmtemp
        HELM_DOCS_VERSION=$(curl "https://api.github.com/repos/norwoodj/helm-docs/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/' | cut -c2-)
        curl -sSL https://github.com/norwoodj/helm-docs/releases/download/v"${HELM_DOCS_VERSION}"/helm-docs_"${HELM_DOCS_VERSION}"_Linux_x86_64.tar.gz  -o helm-docs_"${HELM_DOCS_VERSION}"_Linux_x86_64.tar.gz
        tar xvf helm-docs_"${HELM_DOCS_VERSION}"_Linux_x86_64.tar.gz
        sudo cp helm-docs /usr/local/bin/
        cd ..
        rm -rf helmtemp
        
        VERSION=${{ github.event.inputs.mega_release_as }}
        JANS_VERSION=${{ github.event.inputs.jans_release_as }}
        SETUP_VERSION=${{ github.event.inputs.jans_release_as }}
        DOCKER_VERSION=${{ github.event.inputs.jans_release_as }}
        ADMIN_UI_VERSION=${{ github.event.inputs.jans_release_as }}
        HELM_RELEASE=${{ github.event.inputs.mega_release_as }}

        NEXT_VERSION=${{ github.event.inputs.next_mega_release_as }}
        NEXT_JANS_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_SETUP_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_DOCKER_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_ADMIN_UI_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_HELM_RELEASE=${{ github.event.inputs.next_mega_release_as }}

        echo "${{ secrets.MOWORKFLOWTOKEN }}" | gh auth login --with-token
        git checkout -b chore-$VERSION
        git pull origin chore-$VERSION || echo "Nothing to pull"
        
        # Open snapshot PR
        git checkout -b chore-$NEXT_VERSION-SNAPSHOT
        git pull origin chore-$NEXT_VERSION-SNAPSHOT || echo "Nothing to pull"
        
        chmod +x ./automation/release/release.sh
        source ./automation/release/release.sh
        modify_snapshot_version
        git commit -a -S -m "chore: modify app_info.json and python version files" || echo "Nothing to commit"

        modify_snapshot_helm_chart
        git commit -a -S -m "chore: update flex helm chart image tags" || echo "Nothing to commit"
        # Update versions files
        modify_snapshot_version_files 
        git commit -a -S -m "chore: update version files" || echo "Nothing to commit"
        
        # Push the changes to the repository
        git push --set-upstream origin chore-$NEXT_VERSION-SNAPSHOT
        MESSAGE="chore: release chore-$NEXT_VERSION-SNAPSHOT"
        SNAP_PR=$(gh pr create --body "Auto generated $NEXT_VERSION-SNAPSHOT release. DO NOT MERGE THIS BEFORE $PR. Remember the flow. Firstly, QA runs tests on nightly build to confirm the intended release is operational. Once approved by QA, the $PR gets reviewed by code owners and then merged for a release. After the release has been finished QA  does post release tests and approves the snapshot PR. The snapshot PR then gets reviewed by codeonwers and  merged." --title "${MESSAGE}" --label "autorelease:pending" || echo "PR already exists")
        
        # Report it in RocketChat
        curl -X POST -H 'Content-Type: application/json' --data "{\"alias\":\"Mo-Auto\",\"emoji\":\":robot:\",\"text\":\":rocket: I am getting ready for releasing Flex $VERSION.\",\"attachments\":[{\"title\":\"Gluu Release bot\",\"title_link\":\"$PR\",\"text\":\"$PR\",\"color\":\"#764FA5\"}]}" ${{ secrets.GITHUBUSERBEHAVIORROCKETCHATREPORTER }}
