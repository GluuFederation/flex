name: Build and Publish Releases to Hub

on:
  push:
    tags:
      - "*"
    branches:
      # below branch is triggered by jenkins which triggers dev image
      - update-source-build-date
    paths:
      - "docker-**/**"
      - "!**.md"
  pull_request:
    branches:
      - master
      - main
      # below branch is triggered by jenkins which triggers dev image
      - update-source-build-dates
    paths:
      - "docker-**/**"
      - "!docker-**/CHANGELOG.md"
      - "!docker-**/version.txt"
      - "!**.md"
  pull_request_target:
    branches:
      # below protected branches prefix only allows internal teams to push to it
      - cn-*
  workflow_dispatch:
    inputs:
      services:
        description: 'One or set of the docker images. Format as following: "docker-casa docker-admin-ui docker-flex-monolith"'
        required: true
        default: 'docker-casa docker-admin-ui docker-flex-monolith'
      gluu_version:
        description: 'The war version to build the image off'
        required: false
        default: ''
      image_tag:
        description: 'The manual image tag to post'
        required: false
        default: ''
      tags:
        description: 'Tags'
        required: false

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 8
      matrix:
        docker-images: ["casa", "admin-ui", "flex-monolith"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check docker directories that changed
        id: build_docker_image
        run: |
          BUILD=true
          DEFAULT_ALL=${{ github.event.inputs.services }}
          if [ -z "$DEFAULT_ALL" ]
          then
            DEFAULT_ALL="docker-casa docker-admin-ui docker-flex-monolith"
          else
            echo "$DEFAULT_ALL"
          fi
          # Detect actual docker folders that changed if error arises default to all images
          DIRECTORIES_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | cut -d/ -f1 | sort -u | grep "docker" || echo "$DEFAULT_ALL")
          if [[ "$DIRECTORIES_CHANGED" =~ "${{ matrix.docker-images }}" ]]; then
            echo "A change in this images directory has occured"
            echo ::set-output name=build::${BUILD}
          fi

      - name: Install dependencies
        if: steps.build_docker_image.outputs.build || github.event_name == 'tags'
        run: |
          sudo apt-get update
          sudo python3 -m pip install --upgrade pip
          sudo pip3 install setuptools --upgrade
          sudo pip3 install -r ./automation/requirements.txt
          sudo apt-get update


      - name: Prepare
        if: steps.build_docker_image.outputs.build || github.event_name == 'tags'
        id: prep
        run: |
          REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          MAIN_VERSION=$(python3 -c "from dockerfile_parse import DockerfileParser ; dfparser = DockerfileParser('./docker-${{ matrix.docker-images }}') ; print(dfparser.labels['org.opencontainers.image.version'])")
          DOCKER_IMAGE=ghcr.io/$REPOSITORY/${{ matrix.docker-images }}
          if [[ ${{ matrix.docker-images }} == "flex-monolith" ]]; then
            DOCKER_IMAGE=gluufederation/monolith
          fi
          VERSION=${MAIN_VERSION}_dev
          BUILD=true
          if [[ $GITHUB_REF == refs/tags/docker-${{ matrix.docker-images }}-* ]]; then
            VERSION=${GITHUB_REF#refs/tags/docker-${{ matrix.docker-images }}-v}
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "A tag not matching the image triggered the build. I will not continue."
            BUILD=""
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\_[a-b]{1}[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:${MAIN_VERSION}_dev"
          fi
          # If the user passed a manual image tag to build a custom manual image
          MANUAL_IMAGE_TAG=${{ github.event.inputs.image_tag }}
          if [ ! -z "$MANUAL_IMAGE_TAG" ]
          then
            TAGS="$TAGS,${DOCKER_IMAGE}:${MANUAL_IMAGE_TAG}"
            echo "Manual image tag has been inputed by the user"
          else
            echo "$TAGS"
          fi
          # If the user passed a war version to build off ,change this war version.
          GLUU_VERSION=${{ github.event.inputs.gluu_version }}
          if [ ! -z "$GLUU_VERSION" ]
          then
            python3 -c "from dockerfile_parse import DockerfileParser ; dfparser = DockerfileParser('./docker-${{ matrix.docker-images }}') ; dfparser.envs['GLUU_VERSION'] = '${{ github.event.inputs.gluu_version }}'"
            echo "War vesrion has been modified."
          else
            echo "$GLUU_VERSION"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=build::${BUILD}

      # UPDATE BUILD DATES INSIDE THE DOCKERFILE BEFORE BUILDING THE DEV IMAGES TRIGGERED BY JENKINS
      - name: Setup Python 3.7
        if: github.event_name == 'workflow_dispatch'
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install Python dependencies
        if: github.event_name == 'workflow_dispatch'
        run: |
          sudo apt-get update
          sudo python3 -m pip install --upgrade pip
          sudo pip3 install setuptools --upgrade
          sudo pip3 install -r ./automation/requirements.txt
          sudo apt-get update
          sudo apt-get install jq

      - name: Update Build date in Dockerfile
        if: github.event_name == 'workflow_dispatch'
        id: update_build_date_in_dockerfile
        run: |
          sudo python3 ./automation/auto_update_image_pr.py
      #END UPDATE BUILD DATES INSIDE THE DOCKERFILE BEFORE BUILDING THE DEV IMAGES TRIGGERED BY JENKINS

      - name: Set up QEMU
        if: steps.build_docker_image.outputs.build && steps.prep.outputs.build
        uses: docker/setup-qemu-action@master
        with:
          image: tonistiigi/binfmt:master
          platforms: all

      - name: Set up Docker Buildx
        if: steps.build_docker_image.outputs.build && steps.prep.outputs.build
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: mo-auto
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: steps.build_docker_image.outputs.build && steps.prep.outputs.build
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./docker-${{ matrix.docker-images }}
          file: ./docker-${{ matrix.docker-images }}/Dockerfile
          #target: prod
          # add to platforms comma seperated linux/ppc64leL Issue: py3-grpcio
          # add to platforms comma seperated linux/386 : Issue: openjdk11-jre-headless alpine package not
          # add to platforms comma seperated ,linux/arm/v6 : Issue: openjdk11-jre-headless alpine package not found
          # add to platforms comma seperated ,linux/arm/v7 : Issue: openjdk11-jre-headless alpine package not found
          # add to platforms comma seperated ,linux/s390x: All images with openjdk hav an issue with linux/s390x Problematic frame: J 6 c1 java.lang.String.hashCode()I java.base@11.0.9 (49 bytes) : Issue: openjdk11-jre-headles
          # add to platforms comma seperated ,linux/arm64:  : PyDev issue only

          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}

      - name: Image digest
        if: steps.build_docker_image.outputs.build && steps.prep.outputs.build
        run: echo ${{ steps.docker_build.outputs.digest }}
