name: release
on:
  workflow_dispatch:
    inputs:
      jans_release_as:
        description: 'Release version for the python projects, admin ui, docker images, and helm charts'
        required: true
        default: '1.0.22'
      mega_release_as:
        description: 'Mega release version'
        required: true
        default: '5.0.22'
      next_jans_release_as:
        description: 'next anticipated jans Mega release version'
        required: true
        default: '1.0.23'
      next_mega_release_as:
        description: 'next anticipated Mega release version'
        required: true
        default: '5.0.23'

jobs:
  mega-release-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Configure Git
      run: |
        git config user.name "mo-auto"
        git config user.email "54212639+mo-auto@users.noreply.github.com"
        git config --global user.signingkey "${{ steps.import_gpg.outputs.keyid }}"
        git config --global pull.rebase true

    - name: Prepare release
      run: |
        
        # echo "Install helm docs
        mkdir helmtemp
        cd helmtemp
        HELM_DOCS_VERSION=$(curl "https://api.github.com/repos/norwoodj/helm-docs/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/' | cut -c2-)
        curl -sSL https://github.com/norwoodj/helm-docs/releases/download/v"${HELM_DOCS_VERSION}"/helm-docs_"${HELM_DOCS_VERSION}"_Linux_x86_64.tar.gz  -o helm-docs_"${HELM_DOCS_VERSION}"_Linux_x86_64.tar.gz
        tar xvf helm-docs_"${HELM_DOCS_VERSION}"_Linux_x86_64.tar.gz
        sudo cp helm-docs /usr/local/bin/
        cd ..
        rm -rf helmtemp
        
        VERSION=${{ github.event.inputs.mega_release_as }}
        JANS_VERSION=${{ github.event.inputs.jans_release_as }}
        SETUP_VERSION=${{ github.event.inputs.jans_release_as }}
        DOCKER_VERSION=${{ github.event.inputs.jans_release_as }}
        ADMIN_UI_VERSION=${{ github.event.inputs.jans_release_as }}
        
        NEXT_VERSION=${{ github.event.inputs.next_mega_release_as }}
        NEXT_JANS_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_SETUP_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_DOCKER_VERSION=${{ github.event.inputs.next_jans_release_as }}
        NEXT_ADMIN_UI_VERSION=${{ github.event.inputs.next_jans_release_as }}
        
        echo "${{ secrets.MOWORKFLOWTOKEN }}" | gh auth login --with-token
        git checkout -b chore-$VERSION
        git pull origin chore-$VERSION || echo "Nothing to pull"
        
        # Copy the latest commit id and replace it inside the ENV `JANS_SOURCE_VERSION`
        LATEST_JANS_COMMIT=$(curl -s -H "Accept: application/vnd.github.VERSION.sha" "https://api.github.com/repos/JanssenProject/jans/commits/v$JANS_VERSION")
        egrep -lRZ --include=Dockerfile . | xargs -0 -l sed -i -e "s/ENV JANS_SOURCE_VERSION=.*/ENV JANS_SOURCE_VERSION=$LATEST_JANS_COMMIT/g"
        # Search and replace `FLEX_SOURCE_VERSION` with the latest commit
        LATEST_FLEX_COMMIT=$(curl -s -H "Accept: application/vnd.github.VERSION.sha" "https://api.github.com/repos/GluuFederation/flex/commits/main")
        egrep -lRZ --include=Dockerfile . | xargs -0 -l sed -i -e "s/ENV FLEX_SOURCE_VERSION=.*/ENV FLEX_SOURCE_VERSION=$LATEST_FLEX_COMMIT/g"
        git commit -a -S -m "chore: update admin ui and flex version" || echo "Nothing to commit"
        # Modify `./flex-linux-setup/flex_linux_setup/flex_setup.py` `JANS_BUILD` setting it to `""`
        sed -i -e "s/\"JANS_BUILD\": \"-SNAPSHOT\"/\"JANS_BUILD\": \"\"/g" ./flex-linux-setup/flex_linux_setup/flex_setup.py
        egrep -lRZ --include=version.py . | xargs -0 -l sed -i -e "s/__version__ = \"$SETUP_VERSION-dev\"/__version__ = \"$SETUP_VERSION\"/g"
        egrep -lRZ --exclude=CONTRIBUTING.md . | xargs -0 -l sed -i -e "s/$SETUP_VERSION-SNAPSHOT/$SETUP_VERSION/g"
        git commit -a -S -m "chore: modify app_info.json and python version files" || echo "Nothing to commit"
        # Update chart `appVersion` `version` and image tags to the official prospected versions and tags.
        egrep -lRZ --include=Chart.yaml . | xargs -0 -l sed -i -e "s/appVersion: .*/appVersion: \"$VERSION\"/g"
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu-all-in-one . | xargs -0 -l sed -i -e "s/version: .*/version: $VERSION/g"
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu-all-in-one . | xargs -0 -l sed -i -e "s/:1.*_dev/:$JANS_VERSION-1/g"
        egrep -lRZ --include=values.yaml --exclude-dir=gluu-all-in-one . | xargs -0 -l sed -i -e "s/:1.*_dev/: $JANS_VERSION-1/g"
        # Update chart `appVersion` `version` and image tags to the official prospected versions and tags.
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu . | xargs -0 -l sed -i -e "s/version: .*/version: $JANS_VERSION/g"
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu . | xargs -0 -l sed -i -e "s/:1.*_dev/:$VERSION-1/g"
        egrep -lRZ --include=values.yaml --exclude-dir=gluu . | xargs -0 -l sed -i -e "s/:1.*_dev/: $VERSION-1/g"
        helm-docs ./charts
        git commit -a -S -m "chore: update flex helm chart image tags" || echo "Nothing to commit"
        # Update versions files
        echo "$VERSION-1" > docker-flex-monolith/version.txt
        echo "$DOCKER_VERSION-1" > docker-flex-all-in-one/version.txt
        echo "$DOCKER_VERSION-1" > docker-admin-ui/version.txt
        echo "__version__ = \"$SETUP_VERSION\"" > flex-linux-setup/flex_linux_setup/version.py
        # bash json parse admin-ui/package.json file and replace version key
        jq '.version = $version' --arg version $ADMIN_UI_VERSION ./admin-ui/package.json > tmp.$$.json && mv tmp.$$.json admin-ui/package.json
        git commit -a -S -m "chore: update version files" || echo "Nothing to commit"
        
        # Push the changes to the repository
        git push --set-upstream origin chore-$VERSION
        MESSAGE="chore: release $VERSION"
        PR=$(gh pr create --body "Auto generated $VERSION release" --title "${MESSAGE}" --label "autorelease:pending" || echo "PR already exists")
        
        # Report it in RocketChat
        curl -X POST -H 'Content-Type: application/json' --data "{\"alias\":\"Mo-Auto\",\"emoji\":\":robot:\",\"text\":\":rocket: I am getting ready for releasing Flex $VERSION.\",\"attachments\":[{\"title\":\"Gluu Release bot\",\"title_link\":\"$PR\",\"text\":\"$PR\",\"color\":\"#764FA5\"}]}" ${{ secrets.GITHUBUSERBEHAVIORROCKETCHATREPORTER }}
        
        # Open snapshot PR
        git checkout -b chore-$NEXT_VERSION-SNAPSHOT
        git pull origin chore-$NEXT_VERSION-SNAPSHOT || echo "Nothing to pull"
        # Modify `./flex-linux-setup/flex_linux_setup/flex_setup.py` `JANS_BUILD` setting it to `"-SNAPSHOT"`
        sed -i -e "s/\"JANS_BUILD\": \"\"/\"JANS_BUILD\": \"-SNAPSHOT\"/g" ./flex-linux-setup/flex_linux_setup/flex_setup.py
        egrep -lRZ --include=version.py . | xargs -0 -l sed -i -e "s/__version__ = \"$SETUP_VERSION\"/__version__ = \"$NEXT_SETUP_VERSION\"/g"
        egrep -lRZ --exclude=CONTRIBUTING.md --exclude-dir=workflows . | xargs -0 -l sed -i -e "s/$SETUP_VERSION/$NEXT_SETUP_VERSION-SNAPSHOT/g"
        git commit -a -S -m "chore: modify app_info.json and python version files" || echo "Nothing to commit"
        # Update chart `appVersion` `version` and image tags to the official prospected versions and tags.
        egrep -lRZ --include=Chart.yaml . | xargs -0 -l sed -i -e "s/appVersion: .*/appVersion: \"$NEXT_VERSION-dev\"/g"
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu-all-in-one . | xargs -0 -l sed -i -e "s/version: .*/version: $NEXT_VERSION/g"
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu-all-in-one . | xargs -0 -l sed -i -e "s/:1.*_dev/:$NEXT_JANS_VERSION_dev/g"
        egrep -lRZ --include=values.yaml --exclude-dir=gluu-all-in-one . | xargs -0 -l sed -i -e "s/:1.*_dev/: $NEXT_JANS_VERSION_dev/g"
        # Update chart `appVersion` `version` and image tags to the official prospected versions and tags.
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu . | xargs -0 -l sed -i -e "s/version: .*/version: $NEXT_JANS_VERSION/g"
        egrep -lRZ --include=Chart.yaml --exclude-dir=gluu . | xargs -0 -l sed -i -e "s/:1.*_dev/:$NEXT_VERSION_dev/g"
        egrep -lRZ --include=values.yaml --exclude-dir=gluu . | xargs -0 -l sed -i -e "s/:1.*_dev/: $NEXT_VERSION_dev/g"
        helm-docs ./charts
        git commit -a -S -m "chore: update flex helm chart image tags" || echo "Nothing to commit"
        # Update versions files
        echo "$NEXT_VERSION-dev" > docker-flex-monolith/version.txt
        echo "$NEXT_DOCKER_VERSION-dev" > docker-flex-all-in-one/version.txt
        echo "$NEXT_DOCKER_VERSION-dev" > docker-admin-ui/version.txt
        echo "__version__ = \"$NEXT_SETUP_VERSION\"" > flex-linux-setup/flex_linux_setup/version.py
        # bash json parse admin-ui/package.json file and replace version key
        jq '.version = $version' --arg version $NEXT_ADMIN_UI_VERSION ./admin-ui/package.json > tmp.$$.json && mv tmp.$$.json admin-ui/package.json
        git commit -a -S -m "chore: update version files" || echo "Nothing to commit"
        
        # Push the changes to the repository
        git push --set-upstream origin chore-$NEXT_VERSION-SNAPSHOT
        MESSAGE="chore: release chore-$NEXT_VERSION-SNAPSHOT"
        SNAP_PR=$(gh pr create --body "Auto generated $NEXT_VERSION-SNAPSHOT release. DO NOT MERGE THIS BEFORE $PR. Remember the flow. First $PR gets reviewed be code owners and then merged for a release. QA then does post release tests and upon an approval from QA does $SNAP_PR get merged." --title "${MESSAGE}" --label "autorelease:pending" || echo "PR already exists")
        
        # Report it in RocketChat
        curl -X POST -H 'Content-Type: application/json' --data "{\"alias\":\"Mo-Auto\",\"emoji\":\":robot:\",\"text\":\":rocket: I am getting ready for releasing Flex $VERSION.\",\"attachments\":[{\"title\":\"Gluu Release bot\",\"title_link\":\"$PR\",\"text\":\"$PR\",\"color\":\"#764FA5\"}]}" ${{ secrets.GITHUBUSERBEHAVIORROCKETCHATREPORTER }}
