{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gluu Flex Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Designed from the ground up to support cloud-native deployments, Gluu Flex is a self-hosted software stack to enable your organization to build a world-class digital identity platform to authenticate both people and software.</p> <p>With Helm charts available out of the box, Gluu Flex can handle the most demanding requirements for concurrency. Thanks to cloud-native auto-scaling and zero downtime updates, you can build a robust, multi-datacenter topology. You can take advantage of new cloud databases like Amazon Aurora and Google Spanner.</p> <p>Common use cases include:</p> <ul> <li>Single sign-on (SSO)   </li> <li>Mobile authentication    </li> <li>API access management  </li> <li>Two-factor authentication (2FA)</li> <li>Customer identity and access management (CIAM)   </li> <li>Identity federation      </li> </ul>"},{"location":"#built-on-janssen","title":"Built on Janssen","text":"<p>Gluu Flex is a downstream product of the Linux Foundation Janssen Project. It was created for enterprise customers who want a commercially supported distribution, plus some additional tools to ease administration.</p>"},{"location":"#harness-low-code-authentication-flows-with-agama","title":"Harness Low Code Authentication Flows with Agama","text":"<p>Gluu Flex uses Agama to offer an alternative way to build web-based authentication flows. Traditionally, person authentication flows are defined in the server with jython scripts that adhere to a predefined API. With Agama, flows are coded using a DSL (domain specific language) designed for the sole purpose of writing web flows. Agama flows are simpler, more intuitive, and quicker to build.</p>"},{"location":"#support","title":"Support","text":"<p>The Gluu Flex contract includes guaranteed response times and consultative support via our support portal.</p>"},{"location":"#looking-for-older-documentation-versions","title":"Looking for older documentation versions?","text":"<p>The Janssen Project posts the last five versions of the documentation. If you are looking for older versions, you can find them unprocessed in the docs folder. Select the version of choice from the tag dropdown in GitHub. If you want to process them you may do so by following the steps below :</p>"},{"location":"#testing-documentation-changes-locally","title":"Testing Documentation Changes Locally","text":"<p>While contributing documentation to official Gluu documentation it is important to make sure that documents meet style guidelines and have been proofread to remove any typographical or grammatical errors. Gluu uses Material for MkDocs to create the documentation site. Before new content is pushed to the repository on GitHub, it should be tested locally by the author. Author can do this by deploying Material for MkDocs locally.</p> <p>High-level steps involve:</p> <ol> <li>Install Material for MkDocs</li> <li>Install required plugins</li> <li>Preview as you write</li> </ol>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#500-21-2023-12-18","title":"5.0.0-21 (2023-12-18)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.0-21 release (cee44ca)</li> </ul>"},{"location":"CHANGELOG/#500-20-2023-11-16","title":"5.0.0-20 (2023-11-16)","text":""},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>aio chart (#1436) (a20a695)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>docs: update casa base URI (#1440) (495536c)</li> <li>prepare for 5.0.0-20 release (f74643c)</li> </ul>"},{"location":"CHANGELOG/#500-19-2023-10-12","title":"5.0.0-19 (2023-10-12)","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>docs: remove Casa files from Flex (a5b7fcd)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>docs: remove Casa image assets (0b9f0b4)</li> <li>docs: update docs w.r.t casa move to Jans (5b7d3fd)</li> <li>docs: update docs w.r.t casa move to Jans (16f647c)</li> <li>prepare for 5.0.0-19 release (2d8e13d)</li> </ul>"},{"location":"CHANGELOG/#500-182023-09-23","title":"5.0.0-18(2023-09-23)","text":""},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>adding configuration and logs details (d136f3d)</li> <li>updating configuration docs (a1933e3)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.0-18 release (29f822f)</li> <li>prepare for 5.0.0-18 release (4af69cb)</li> <li>versioning (1abf437)</li> </ul>"},{"location":"CHANGELOG/#500-16-2023-08-14","title":"5.0.0-16 (2023-08-14)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.0-16 release (699d534)</li> </ul>"},{"location":"CHANGELOG/#500-15-2023-07-14","title":"5.0.0-15 (2023-07-14)","text":""},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>adding tags (7841e03)</li> <li>documentation of admin-ui #1063 (3cf1e7b)</li> <li>documentation of admin-ui #1063 (48233d3)</li> <li>edit flex license contents (8d7f749)</li> <li>making changes as per review comments (1bcd39b)</li> <li>making changes as per review comments (5c636fb)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>doc: added How to configure SuperGluu in Flex (6b7beef)</li> <li>doc: adding SG screenshot - 2 (e06bd79)</li> <li>doc: adding SG screenshot-1 (b581a03)</li> <li>doc: enable SG - 2 (d86ec85)</li> <li>doc: Flex SG doc review - How to Use SuperGluu (f564dd1)</li> <li>doc: hiding ad removal related doc (5354e84)</li> <li>doc: how to enable SG in Flex-UI (4851205)</li> <li>doc: index page flex (7d48422)</li> <li>doc: removing key list from user record info (01b671a)</li> <li>docs: flex-ui SG -- Compatability (f78c46a)</li> <li>doc: SG flex - How to use Super Gluu-1 (e07641c)</li> <li>doc: sg flex - how to use Super Gluu-screenshot location (7798023)</li> <li>doc: sg workflows (601b237)</li> <li>docs: test SG authentication (32f6b24)</li> <li>doc: test authentication SG (6d0f550)</li> <li>doc: Test authentication user guide (a554646)</li> <li>doc: uploading modified screenshot (0e9e0cf)</li> <li>prepare for 5.0.0-15 release (664553a)</li> </ul>"},{"location":"CHANGELOG/#500-14-2023-06-12","title":"5.0.0-14 (2023-06-12)","text":""},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.0-14 release (9481f55)</li> </ul>"},{"location":"CHANGELOG/#500-13-2023-05-12","title":"5.0.0-13 (2023-05-12)","text":""},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>admin-ui: add apply button (d334103)</li> <li>blockUI converted to functional component (4b8e7bd)</li> <li>email_2fa_core/install.bat has been removed; (f27e461)</li> <li>prepare for 5.0.13 release (8578827)</li> <li>profile details is distorted when multiple roles assigned to the user (e4603d8)</li> <li>revert prod webpack config of static &amp; fonts files (96fa135)</li> </ul>"},{"location":"CHANGELOG/#500-12-2023-04-18","title":"5.0.0-12 (2023-04-18)","text":""},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.12 release (994c985)</li> </ul>"},{"location":"CHANGELOG/#500-11-2023-04-06","title":"5.0.0-11 (2023-04-06)","text":""},{"location":"CHANGELOG/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.11 release (d3cc35a)</li> </ul>"},{"location":"CHANGELOG/#500-10-2023-03-16","title":"5.0.0-10 (2023-03-16)","text":""},{"location":"CHANGELOG/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>add cn license enforcment to chart (55fb0c9)</li> <li>prepare for 5.0.10 release (1ffcbc7)</li> </ul>"},{"location":"CHANGELOG/#500-9-2023-03-09","title":"5.0.0-9 (2023-03-09)","text":""},{"location":"CHANGELOG/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>docs: ubuntu install download location (bb3a5cd)</li> <li>prepare for 5.0.0-9 release (716d309)</li> </ul>"},{"location":"CHANGELOG/#500-8-2023-03-02","title":"5.0.0-8 (2023-03-02)","text":""},{"location":"CHANGELOG/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.0-8 release (29e0cbb)</li> </ul>"},{"location":"CHANGELOG/#500-7-2023-02-22","title":"5.0.0-7 (2023-02-22)","text":""},{"location":"CHANGELOG/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>prepare for 5.0.0-7 release (7f96937)</li> </ul>"},{"location":"CHANGELOG/#500-4-2022-12-08","title":"5.0.0-4 (2022-12-08)","text":""},{"location":"CHANGELOG/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>getting ready for a release (a0de091)</li> </ul>"},{"location":"CHANGELOG/#500-3-2022-11-08","title":"5.0.0-3 (2022-11-08)","text":""},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>admin-ui: reviewed previously updated dependencies #416 (ab81760)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>getting ready to release 5.0.0-3 (e8f3ecc)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous-chores","title":"Miscellaneous Chores","text":"<ul> <li>release 5.0.0-2 (06c6e64)</li> </ul>"},{"location":"admin/","title":"Gluu Flex Admin Guide","text":""},{"location":"admin/#overview","title":"Overview","text":"<p>Gluu Flex is a commercially supported distribution of the Janssen Project, including the OpenID, OAuth, Config, FIDO, Casa, and SCIM Server components. Additionally, Flex includes the commercially licensed Flex Admin UI.</p>"},{"location":"admin/#janssen-documentation","title":"Janssen Documentation","text":"<p>Central to Gluu Flex is the Janssen Project. Janssen enables organizations to build a scalable centralized authentication and authorization service using free open source software.</p>"},{"location":"admin/#admin-ui","title":"Admin UI","text":"<p>The Gluu Flex Admin UI is a reactive web interface to simplify the management and configuration of your Auth Server. The Admin UI enables you to easily view and edit configuration properties, interception scripts, clients, and metrics in one place.</p>"},{"location":"admin/config/","title":"Configuring Gluu Flex","text":""},{"location":"admin/config/#overview","title":"Overview","text":"<p>After installing, there are four primary strategies to configure Gluu Flex.</p>"},{"location":"admin/config/#admin-ui","title":"Admin UI","text":"<p>The recommended way to configure FLEX components is through the <code>Admin UI</code>.</p> <p>The Gluu Flex Admin UI is a reactive web interface to simplify the management and configuration of your Auth Server. The Admin UI enables you to easily view and edit configuration properties, interception scripts, clients, and metrics in one place. The Admin UI can be accessed by accessing the hostname set during installation in the browser.</p>"},{"location":"admin/config/#text-based-user-interface-tui","title":"Text-based User Interface (TUI)","text":"<p>You can use the Janssen Server with <code>Janssen TUI</code> to configure FLEX components. The TUI calls the Config API to perform ad hoc configuration, and instructions can be found in the Janssen documentation here.</p>"},{"location":"admin/config/#curl-commands","title":"CURL Commands","text":"<p>As an alternative, the Config API can be called directly using CURL commands.</p>"},{"location":"admin/config/#command-line-interface-cli","title":"Command Line Interface (CLI)","text":"<p>If needed, a command-line alternative to the TUI is available. Instructions can be found in the Janssen documentation here.</p>"},{"location":"admin/gluu-migration/","title":"Migrating from Gluu4","text":"<p>This guide shows how to migrate from <code>Gluu 4.x</code> to  <code>Gluu Flex</code>.</p>","tags":["administration","kubernetes","operations","gluu4","migration"]},{"location":"admin/gluu-migration/#migration-steps","title":"Migration steps","text":"<ol> <li> <p>Create a fresh flex K8s setup based on your preferred environment.</p> </li> <li> <p>Write all your existing configurations as code using the Janssen terraform provider.    You can check this doc to know the benefits of this approach and how to implement it. </p> </li> <li> <p>Test applying the configuration through Terraform. Ensure no delta between the old Gluu 4.x and Gluu flex, and verify the changes using the admin-ui/TUI.</p> </li> <li> <p>Move the sensitive data from the old setup to the new one, honoring any changes such as custom attributes and users.</p> </li> </ol>","tags":["administration","kubernetes","operations","gluu4","migration"]},{"location":"admin/gluu-migration/#terraform-configuration-example","title":"Terraform configuration example","text":"<p>Firstly, you have to initialize and configure the Janssen terraform provider. You can follow this doc to complete this.</p> <p>Once completed, let's showcase how to move existing gluu4 clients and interception scripts using Terraform.</p> <p>Note</p> <p>The examples are meant for demonstration purposes. You should adjust them as needed.</p>","tags":["administration","kubernetes","operations","gluu4","migration"]},{"location":"admin/gluu-migration/#clients-migration","title":"Clients Migration","text":"<p>We will use the jans_oidc_client resource.</p> <p>Add the following to <code>clients.tf</code>:</p> <pre><code>resource \"jans_oidc_client\" \"gluu4_migrated_client\" {\n  display_name                  = \"Gluu4 migrated client\"\n  description                   = \"Client migrated from Gluu4 to Flex\"\n  redirect_uris                 = [\"https://demoexample.gluu.org/admin\"]\n  token_endpoint_auth_method    = \"none\"\n  subject_type                  = \"pairwise\"\n  grant_types                   = [\"authorization_code\"]\n  response_types                = [\"code\"]\n  disabled                      = false\n  trusted_client                = true\n  application_type              = \"web\"\n  scopes                        = [\"inum=F0C4,ou=scopes,o=jans\"]\n  persist_client_authorizations = true\n  access_token_as_jwt           = false\n}\n</code></pre>","tags":["administration","kubernetes","operations","gluu4","migration"]},{"location":"admin/gluu-migration/#interception-scripts-migration","title":"Interception scripts Migration","text":"<p>We will use the jans_script resource.</p> <p>Add the following to <code>scripts.tf</code>:</p> <pre><code>resource \"jans_script\" \"gluu_migrated_script\" {\n  dn                   = \"inum=CACD-5901,ou=scripts,o=jans\"\n  inum                 = \"CACD-5901\"\n  name                 = \"scan_client_registration\"\n  description          = \"Scan Client Registration Script\"\n  script               = file(\"script.py\")\n  script_type          = \"client_registration\"\n  programming_language = \"python\"\n  level                = 100\n  revision             = 1\n  enabled              = true\n  modified             = false\n  internal             = false\n  location_type        = \"db\"\n  base_dn              = \"inum=CACD-5901,ou=scripts,o=jans\"\n\n  module_properties {\n    value1      = \"v1\"\n    value2      = \"v2\"\n    description = null\n  }\n}\n</code></pre> <p>You can run <code>terraform apply</code> and review the created resources in the Admin-UI/TUI.</p>","tags":["administration","kubernetes","operations","gluu4","migration"]},{"location":"admin/admin-ui/","title":"Index","text":""},{"location":"admin/admin-ui/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"admin/admin-ui/admin-menu/","title":"Admin menu","text":"","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#clients","title":"Clients","text":"<p>The logged-in user with appropriate permissions can view, register, edit and delete OIDC clients on auth server using Gluu Flex Admin UI.</p> <p></p> <p>The Client details are as follows:</p> Client fields Description Client name Name of the Client to be presented to the End-User. Client secret Client Secret. The same Client Secret value MUST NOT be assigned to multiple Clients. Description Description of the client. Authn method token endpoint Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. Subject type Subject type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public. Sector Identifier URI URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Grants List of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. Response types List of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Active Specifies whether the client is enabled. Application type Kind of the application. The default, if omitted, is web. Redirect URIs List of Redirection URI values used by the Client. One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request Redirect Regex When this field is set then redirect-URI must match with regex. Scopes List of scopes granted to the client. Access token type Type of the access token (JWT or reference) generated by the client. Include claims in id_token The claims will be included in id_token if this field is enabled Add auth_time to id_token When enabled then the auth_time claim is required in id_token. Run Introspection Script Before AccessToken As Jwt Creation And Include Claims When this field is enabled then Introspection Script will run before access token generation. Token binding confirmation method for id_token Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports the Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support the Token Binding of ID Tokens. Access token additional audiences The client audiences. Access token lifetime The client-specific access-token expiration. Refresh token lifetime The client-specific refresh-token expiration. Default max authn age The default maximum authentication age. Front channel. logout URI Relying Party (RP) URL that will cause the RP to log itself out when rendered in an iframe by the OP. This is used in the front-channel logout mechanisms, which communicate logout requests from the OP to RPs via the User Agent. Post logout redirect URI Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed. Back channel. logout URI Relying Party (RP) URL that will cause the RP to log itself out when sent a Logout Token by the OP. This is used in the back-channel logout mechanisms, which communicate logout requests directly between the OP and RPs. Back channel. logout session required Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. Front channel. logout session required Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. Client URI URL of the home page of the Client. The value of this field must point to a valid Web page. Policy URI URL that the Relying Party Client provides to the End-User to read about how the profile data will be used. Logo URI URL that references a logo for the Client application. Terms of service URI URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. Contacts OpenID connect client contacts list. Authorized JS origins Specifies authorized JavaScript origins. Software id Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered. Software version Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'. Software statement Specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT. CIBA: Token delivery method Specifies how backchannel token will be delivered. CIBA: Client notification endpoint Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens. CIBA: Require user code param If selected the auth_time claim is included in id_token. PAR: Require lifetime Represents the lifetime of Pushed Authorisation Request (PAR). PAR: Require PAR Is Pushed Authorisation Request (PAR) required? UMA: RPT token type Type of RPT token (JWT or reference). UMA: Claims redirect URI Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction. UMA: RPT Modification Script List of Requesting Party Token (RPT) claims scripts. Client JWKS URI URL for the Client's JSON Web Key Set (JWK) document containing the key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client''s encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage. Client JWKS List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value. id_token subject type The subject identifiers in ID tokens. Persist Authorizations Specifies if the client authorization details are to be persisted. The default value is true. Allow spontaneous scopes Whether to allow spontaneous scopes for the client. Spontaneous scope validation regex List of spontaneous scope regular expression. Spontaneous scopes Spontaneous scopes created using the client. Initiate Login URI Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client. Request URIs Provide a list of requests_uri values that are pre-registered by the Client for use at the Authorization Server. Default ACR Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client. Allowed ACRs Allowed ACRs Default prompt=login If enabled then sets prompt=login to the authorization request, which causes the authorization server to force the user to sign in again before it will show the authorization prompt. TLS Subject DN String representation of the expected subject distinguished name of the certificate, which the OAuth client will use in mutual TLS authentication. Is Expirable Client? Specifies whether client is expirable Client Scripts The custom scripts specific to the client.","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#scopes","title":"Scopes","text":"<p>The scope is a mechanism to limit an application's access to a user's account. An application can request one or more scopes, this information is then presented to the user in the consent screen, and the access token issued to the application will be limited to the scopes granted. Please check here for detail documentation on scopes.</p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#oauth-20-scopes","title":"OAuth 2.0 scopes","text":"<p>This scope type would only have a description, but no claims. Once a client obtains this token, it may be passed to the backend API.</p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#openid-scopes","title":"OpenID scopes","text":"<p>Specify what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. For OpenID Connect, scopes can be used to request that specific sets of information be made available as Claim Values.</p> <p></p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#spontaneous-scopes","title":"Spontaneous scopes","text":"<p>Spontaneous scopes are scopes with random part in it which are not known in advance. For e.g. transaction:4685456787, pis-552fds where 4685456787 or 552fds are generated part of the scope.</p> <p>Spontaneous scopes are disabled by default and can be enabled per client. The admins cannot create a spontaneous scope. Creation only happens when an authorized client presents a spontaneous scope at the token endpoint. There are the following client properties available during dynamic registration of the client related to spontaneous scopes:</p> <ul> <li>allowSpontaneousScopes OPTIONAL, boolean, false by default. Whether spontaneous scopes are allowed for the given   client.</li> <li>spontaneousScopes OPTIONAL, array of strings. Regular expressions which should match to scope. If matched scope is   allowed. Example: [\"^transaction:.+$\"]. It matches transaction:245 but not transaction:.</li> </ul>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#uma-scopes","title":"UMA scopes","text":"<p>UMA scope can either be created by the user or auto-created by the authentication server. UMA scope cannot be modified using Gluu Flex Admin UI.</p> <ul> <li>If the logged-in user creates UMA scope then the creator type will be <code>USER</code> and the creator Id will be logged-in   user's INUM.</li> <li>If auth server has auto-created a UMA scope then it will have the creator type as <code>AUTO</code> and no creator Id.</li> </ul>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#dynamic-scopes","title":"Dynamic Scopes","text":"<p>The dynamic scope custom script allows to generate a list of claims (and their values) on the fly, depending on circumstances like the id of the client requesting it, logged user's session parameters, values of other user's attributes, results of some calculations implementing specific business logic and/or requests to remote APIs or databases. Claims are then returned the usual way in response to a call to the user info endpoint.</p> <p>In order to configure a dynamic scope the following steps are required:</p> <ul> <li>The script of type <code>DYNAMIC_SCOPE</code> must be configured and enabled.</li> <li>Create scope of scope type <code>Dynamic</code> and select Dynamic scope script and claims inputs.</li> </ul> <p></p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#keys","title":"Keys","text":"<p>The JSON Web Key Sets (JWKS) is a set of public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.</p> <p></p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#auth-server-properties","title":"Auth Server Properties","text":"<p>The auth server configuration properties can be updated using GUI.</p> <p></p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#logging","title":"Logging","text":"<p>Following AS configuration properties can be used to customize AS logging:</p> <ul> <li>Log level: Specify the log levels of loggers</li> <li>Log layout: Logging layout used for Jans Authorization Server loggers</li> <li>Enable HTTP Logging: Enable/disable the request/response logging filter. Disabled by default.</li> <li>Disable JDK Logger?: Choose whether to disable JDK loggers</li> <li>Enable Oauth Audit Logging?: enable OAuth Audit Logging</li> </ul>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#authn","title":"Authn","text":"<p>Authentication Context Class Reference (ACR) enables applications to request and verify the level of authentication assurance or the context of the authentication process used for user authentication.</p> <p>This page allows the administrator to view all enabled ACRs and select the default ACR which refers to the predefined or default authentication assurance when no specific ACR value is requested or specified.</p> <p></p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/admin-menu/#sessions","title":"Sessions","text":"<p>The Janssen Authentication Server stores user session data in persistence. This screen lists the active session details and the administrator can revoke the sessions of the selected user.</p> <p></p>","tags":["administration","admin-ui","admin","role","permission","scripts","mau"]},{"location":"admin/admin-ui/auth-server-interaction/","title":"Interaction with Jans Auth Server","text":"<p>This user-friendly interface facilitates interaction with the Jans Auth Server through a REST API layer known as the Jans Config API. Here, we'll explore the working mechanism of the Gluu Flex Admin UI, focusing on its interaction with the Jans Auth Server and the key steps involved.</p> <p>When accessing the Gluu Flex Admin UI through a web browser, the following steps are involved:</p>","tags":["administration","admin-ui","interaction"]},{"location":"admin/admin-ui/auth-server-interaction/#license-verification","title":"License Verification","text":"<ol> <li>The user accesses the Gluu Flex Admin UI frontend through a web browser.</li> <li>The frontend requests the Admin UI backend to retrieve Admin UI configuration from Janssen persistence. The Admin UI configuration includes OIDC client details for accessing the Auth Server, OIDC client details for accessing the Token Server, OIDC client details for accessing the License APIs, and license metadata. It's important to note that the Admin UI backend is implemented as a Jans Config API plugin.</li> <li>The frontend calls the Admin UI backend API (<code>/isConfigValid</code>) to validate the license configuration in persistence, essentially verifying the validity of the OIDC client used to access the License APIs. If it is not valid, the same API tries to register a new OIDC client using the SSA uploaded during installation. In case the SSA is invalid, the Admin UI shows a page to upload a new valid SSA. To minimize network calls to account.gluu.org, <code>/isConfigValid</code> verifies the OIDC client validity only at a set interval (default: 30 days). Otherwise, <code>/isConfigValid</code> checks if the required OIDC client for License APIs exists in the Admin UI configuration (persistence).</li> <li>After validating the OIDC client, the Admin UI calls the backend API (/isActive) to check if a valid license is present in the license configuration. It verifies whether the license key and its details are valid and not expired. At regular intervals (default is 30 days), the Admin UI backend calls the SCAN API (/scan/license/isActive) to verify license validity and sync its details into the license configuration (persistence).</li> <li>If a valid license is not present, the frontend calls the backend API (/retrieve) to retrieve the license for the user via the SCAN API (/scan/license/retrieve). The license can only be retrieved from SCAN if the user has subscribed to the Admin UI license in Agama Lab.</li> <li>If the user has not already subscribed to a valid license in Agama Lab, the Admin UI displays a page to generate a 30-day trial license. The user cannot generate another trial license after expiry of a generated trial license and will need to subscribe to the Admin UI license in Agama Lab to access the user interface.</li> <li>After verification of valid license the frontend initiates the Authorization Code Flow by redirecting the user to the login page.</li> </ol> <pre><code>\nsequenceDiagram\ntitle License Verification\nautonumber\nactor User\nUser-&gt;&gt;Browser: open Admin UI URL\nBrowser-&gt;&gt;Gluu Flex Admin UI: launch Admin UI\nGluu Flex Admin UI-&gt;&gt;Admin UI Backend: /config\nAdmin UI Backend-&gt;&gt;Gluu Flex Admin UI: Admin UI config\nGluu Flex Admin UI-&gt;&gt;Admin UI Backend: /license/isConfigValid \nNote over Gluu Flex Admin UI,Admin UI Backend: validate license OIDC client\nalt license client valid\n    Admin UI Backend-&gt;&gt;Gluu Flex Admin UI: true\nelse license client invalid\n    Admin UI Backend-&gt;&gt;account.gluu.org: DCR using SSA\n\n    alt DCR success\n        account.gluu.org-&gt;&gt;Admin UI Backend: client credentials\n        Admin UI Backend-&gt;&gt;Admin UI Backend: save client credentials in persistence\n        Admin UI Backend-&gt;&gt;Gluu Flex Admin UI: true\n    else DCR fails\n        Admin UI Backend-&gt;&gt;Gluu Flex Admin UI: false\n        Gluu Flex Admin UI-&gt;&gt;Browser: Screen to Upload SSA\n    end\nend\nGluu Flex Admin UI-&gt;&gt;Admin UI Backend: /license/isActive\nNote over Gluu Flex Admin UI,Admin UI Backend: validate license\nAdmin UI Backend-&gt;&gt;SCAN: /scan/license/isActive\nalt license active\n    SCAN-&gt;&gt;Admin UI Backend: true\nelse license inactive / not present\n    SCAN-&gt;&gt;Admin UI Backend: false\n    Admin UI Backend-&gt;&gt;SCAN: /retrieve\n    alt license subscribed\n        SCAN-&gt;&gt;Admin UI Backend: license\n    else license not subscribed\n        SCAN-&gt;&gt;Admin UI Backend: false\n        Admin UI Backend-&gt;&gt;Gluu Flex Admin UI: false\n        Gluu Flex Admin UI-&gt;&gt;Browser: Screen to generate Trial license\n    end\nend\nAdmin UI Backend-&gt;&gt;Gluu Flex Admin UI: login page</code></pre>","tags":["administration","admin-ui","interaction"]},{"location":"admin/admin-ui/auth-server-interaction/#the-authorization-code-flow","title":"The Authorization Code Flow","text":"<ol> <li>The frontend initiates the Authorization Code Flow by calling authorization url and redirecting the user to the login page of the Janssen authorization server for user authentication.</li> <li>Upon successful authentication, the authorization server sends an authorization <code>code</code> and a <code>state</code> to the frontend. The frontend verifies the state.</li> <li>The frontend utilizes the authorization code to first obtain an access token (<code>AT1</code>) from the token endpoint of the authorization server.</li> <li>With AT1, the frontend requests the User-Info in JWT format (<code>UJWT</code>) from the authorization server by calling userInfo endpoint.</li> <li>The frontend stores the UJWT and its claims, including the user's role ( claim name is <code>jansAdminUIRole</code>) and other relevant information, in the Redux store.</li> </ol> <pre><code>\nsequenceDiagram\ntitle License Verification\nautonumber\nactor User\nGluu Flex Admin UI-&gt;&gt;Jans Auth Server: /authorize\nJans Auth Server-&gt;&gt;Gluu Flex Admin UI:code\nGluu Flex Admin UI-&gt;&gt;Jans Auth Server: /token\nNote right of Gluu Flex Admin UI: code as parameter\nJans Auth Server-&gt;&gt;Gluu Flex Admin UI: access_token\nNote right of Gluu Flex Admin UI: access_token as parameter\nGluu Flex Admin UI-&gt;&gt;Jans Auth Server: /userInfo\nJans Auth Server-&gt;&gt;Gluu Flex Admin UI: user-info (UJWT)\nGluu Flex Admin UI-&gt;&gt;Gluu Flex Admin UI: extract &amp; store claims from UJWT\n</code></pre>","tags":["administration","admin-ui","interaction"]},{"location":"admin/admin-ui/auth-server-interaction/#api-protection-and-scopes","title":"API Protection and Scopes","text":"<p>To ensure security and access control, Gluu Flex Admin UI leverages API protection and scopes:</p> <ol> <li>The Jans Config API's endpoints are protected and can only be accessed using a token (<code>AT2</code>) with the required scopes.</li> <li>To generate an AT2, the frontend requests the Token Server via the backend. The Token Server and Authorization Server can be the same or different.</li> <li>The Token Server employs an introspection script that validates the UJWT and refers to the role-scope mapping in the Token Server persistence.</li> <li>The introspection script validates the UJWT and includes the appropriate scopes in AT2 based on the user's role.</li> <li>The frontend receives AT2 and associated scopes from the backend.</li> <li>Features in the frontend are enabled or disabled based on the scopes provided in AT2. Refer this doc for GUI access control.</li> </ol> <pre><code>\nsequenceDiagram\ntitle License Verification\nautonumber\nactor User\n\nGluu Flex Admin UI-&gt;&gt;Admin UI Backend: /api-protection-token?ujwt=...\nAdmin UI Backend-&gt;&gt;Jans Token Server: /token\nJans Token Server-&gt;&gt;Jans Token Server: Verify ujwt\nJans Token Server-&gt;&gt;Jans Token Server: Add scopes to token based on role (AT2)\nJans Token Server-&gt;&gt;Admin UI Backend: AT2\nAdmin UI Backend-&gt;&gt;Gluu Flex Admin UI: AT2\nGluu Flex Admin UI-&gt;&gt;Gluu Flex Admin UI:extracts scopes from AT2\nGluu Flex Admin UI-&gt;&gt;Gluu Flex Admin UI: GUI access control based on scopes from AT2</code></pre>","tags":["administration","admin-ui","interaction"]},{"location":"admin/admin-ui/auth-server-interaction/#accessing-config-api-endpoints","title":"Accessing Config-API Endpoints","text":"<p>To access config-api endpoints, the following steps are taken:</p> <ol> <li>The Admin UI frontend requests AT2 from the Token Server through the backend.</li> <li>Armed with AT2, the frontend sends a request to the desired Jans Config API endpoint. AT2 is included in the authorization header, along with other request parameters.</li> <li>At the Jans Config API, AT2 is validated, and the provided scopes are verified to ensure the necessary scope for the requested endpoint is present.</li> <li>If the above steps are successful, the requested data is fetched from the Jans Config API and forwarded to the frontend.</li> </ol> <pre><code>\nsequenceDiagram\ntitle License Verification\nautonumber\nactor User\n\nGluu Flex Admin UI-&gt;&gt;Admin UI Backend: /api-protection-token?ujwt=...\nAdmin UI Backend-&gt;&gt;Jans Token Server: /token\nJans Token Server-&gt;&gt;Jans Token Server: Verify ujwt\nJans Token Server-&gt;&gt;Jans Token Server: Add scopes to token based on role (AT2)\nJans Token Server-&gt;&gt;Admin UI Backend: AT2\nAdmin UI Backend-&gt;&gt;Gluu Flex Admin UI: AT2\nGluu Flex Admin UI-&gt;&gt;Jans Config API: request API with AT2\nJans Config API&lt;&lt;-&gt;&gt;Jans Token Server: introspect AT2\nJans Token Server-&gt;&gt;Jans Config API: AT2 JSON\nJans Config API-&gt;&gt;Jans Config API: Enforcement: verify required scopes\nJans Config API-&gt;&gt;Jans Config API: validate params\nJans Config API-&gt;&gt;Jans Auth Server:call API with request params\nJans Auth Server-&gt;&gt;Jans Config API:response\nJans Config API-&gt;&gt;Gluu Flex Admin UI:response</code></pre>","tags":["administration","admin-ui","interaction"]},{"location":"admin/admin-ui/auth-server-interaction/#conclusion","title":"Conclusion","text":"<p>The Gluu Flex Admin UI simplifies the process of managing configuration and features of the Jans Auth Server through an intuitive graphical user interface. By following the Authorization Code Flow and leveraging API protection and scopes, the Gluu Flex Admin UI ensures secure and controlled interaction with the Jans Auth Server's REST API layer. This seamless interaction empowers administrators to efficiently manage the Jans Auth Server's settings while adhering to strict access controls and security protocols.</p>","tags":["administration","admin-ui","interaction"]},{"location":"admin/admin-ui/auth-server-menu/","title":"Auth Server","text":"<p>The Auth Server menu covers the following important sub-menus to configure and manage Auth server.</p> <ul> <li>Clients</li> <li>Sessions</li> <li>Keys</li> <li>Server configuration</li> <li>Logging</li> <li>Enabled Acrs</li> <li>Agama deployment</li> <li>Scopes</li> </ul>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#clients","title":"Clients","text":"<p>The logged-in user with appropriate permissions can view, register, edit and delete OIDC clients on auth server using Gluu Flex Admin UI.</p> <p></p> <p>The Client details are as follows:</p> Client fields Description Client name Name of the Client to be presented to the End-User. Client secret Client Secret. The same Client Secret value MUST NOT be assigned to multiple Clients. Description Description of the client. Authn method token endpoint Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. Subject type Subject type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public. Sector Identifier URI URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Grants List of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. Response types List of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Active Specifies whether the client is enabled. Application type Kind of the application. The default, if omitted, is web. Redirect URIs List of Redirection URI values used by the Client. One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request Redirect Regex When this field is set then redirect-URI must match with regex. Scopes List of scopes granted to the client. Access token type Type of the access token (JWT or reference) generated by the client. Include claims in id_token The claims will be included in id_token if this field is enabled Add auth_time to id_token When enabled then the auth_time claim is required in id_token. Run Introspection Script Before AccessToken As Jwt Creation And Include Claims When this field is enabled then Introspection Script will run before access token generation. Token binding confirmation method for id_token Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports the Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support the Token Binding of ID Tokens. Access token additional audiences The client audiences. Access token lifetime The client-specific access-token expiration. Refresh token lifetime The client-specific refresh-token expiration. Default max authn age The default maximum authentication age. Front channel. logout URI Relying Party (RP) URL that will cause the RP to log itself out when rendered in an iframe by the OP. This is used in the front-channel logout mechanisms, which communicate logout requests from the OP to RPs via the User Agent. Post logout redirect URI Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed. Back channel. logout URI Relying Party (RP) URL that will cause the RP to log itself out when sent a Logout Token by the OP. This is used in the back-channel logout mechanisms, which communicate logout requests directly between the OP and RPs. Back channel. logout session required Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. Front channel. logout session required Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. Client URI URL of the home page of the Client. The value of this field must point to a valid Web page. Policy URI URL that the Relying Party Client provides to the End-User to read about how the profile data will be used. Logo URI URL that references a logo for the Client application. Terms of service URI URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. Contacts OpenID connect client contacts list. Authorized JS origins Specifies authorized JavaScript origins. Software id Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered. Software version Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'. Software statement Specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT. CIBA: Token delivery method Specifies how backchannel token will be delivered. CIBA: Client notification endpoint Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens. CIBA: Require user code param If selected the auth_time claim is included in id_token. PAR: Require lifetime Represents the lifetime of Pushed Authorisation Request (PAR). PAR: Require PAR Is Pushed Authorisation Request (PAR) required? UMA: RPT token type Type of RPT token (JWT or reference). UMA: Claims redirect URI Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction. UMA: RPT Modification Script List of Requesting Party Token (RPT) claims scripts. Client JWKS URI URL for the Client's JSON Web Key Set (JWK) document containing the key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client''s encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage. Client JWKS List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value. id_token subject type The subject identifiers in ID tokens. Persist Authorizations Specifies if the client authorization details are to be persisted. The default value is true. Allow spontaneous scopes Whether to allow spontaneous scopes for the client. Spontaneous scope validation regex List of spontaneous scope regular expression. Spontaneous scopes Spontaneous scopes created using the client. Initiate Login URI Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client. Request URIs Provide a list of requests_uri values that are pre-registered by the Client for use at the Authorization Server. Default ACR Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client. Allowed ACRs Allowed ACRs Default prompt=login If enabled then sets prompt=login to the authorization request, which causes the authorization server to force the user to sign in again before it will show the authorization prompt. TLS Subject DN String representation of the expected subject distinguished name of the certificate, which the OAuth client will use in mutual TLS authentication. Is Expirable Client? Specifies whether client is expirable Client Scripts The custom scripts specific to the client.","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#scopes","title":"Scopes","text":"<p>The scope is a mechanism to limit an application's access to a user's account. An application can request one or more scopes, this information is then presented to the user in the consent screen, and the access token issued to the application will be limited to the scopes granted. Please check here for detail documentation on scopes.</p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#oauth-20-scopes","title":"OAuth 2.0 scopes","text":"<p>This scope type would only have a description, but no claims. Once a client obtains this token, it may be passed to the backend API.</p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#openid-scopes","title":"OpenID scopes","text":"<p>Specify what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. For OpenID Connect, scopes can be used to request that specific sets of information be made available as Claim Values.</p> <p></p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#spontaneous-scopes","title":"Spontaneous scopes","text":"<p>Spontaneous scopes are scopes with random part in it which are not known in advance. For e.g. transaction:4685456787, pis-552fds where 4685456787 or 552fds are generated part of the scope.</p> <p>Spontaneous scopes are disabled by default and can be enabled per client. The admins cannot create a spontaneous scope. Creation only happens when an authorized client presents a spontaneous scope at the token endpoint. There are the following client properties available during dynamic registration of the client related to spontaneous scopes:</p> <ul> <li>allowSpontaneousScopes OPTIONAL, boolean, false by default. Whether spontaneous scopes are allowed for the given   client.</li> <li>spontaneousScopes OPTIONAL, array of strings. Regular expressions which should match to scope. If matched scope is   allowed. Example: [\"^transaction:.+$\"]. It matches transaction:245 but not transaction:.</li> </ul>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#uma-scopes","title":"UMA scopes","text":"<p>UMA scope can either be created by the user or auto-created by the authentication server. UMA scope cannot be modified using Gluu Flex Admin UI.</p> <ul> <li>If the logged-in user creates UMA scope then the creator type will be <code>USER</code> and the creator Id will be logged-in   user's INUM.</li> <li>If auth server has auto-created a UMA scope then it will have the creator type as <code>AUTO</code> and no creator Id.</li> </ul>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#dynamic-scopes","title":"Dynamic Scopes","text":"<p>The dynamic scope custom script allows to generate a list of claims (and their values) on the fly, depending on circumstances like the id of the client requesting it, logged user's session parameters, values of other user's attributes, results of some calculations implementing specific business logic and/or requests to remote APIs or databases. Claims are then returned the usual way in response to a call to the user info endpoint.</p> <p>In order to configure a dynamic scope the following steps are required:</p> <ul> <li>The script of type <code>DYNAMIC_SCOPE</code> must be configured and enabled.</li> <li>Create scope of scope type <code>Dynamic</code> and select Dynamic scope script and claims inputs.</li> </ul> <p></p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#keys","title":"Keys","text":"<p>The JSON Web Key Sets (JWKS) is a set of public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.</p> <p></p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#auth-server-properties","title":"Auth Server Properties","text":"<p>The auth server configuration properties can be updated using GUI.</p> <p></p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#logging","title":"Logging","text":"<p>Following AS configuration properties can be used to customize AS logging:</p> <ul> <li>Log level: Specify the log levels of loggers</li> <li>Log layout: Logging layout used for Jans Authorization Server loggers</li> <li>Enable HTTP Logging: Enable/disable the request/response logging filter. Disabled by default.</li> <li>Disable JDK Logger?: Choose whether to disable JDK loggers</li> <li>Enable Oauth Audit Logging?: enable OAuth Audit Logging</li> </ul>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#ssa","title":"SSA","text":"<p>The SSA is a signed token that contains trusted metadata used to securely register OAuth clients in the Janssen Server. You'll find instructions for creating, retrieving, deleting, and validating SSAs, along with required parameters, sample commands, and security considerations here.</p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#authn","title":"Authn","text":"<p>Authentication Context Class Reference (ACR) enables applications to request and verify the level of authentication assurance or the context of the authentication process used for user authentication.</p> <p>This page allows the administrator to view all enabled ACRs and select the default ACR which refers to the predefined or default authentication assurance when no specific ACR value is requested or specified.</p> <p></p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#config-api-properties","title":"Config Api Properties","text":"<p>Gluu Flex Admin UI uses Config API to manage and configure the Jans Auth server. Config API helps in configuring auth-server, users, fido2 and scim modules. The Config API application configuration properties can be updated using Admin UI.</p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/auth-server-menu/#sessions","title":"Sessions","text":"<p>The Janssen Authentication Server stores user session data in persistence. This screen lists the active session details and the administrator can revoke the sessions of the selected user.</p> <p></p>","tags":["clients","scopes","keys","auth server","logging","Authn","admin-ui","configuration","sessions"]},{"location":"admin/admin-ui/configuration/","title":"Gluu Flex Admin UI Configuration","text":"<p>This document outlines the configuration process for Gluu Flex Admin UI, with a focus on essential components stored in the Auth Server's persistence layer. These components include role-permission mapping, OIDC client details for accessing the Auth Server, OIDC client details for accessing the Token Server, OIDC client details for accessing the License APIs, and license metadata.</p>","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#configuration-components","title":"Configuration Components","text":"","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#role-permission-mapping","title":"Role-Permission Mapping","text":"<p>Role-permission mapping defines which administrative roles are granted specific permissions within the Gluu Flex Admin UI. This mapping ensures that administrators can only access and modify functionalities relevant to their roles.</p> <p>The mapping is stored in json format with following attributes.</p> <p>Roles</p> Attribute Name Description roles Array of all roles role Role name description Role description deletable If set to <code>true</code> then entire role-permission mapping with respect to the role can be deleted. Default value: <code>false</code> <p>Permissions</p> Attribute Name Description permissions Array of all available permissions permission Permission name description Permission description defaultPermissionInToken If set to <code>true</code>, it indicates that permission will need authentication and valid role during <code>/token</code> request to include in token <p>Mapping</p> Attribute Name Description rolePermissionMapping List of all role-permission mapping role Role name permission Array of all permission mapped to the role <p>Sample role-permission mapping stored in persistence</p> <pre><code>{\n  \"roles\": [\n    {\n      \"role\": \"sample-role\",\n      \"description\": \"role description\",\n      \"deletable\": false\n    }\n  ],\n  \"permissions\": [\n    {\n      \"permission\": \"sample-permission1\",\n      \"description\": \"permission1 description\",\n      \"defaultPermissionInToken\": false\n    },\n    {\n      \"permission\": \"sample-permission2\",\n      \"description\": \"permission2 description\",\n      \"defaultPermissionInToken\": true\n    }\n  ],\n  \"rolePermissionMapping\": [\n    {\n      \"role\": \"sample-role\",\n      \"permissions\": [\n        \"sample-permission1\",\n        \"sample-permission2\"\n      ]\n    }\n  ]\n}\n</code></pre>","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#oidc-client-details-for-auth-server","title":"OIDC Client Details for Auth Server","text":"<p>To establish secure communication with the Auth Server, Gluu Flex Admin UI requires the OIDC client details, including client ID and client secret. These details are used for authentication and authorization purposes.</p> <p>The information is stored in json format with following attributes.</p> Attribute Name Description auiWebClient Object with Web OIDC client details opHost Auth Server hostname clientId Client Id of OIDC client used to access Auth server clientSecret Client Secret of OIDC client used to access Auth server scopes Scopes required for Admin UI authentication acrValues ACR required for Admin UI authentication redirectUri Redirect UI which is Admin UI home page postLogoutUri Url to be redirected after Admin UI logout frontchannelLogoutUri Front channel Logout Uri additionalParameters The custom parameters allow you to pass additional information to the authorization server during Admin UI authentication. Format: [{\"key\": \"custom-param-key\", \"value\": \"custom-param-value\"}, ...]","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#oidc-client-details-for-backend-api-server","title":"OIDC Client Details for Backend API Server","text":"<p>Similarly, Gluu Flex Admin UI needs OIDC client details to interact with the Janssen Server via. <code>Jans Config API</code> protected APIs. The Backend API client enables the UI to request and manage access tokens required to access <code>Jans Config API</code> protected resources.</p> <p>The information is stored in json format with following attributes.</p> Attribute Name Description auiBackendApiClient Object with Backend API client details opHost Token Server hostname clientId Client Id of OIDC client used to access Token server clientSecret Client Secret of OIDC client used to access Token server tokenEndpoint Token endpoint of token server","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#configuration-properties-for-user-interface","title":"Configuration Properties for User-Interface","text":"Attribute Name Description uiConfig Object with UI configuration attributes sessionTimeoutInMins The admin UI will auto-logout after a period of inactivity defined in this field.","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#oidc-client-details-for-license-server","title":"OIDC Client Details for License Server","text":"<p>Access to the License APIs is managed through OIDC client details. These details allows the Gluu Flex Admin UI Backend to generated access token to allow the retrieval of license-related information using license APIs.</p> <p>The information is stored in json format with following attributes.</p> Attribute Name Description opHost Auth Server hostname used to generate token to access License APIs clientId Client Id of OIDC client used to generate token to access License APIs clientSecret Client Secret of OIDC client used to generate token to access License APIs","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/configuration/#license-metadata","title":"License Metadata","text":"<p>License metadata includes relevant information about the Gluu Flex Admin UI's licensing, such as License Key, Hardware id, License server url, License Auth server url, SSA used to register license auth server client.</p> <p>The information is stored in json format with following attributes.</p> Attribute Name Description licenseConfig Object with License configuration details ssa SSA used to register OIDC client to access license APIs scanLicenseApiHostname SCAN License server hostname licenseHardwareKey Hardware key (org_id) to access license APIs intervalForSyncLicenseDetailsInDays The Admin UI backend syncs license details into the configuration (persistence) after the set interval (default: 30 days). <p>Sample configuration stored in persistence</p> <pre><code>{\n  \"oidcConfig\": {\n    \"auiWebClient\": {\n      \"redirectUri\": \"https://your.host.com/admin\",\n      \"postLogoutUri\": \"https://your.gost.com/admin\",\n      \"frontchannelLogoutUri\": \"https://your.host.com/admin/logout\",\n      \"scopes\": [\n        \"openid\",\n        \"profile\",\n        \"user_name\",\n        \"email\"\n      ],\n      \"acrValues\": [\n        \"basic\"\n      ],\n      \"opHost\": \"https://your.host.com\",\n      \"clientId\": \"2001.aaf0b8eb-a82e-4798-b1a0-e007803a6568\",\n      \"clientSecret\": \"GGO4t1uixrTpl4Rizt3zag==\".\n      \"additionalParameters\": []\n    },\n    \"auiBackendApiClient\": {\n      \"tokenEndpoint\": \"https://your.host.com/jans-auth/restv1/token\",\n      \"scopes\": [\n        \"openid\",\n        \"profile\",\n        \"user_name\",\n        \"email\"\n      ],\n      \"opHost\": \"https://your.host.com\",\n      \"clientId\": \"2001.aaf0b8eb-a82e-4798-b1a0-e007803a6568\",\n      \"clientSecret\": \"GGO4t1uixrTpl4Rizt3zag==\"\n    }\n  },\n  \"uiConfig\": {\n    \"sessionTimeoutInMins\": 30\n  },\n  \"licenseConfig\": {\n    \"ssa\": \"...ssa in jwt format...\",\n    \"scanLicenseApiHostname\": \"https://cloud-dev.gluu.cloud\",\n    \"licenseKey\": \"XXXX-XXXX-XXXX-XXXX\",\n    \"licenseHardwareKey\": \"github:ghUsername\",\n    \"oidcClient\": {\n      \"opHost\": \"https://account-dev.gluu.cloud\",\n      \"clientId\": \"36a43e2b-a77b-4e9c-a966-a9d98af1665c\",\n      \"clientSecret\": \"211188d8-a2d8-4562-ab53-80907c1bb5ba\"\n    }\n  }\n}\n</code></pre>","tags":["administration","admin-ui","configuration"]},{"location":"admin/admin-ui/faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"admin/admin-ui/faq/#why-is-the-gluu-flex-admin-ui-displaying-the-following-error-messages-after-the-flex-vm-installation","title":"Why is the Gluu Flex Admin UI displaying the following error messages after the Flex VM installation?","text":""},{"location":"admin/admin-ui/faq/#the-requested-page-not-found","title":"The requested page not found","text":"<pre><code>Error Code: 404\nThe requested page was not found on this server.\n</code></pre> <p>If a user encounters the above error when visiting the Admin UI URL, it indicates that the Admin UI is not properly installed. Please verify whether the Admin UI build is located at <code>/var/www/html/admin</code>. If the build is not present at this location, Janssen displays this error.</p>"},{"location":"admin/admin-ui/faq/#admin-ui-backend-is-down","title":"Admin UI backend is down","text":"<pre><code>Error Code: 503\nGluu Flex Admin UI is not getting any response from the backend (Jans Config Api).\n</code></pre> <p>Gluu Flex Admin UI facilitates interaction with the Jans Auth Server through a REST API layer, Jans Config API. This error prompts administrators to perform a series of troubleshooting steps.</p> <ol> <li>Verify the status of the Jans Config API service by using the command <code>systemctl status jans-config-api.service</code>. In the majority of cases, this error is displayed when the Jans Config API is not running. </li> <li>It is essential to verify the server's network connectivity, including firewall rules, ports, and routing, to ensure that there are no network-related impediments preventing communication with the Jans Config API. Jans Config API runs at port <code>8074</code> for Janssen vm installation.</li> <li>Check the Jans Config API logs at <code>/opt/jans/jetty/jans-config-api/logs/configapi.log</code> for any potential errors.</li> <li>Review the Admin UI logs at <code>/opt/jans/jetty/jans-config-api/logs/adminui.log</code> to check for any potential errors.</li> <li>Confirm the existence of the <code>/opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar</code> file. This file serves as the backend jar for the Admin UI and is used as a Jans Config API extension.</li> <li>It is also recommended to check the browser's console log and network tab for any failing requests, as this can provide additional information to diagnose and troubleshoot issues.</li> </ol>"},{"location":"admin/admin-ui/faq/#internal-server-error-in-generating-jans-config-api-token","title":"Internal server error in generating Jans Config Api token","text":"<pre><code>Error Code: 500\nError in generating token to access Jans Config Api endpoints.\n</code></pre> <p>This error is displayed when there is an internal server error in generating an access token for the Jans Config API. The Jans Config API endpoints are protected and require a token with the appropriate scopes for access.</p> <ol> <li>Inspect the Gluu Flex Admin UI log at <code>/opt/jans/jetty/jans-config-api/logs/adminui.log</code> for any errors related to token requests.</li> <li>Examine the Janssen Auth server log at <code>/opt/jans/jetty/jans-auth/logs/jans-auth.log</code> while it is in debug/trace mode to identify any errors that may occur during token generation. </li> </ol>"},{"location":"admin/admin-ui/faq/#why-is-the-gluu-flex-admin-ui-is-displaying-following-page-to-upload-ssa","title":"Why is the Gluu Flex Admin UI is displaying following page to upload SSA?","text":"<p>During installation, it is necessary to provide a Software Statement Assertion (SSA), which the Admin UI utilizes to register an OIDC client for accessing license APIs. To obtain a new SSA or renew an existing one, please follow the steps outlined in the provided guide from the Agama Lab web interface. If the SSA used during the installation has expired or become invalidated, you will need to upload a fresh SSA to regain access to the Admin UI.</p>"},{"location":"admin/admin-ui/faq/#why-is-the-gluu-flex-admin-ui-is-displaying-following-message-on-screen-to-generate-trial-license","title":"Why is the Gluu Flex Admin UI is displaying following message on screen to generate trial license?","text":"<pre><code>Payment Required.\n</code></pre> <p>This message indicates that in order to enjoy long-term access to the Gluu Flex Admin UI, you will need to subscribe for a Admin UI license on the Agama Lab website.</p> <pre><code>License validity period has expired.\n</code></pre> <p>This message is displayed when a user attempts to generate a trial license (from the Admin UI) after the previously generated trial license has expired. Please note that the Admin UI 30-day trial license can only be generated once per Agama Lab user.  </p>"},{"location":"admin/admin-ui/fido-menu/","title":"FIDO","text":"","tags":["administration","admin-ui","fido2","fido"]},{"location":"admin/admin-ui/fido-menu/#configuring-fido2","title":"Configuring FIDO2","text":"<p>FIDO 2.0 (FIDO2) is an open authentication standard that enables people to leverage common devices to authenticate to online services in both mobile and desktop environments.</p> <p>FIDO2 comprises the W3C\u2019s Web Authentication specification (WebAuthn) and FIDO\u2019s corresponding Client-to-Authenticator Protocol (CTAP). WebAuthn defines a standard web API that can be built into browsers and related web platform infrastructure to enable online services to use FIDO Authentication. CTAP enables external devices such as mobile handsets or FIDO Security Keys to work with WebAuthn and serve as authenticators to desktop applications and web services.</p> <p>Gluu Flex Admin UI allows configuring parameters of Janssen's FIDO2 server. Check following documnetation for details of FIDO2 configuration parameters.</p>","tags":["administration","admin-ui","fido2","fido"]},{"location":"admin/admin-ui/fido-menu/#static-configuration","title":"Static Configuration","text":"<p>The Static Configuration section holds the main server parameters and certificate paths necessary for the FIDO2 configuration.</p> <p></p> <p>Authenticator Certificates Folder</p> <ul> <li>The path to the folder where authenticator certificates are stored. These certificates are used to validate the authenticity of FIDO2 authenticators.</li> <li>This field helps to point to the location of authenticator certificates, which are critical in verifying the authenticity of a device during registration or authentication in a FIDO2 process.</li> </ul> <p>MDS TOC Certificates Folder</p> <ul> <li>This field specifies the path to the folder containing the MDS (Metadata Service) TOC (Table of Contents) certificates.</li> <li>It helps in specifying the location of the certificates used to validate metadata for FIDO2 devices.</li> </ul> <p>MDS TOC Files Folder</p> <ul> <li>This field defines the folder path that contains the MDS TOC files.</li> <li>The TOC files provide metadata related to FIDO2 authenticators and are necessary for validation during the authentication process.</li> </ul> <p>Check U2F Attestations</p> <ul> <li>A toggle to enable or disable U2F (Universal 2nd Factor) attestation checking.</li> <li>This option determines whether the system should validate U2F devices' attestations during registration. U2F was an earlier version of FIDO, and some devices may still use it.</li> </ul> <p>Unfinished Request Expiration</p> <ul> <li>Defines the time in seconds for which an unfinished authentication request is considered valid.</li> <li>This setting ensures that incomplete or pending authentication requests are discarded after a specified period, preventing the system from being overloaded with stale requests.</li> </ul> <p>Authentication History Expiration</p> <ul> <li> <p>This parameter defines how long (in minutes) the system should retain authentication history logs. After this period, authentication logs will be deleted automatically.</p> </li> <li> <p>This helps manage storage space by ensuring that only relevant authentication history data is retained, with older data being automatically cleaned up.</p> </li> </ul> <p>Server Metadata Folder</p> <ul> <li>The path to the server metadata folder, where FIDO2 metadata is stored.</li> <li>This folder contains critical information about the server\u2019s capabilities, such as supported features, certificates, and public keys, needed for the authentication process.</li> </ul> <p>User Auto Enrollment</p> <ul> <li>A toggle that enables or disables automatic enrollment of users in the FIDO2 authentication process.</li> <li>When enabled, new users are automatically enrolled into the FIDO2 authentication system during their first sign-in. This helps to streamline the user experience and speed up registration.</li> </ul> <p>Requested Credential Types</p> <ul> <li> <p>Defines the types of credentials that are requested for authentication, such as public key credentials or biometric factors.</p> </li> <li> <p>It restricts or specifies the type of credentials that the system should request during the authentication process. This allows for more granular control over the types of authenticators that can be used.</p> </li> </ul> <p>Requested Parties ID</p> <ul> <li> <p>This field is used to define the party or service requesting authentication. Multiple parties can be added by clicking the + Add Party button.</p> </li> <li> <p>This setting is used to limit authentication to certain parties or domains. It ensures that only specific parties can authenticate the user, adding an additional layer of security.</p> </li> </ul> <p>Once all parameters are set, click the Apply button at the bottom of the page to save the configuration changes.</p>","tags":["administration","admin-ui","fido2","fido"]},{"location":"admin/admin-ui/fido-menu/#dynamic-configuration","title":"Dynamic Configuration","text":"<p>The Dynamic Configuration section allows for adjustments to operational settings, such as logging, metrics, and service endpoints.</p> <p></p> <p>Issuer</p> <ul> <li> <p>This is the identifier (usually a URL) of the FIDO2 service. It identifies the entity that is responsible for issuing the authentication tokens.</p> </li> <li> <p>It identifies the authentication provider to ensure that the server\u2019s identity is verified during communication with other systems or services.</p> </li> </ul> <p>Base Endpoint</p> <ul> <li>The base endpoint URL for the FIDO2 RESTful API.</li> <li>It determines the entry point for all communication with the FIDO2 system, ensuring that API requests are correctly routed to the server.</li> </ul> <p>Clean Service Interval</p> <ul> <li>This setting specifies the time interval (in seconds) at which the service will clean up expired or unnecessary data.</li> <li>This setting ensures that data management tasks, such as removing expired sessions, occur at a regular interval to prevent data buildup and keep the system efficient.</li> </ul> <p>Clean Service Batch Chunk</p> <ul> <li>Defines the batch size for cleanup processes. The service will clean up data in chunks of this size.</li> <li>It allows the cleanup process to be optimized by controlling the number of records that are processed at once, preventing system overload during large cleanup tasks.</li> </ul> <p>Use Local Cache</p> <ul> <li>A toggle to enable or disable the use of local caching for temporary data storage.</li> <li>This setting helps reduce the load on external systems by storing frequently accessed data locally, improving performance by allowing faster access to that data.</li> </ul> <p>Disable JDK Logger</p> <ul> <li>This option controls whether Java Development Kit (JDK) logging is disabled.</li> <li>Disabling the JDK logger helps reduce unnecessary log data, which can be especially useful in production environments where minimal logging is preferred for performance.</li> </ul> <p>Logging Level</p> <ul> <li> <p>Specifies the level of logging information to capture. Options include DEBUG, INFO, WARN, FATAL, OFF, TRACE and ERROR.</p> </li> <li> <p>This setting controls the verbosity of log messages, allowing the system to capture only necessary information based on the severity level.</p> </li> </ul> <p>Logging Layout</p> <ul> <li> <p>Defines the format in which log entries are recorded. Common formats include plain text or JSON.</p> </li> <li> <p>It allows for easy reading and processing of logs depending on the desired format, making it easier for administrators to monitor system activity.</p> </li> </ul> <p>External Logger Configuration</p> <ul> <li>Provides the ability to configure an external logging system for centralized logging.</li> <li>It helps integrate the system with external logging solutions for better log management, analysis, and monitoring, which is particularly useful in large-scale environments.</li> </ul> <p>Metric Reporter Interval</p> <ul> <li>Specifies the interval (in seconds) at which the FIDO2 server should report metrics.</li> <li>This helps track the system's performance over time and ensures regular reporting of metrics to assist with monitoring and troubleshooting.</li> </ul> <p>Metric Reporter Keep Data Days</p> <ul> <li>Defines the number of days for which metric data should be kept before it is discarded.</li> <li>It helps manage data retention for performance monitoring, ensuring that only the necessary amount of data is stored and preventing storage overload.</li> </ul> <p>Metric Reporter Enabled</p> <ul> <li>This option enables or disables metric reporting for the FIDO2 service.</li> <li>Enabling this option ensures that system metrics are reported and monitored, allowing for better tracking and diagnostics of system health.</li> </ul> <p>Person Custom Object Classes</p> <ul> <li>Defines custom object classes that extend the person model.</li> <li>This allows the system to store additional user data beyond the default attributes provided by the base person model, enabling greater flexibility in managing user information.</li> </ul> <p>Hints</p> <ul> <li>A field that provides suggestions or predefined values to assist in configuration.</li> <li>It guides the user in providing the correct configuration options or values by offering helpful hints or pre-configured suggestions, such as common object classes or device types.</li> </ul> <p>Once all parameters are set, click the Apply button at the bottom of the page to save the configuration changes.</p> <p>The FIDO2 configuration page in the Gluu Flex Admin UI provides an intuitive interface for managing various server and authentication settings, enabling organizations to implement secure and flexible passwordless authentication solutions.</p>","tags":["administration","admin-ui","fido2","fido"]},{"location":"admin/admin-ui/home/","title":"Home","text":"","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#dashboard","title":"Dashboard","text":"<p>After successful authentication, the administrator is taken to the dashboard. The dashboard brings an organized presentation of crucial details at one place adding to the convenience of users in tracking and analysis of auth server and other details.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#dashboard-descriptions-fields","title":"Dashboard Descriptions Fields","text":"<ul> <li>OIDC Clients Count: The count of OIDC clients created on auth server.</li> <li>Active Users Count: The count of <code>active</code> users on auth server.</li> <li>Token Issued Count: This figure is the sum of the access-tokens with grant-type <code>client credentials</code> and <code>authorization code</code> and id-token.</li> <li>Server statuses: The health status of the <code>Auth Server</code> <code>CASA</code> <code>SCIM</code> <code>Config API</code> <code>FIDO</code> <code>Keycloak</code> <code>Jans Lock</code> . For e.g. <code>Running</code> or <code>Down</code>.</li> <li>Database status: The health status of the persistence (e.g. PostgreSQL, MySQL etc).</li> </ul>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#access-token-graph","title":"Access Token Graph","text":"<p>The dashboard has a bar graph showing month-wise access-token with grant-type <code>client credentials</code>, <code>authorization code</code> and <code>id_token</code> generated from auth server.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#localization-and-theme-selection","title":"Localization and Theme selection","text":"<p>Admin UI supports localization. The default language is English. The other supported languages are French and Portuguese. A new preferred language can be selected from the top right corner of the dashboard which will convert the labels and tooltip to the selected language.</p> <p></p> <p>The administrator can also select from four website themes in Admin UI.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#health","title":"Health","text":"<p>The health section show the statuses of the <code>OAuth Server</code> and <code>Database</code>.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#license-details","title":"License Details","text":"<p>Admin UI uses LicenseSpring platform for customer license management.</p> <ul> <li>Product Name: The name of the product created on the LicenseSpring platform. The license issued for Admin UI activation is created under this product. Check LicenseSpring docs for more details.</li> <li>License Type: The type of license issued. For e.g. Perpetual, Time Limited, Subscription and Consumption.</li> <li>Customer Email: To issue a license, we need to enter customer details like first name, last name, company, email and phone number in the LicenseSpring platform. This field displays the email of the customer of the license.</li> <li>Company Name: The company name of the registered product.</li> <li>License Status: The status of the license (e.g. active or inactive).</li> </ul> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#mau-graph","title":"MAU Graph","text":"<p>This is a line graph showing month-wise active users under a selected date range.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#settings","title":"Settings","text":"<p>The Gluu Flex Admin UI provides a user-friendly interface for managing various UI settings of this web application. This page has the following fields.</p> <ul> <li>List paging size: This field allows to define the default paging size for all search pages within the Admin UI.</li> <li>Config API URL: The read-only URL of the Jans Config API is used by the Admin UI for interaction.</li> <li>Admin UI Session Timeout (In Minutes): This field determines the maximum idle time allowed before a user is automatically logged out of the Admin UI.</li> <li>Admin UI authentication method (ACR): This dropdown enables user to select the default authentication method to be used in the Admin UI.</li> <li>Custom Parameters (for authentication): The custom parameters allow you to pass additional information to the authorization server during Admin UI authentication.</li> </ul> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#security","title":"Security","text":"<p>The features like managing Admin UI Roles and Capabilities and Mappings are placed under the Security menu. These features will be discussed one by one below:</p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#gui-access-control","title":"GUI Access Control","text":"<p>The administrator can control view/edit/delete access of users of Gluu Flex Admin UI by adding or removing the appropriate Permissions mapped to the user's Admin UI Role. For e.g. if the read Permission of OIDC clients (<code>https://jans.io/oauth/config/clients.readonly</code>) is not mapped to the logged-in user's Role, the contents of the page showing OIDC client records will not be visible to the user. In the same way, if the write and delete Permissions of OIDC clients are not mapped then the user will not be able to edit or delete any OIDC client record.</p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#admin-ui-roles","title":"Admin UI Roles","text":"<p>The logged-in administrator can create, edit or delete Admin UI Roles using this Page. The Admin UI Role can be assigned to the user using the User Management feature of this GUI. After installation, the following Admin UI Roles can be seen on Admin UI: api-viewer, api-editor, api-manager and api-admin. The default user i.e. <code>admin</code> is assigned with api-admin role. A user with one or more Admin UI Role(s) assigned will be able to log into Gluu Flex Admin UI.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#capabilities","title":"Capabilities","text":"<p>Gluu Flex Admin UI uses Config API to manage and configure the Jans Auth server.The user interface allows to add, edit and delete the Permissions or Capabilities used to access the APIs (i.e. rest APIs used by Admin UI).</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#role-permission-mapping","title":"Role-Permission Mapping","text":"<p>The administrator can map the Admin UI Role with one or more Capabilities using the Role-Permission Mapping page. The Role mapped with Capabilities can be then assigned to the user to allow access to the corresponding operations of the GUI.</p> <p></p> <p>The below table lists the Capabilities used in Admin UI:</p> Capability Description <code>https://jans.io/oauth/config/attributes.readonly</code> View Person attributes <code>https://jans.io/oauth/config/attributes.write</code> Add/Edit Person attributes <code>https://jans.io/oauth/config/attributes.delete</code> Delete Person attributes <code>https://jans.io/oauth/config/scopes.readonly</code> View the Scopes <code>https://jans.io/oauth/config/scopes.write</code> Add/Edit Scopes <code>https://jans.io/oauth/config/scopes.delete</code> Delete Scopes <code>https://jans.io/oauth/config/scripts.readonly</code> View the Scripts <code>https://jans.io/oauth/config/scripts.write</code> Add/Edit Scripts <code>https://jans.io/oauth/config/scripts.delete</code> Delete Scripts <code>https://jans.io/oauth/config/openid/clients.readonly</code> View the Clients <code>https://jans.io/oauth/config/openid/clients.write</code> Add/Edit Clients <code>https://jans.io/oauth/config/openid/clients.delete</code> Delete Clients <code>https://jans.io/oauth/config/smtp.readonly</code> View SMTP configuration <code>https://jans.io/oauth/config/smtp.write</code> Edit SMTP configuration <code>https://jans.io/oauth/config/smtp.delete</code> Remove SMTP configuration <code>https://jans.io/oauth/config/logging.readonly</code> View Auth server log configuration <code>https://jans.io/oauth/config/logging.write</code> Edit Auth server log configuration <code>https://jans.io/oauth/config/database/ldap.readonly</code> View LDAP persistence configuration <code>https://jans.io/oauth/config/database/ldap.write</code> Edit LDAP persistence configuration <code>https://jans.io/oauth/config/database/ldap.delete</code> Delete LDAP persistence configuration <code>https://jans.io/oauth/config/jwks.readonly</code> View JWKS <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/role.readonly</code> View Admin UI Roles <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/role.write</code> Edit Admin UI Roles <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/role.delete</code> Delete Admin UI Roles <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.readonly</code> View Admin UI Permissions <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.write</code> Edit Admin UI Permissions <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.delete</code> Delete Admin UI Permissions <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.readonly</code> View Role-Permission Mapping <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.write</code> Edit Role-Permission Mapping <code>https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.delete</code> Delete Role-Permission Mapping","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#webhooks","title":"Webhooks","text":"<p>Gluu Flex Admin UI uses webhooks to automate custom business logic during create, update, and delete operations (e.g., when a new user is created). Administrators can map webhooks to specific features and events, enabling dynamic and extensible workflows.</p> <p>Follow this tutorial for setup instructions.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#assets","title":"Assets","text":"<p>The Custom Asset Upload feature enables users to upload various types of assets directly to the Janssen Auth Server and its associated components through the graphical user interface (Admin UI) \u2014 without the need to manually access or modify the backend file system. It reduces dependency on system-level access or DevOps intervention and the file uploads are handled within the scope of user permissions defined in the Admin UI.</p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#key-use-cases","title":"Key Use Cases:","text":"<ul> <li> <p>Web UI Customization: Users can upload assets such as .js, .css, or .png files to modify the look and feel of authentication-related web pages (e.g., login or error pages) to meet branding or accessibility requirements.</p> </li> <li> <p>Library or Plugin Addition: Developers can upload .jar files or other supporting resources to introduce new functionality into the running server such as custom authentication mechanisms, filters, or extensions.</p> </li> <li> <p>Configuration Enhancements: The feature supports uploading configuration-related files like .xml, .properties, or .json which may define behaviors, rules, or component settings for the server or its modules.</p> </li> </ul> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/home/#audit-logs","title":"Audit Logs","text":"<p>Audit logs are records of write requests initiated from the Admin UI to the Jans Config API. In simpler terms, whenever an administrator makes a change \u2014 such as updating a client, modifying a script, or changing a configuration property \u2014 that action is recorded.</p> <p>The Audit Log Search page allows administrators to search and analyze recorded administrative activities. It provides date range and pattern-matching filters to help you quickly locate specific log entries which includes details like the timestamp, user, action, and affected resources, making it useful for security monitoring, compliance, and troubleshooting.</p> <p></p>","tags":["administration","admin-ui","dashboard","health","license","mau","setting","security","admin-ui-roles","roles","mappings","permissions","capabilities","webhooks","assets","Jans-assets","audit-log","logs"]},{"location":"admin/admin-ui/introduction/","title":"Gluu Flex Admin UI","text":"<p>Gluu Flex Admin UI is a web interface to simplify the management and configuration of your Janssen Authentication Server. One of the key services offered by Gluu Flex is the ability to view and edit configuration properties, interception scripts, clients, users, metrics, and more, all in one place. This user-friendly interface facilitates interaction with the Jans Auth Server through a REST API layer known as the Jans Config API.</p> <p></p> <p>The above diagram explains interaction between various depending components.  </p>","tags":["administration","admin-ui","installation","license"]},{"location":"admin/admin-ui/introduction/#admin-ui-frontend","title":"Admin UI Frontend","text":"<p>This user facing GUI has been developed using React.js and Redux is used for state management. The Admin UI utilizes an OpenAPI JavaScript client for Jans Config API, facilitating API calls to Jans Config API endpoints.</p> <p>The GUI utilizes popular libraries such as Material-UI, Axios, Formik, etc. Webpack is responsible for compiling and bundling the application, optimizing its performance, and generating the necessary production files. The Admin UI bundle is hosted on an Apache HTTP server, which is included as a component with the Janssen server installation. This setup ensures that the GUI is readily accessible and efficiently served to users.</p>","tags":["administration","admin-ui","installation","license"]},{"location":"admin/admin-ui/introduction/#admin-ui-backend","title":"Admin UI Backend","text":"<p>The GUI utilizes a dedicated Java backend to handle specific tasks, such as reading the Admin UI configuration from persistence, managing Admin UI roles and permission mapping in configuration, performing audit logging, and making calls to license APIs on SCAN. The Jans Config API follows a flexible plugin architecture, allowing the addition of new APIs through extensions known as plugins, without the need to modify the core application. The Admin UI Backend has been incorporated into the Jans Config API as a plugin to address Admin UI-specific tasks.   </p>","tags":["administration","admin-ui","installation","license"]},{"location":"admin/admin-ui/introduction/#installation","title":"Installation","text":"<p>Gluu Flex can be installed using VM installer or using Rancher on Cloud Native.</p> <p>During installation, we need to provide a Software Statement Assertion (SSA) which is used by Admin UI to register an OIDC client to access license APIs. Check the following guide for the steps to issue SSA from the Agama Lab web interface.</p> <p></p>","tags":["administration","admin-ui","installation","license"]},{"location":"admin/admin-ui/introduction/#gluu-flex-license","title":"Gluu Flex License","text":"<p>After installation, the Admin UI can be accessed at <code>https://hostname/admin</code> (the hostname is provided during setup). Access to this web interface is granted only after subscribing to the Admin UI license from Agama Lab.</p> <p>There is a provision to generate a 30-day free trial license of Gluu Flex which will help users to enter and understand this web interface.</p> <p></p> <p>After license activation, the user can log into Gluu Flex Admin UI using the default username (<code>admin</code>) and the <code>password</code> (the admin password provided during installation).</p> <p></p>","tags":["administration","admin-ui","installation","license"]},{"location":"admin/admin-ui/introduction/#flex-services-dependencies","title":"Flex services dependencies","text":"<p>Gluu Flex Admin UI depends on following Flex services:</p> <ul> <li>Janssen Config API service (jans-config-api.service) </li> <li>The Apache HTTP Server (apache2.service) </li> </ul>","tags":["administration","admin-ui","installation","license"]},{"location":"admin/admin-ui/jans-lock-menu/","title":"Janssen Lock","text":"<p>Janssen Lock (or just \"Lock\") provides a centralized control plane for domains to use Cedar to secure a network of distributed applications and audit the activity of both people and software.</p> <p>Gluu Flex Admin UI enables administrators to manage Jans Lock settings, including logging configuration, metric reporter setup, and policy management, through a streamlined and user-friendly interface.</p>","tags":["administration","admin-ui","cedar","jans-lock"]},{"location":"admin/admin-ui/left-nav-menu/","title":"Left Navigation Menu","text":"<p>In the realm of web design and user experience, the left navigation menu holds a prominent position. It serves as a vital element in organizing and navigating the content within web applications. In Gluu Flex Admin UI the left navigation menu establishes a clear information hierarchy to access the core features.</p> <p>Gluu Flex Admin UI has the following main menus on the left navigation:</p> <ul> <li>Home</li> <li>Auth server</li> <li>Users</li> <li>Scripts</li> <li>User Claims</li> <li>Services</li> <li>SMTP</li> <li>SCIM</li> <li>FIDO</li> <li>SAML</li> <li>Jans Lock</li> </ul>","tags":["administration","admin-ui","left navigation menu"]},{"location":"admin/admin-ui/logs/","title":"Gluu Flex Admin UI Logs","text":"<p>Log files are essential components of a web application's infrastructure as they provide valuable insights into its functioning, performance, and potential issues. Log files play a critical role in maintaining, troubleshooting, and monitoring the Gluu Flex Admin UI application. Understanding the different log types, their locations, and the process of accessing and analyzing them will empower administrators to efficiently manage the application's health and quickly address any issues that may arise. </p>","tags":["administration","admin-ui","installation","logs"]},{"location":"admin/admin-ui/logs/#log-file-types","title":"Log File Types","text":"<p>The Gluu Flex Admin UI generates two types of log files:</p> <ul> <li>adminui.log: This is the backend log file that captures various activities, errors, and events related to the Gluu Flex Admin UI's operation. It provides insights into the application's behavior and potential issues.</li> <li>adminuiAudit.log: This audit log file records user interactions, actions, and events related to administrative activities. It's particularly useful for tracking changes made to the system and ensuring accountability.</li> </ul>","tags":["administration","admin-ui","installation","logs"]},{"location":"admin/admin-ui/logs/#configuration-of-log-locations","title":"Configuration of Log Locations","text":"<p>The log locations for Gluu Flex Admin UI can be configured by modifying the log4j2-adminui.xml file located at:</p> <pre><code>/opt/jans/jetty/jans-config-api/custom/config/log4j2-adminui.xml\n</code></pre> <p>Within this configuration file, you can adjust various settings such as log levels, appenders, and formats.</p>","tags":["administration","admin-ui","installation","logs"]},{"location":"admin/admin-ui/logs/#default-log-location","title":"Default Log Location","text":"<p>The default log location for the Admin UI backend is:</p> <pre><code>/var/log/adminui\n</code></pre> <p>It is also recommended to check the browser's console log and network tab for any failing requests, as this can provide additional information to diagnose and troubleshoot issues.</p>","tags":["administration","admin-ui","installation","logs"]},{"location":"admin/admin-ui/properties/","title":"Properties","text":""},{"location":"admin/admin-ui/properties/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"admin/admin-ui/saml-menu/","title":"SAML","text":"","tags":["administration","admin-ui","test","SAML","SSO","inbound","keycloak"]},{"location":"admin/admin-ui/saml-menu/#description","title":"Description","text":"<p>Security Assertion Markup Language (SAML) is a widely adopted protocol that enables Single Sign-On (SSO) capabilities between an Identity Provider (IDP) and a Service Provider (SP). Gluu Flex supports SAML-based SSO by integrating with external SPs through the Keycloak (KC) module. Through the Admin UI, administrators can add and manage SAML Service Providers by importing their metadata and configuring which user attributes to release. The Admin UI provides a user-friendly interface to simplify the setup and testing of SAML SSO connections with external service providers like IAMShowcase.</p> <p>For more information, click here to refer to the official docs.</p>","tags":["administration","admin-ui","test","SAML","SSO","inbound","keycloak"]},{"location":"admin/admin-ui/scim-menu/","title":"SCIM Admin Guide","text":"<p>System for Cross-domain Identity Management, in short SCIM, is a specification that simplifies the exchange of user identity information across different domains. The Janssen Server provides an implementation for the SCIM specification.</p> <p>Gluu Flex Admin UI allows administrators to view and manage the configuration of the Janssen SCIM server.</p>","tags":["administration","admin-ui","scim"]},{"location":"admin/admin-ui/scim-menu/#scim-use-cases","title":"SCIM Use Cases","text":"<p>Some common use cases for SCIM in enterprise environments include:</p> <ul> <li>User Provisioning: Automatically creating and updating user accounts from identity sources like HR systems.</li> <li>Group Synchronization: Managing group memberships across services to control access.</li> <li>Self-Service Portals: Enabling users to update their own profile attributes.</li> <li>Single Sign-On (SSO) Integration: Aligning SCIM data with identity federation protocols.</li> </ul> <p>To build a production-grade integration with SCIM, it's critical to understand both the specification (RFC 7642\u20137644) and Janssen's implementation specifics.</p> <p>For more information, click here to refer to the official docs.</p>","tags":["administration","admin-ui","scim"]},{"location":"admin/admin-ui/scripts/","title":"Custom Scripts","text":"<p>Custom Scripts are used to implement custom business logic for authentication, authorization, client registration, cache refresh, scopes, token revocation etc.</p> <p>The Janssen Authentication Server leverages Custom Scripts when implemented can facilitate complex business workflows without changing the server code. Gluu Flex Admin UI provides the interface to add/edit/delete custom scripts.</p> <p></p>","tags":["administration","admin-ui","admin","role","permission","custom scripts","mau"]},{"location":"admin/admin-ui/scripts/#custom-scripts-fields-descriptions","title":"Custom Scripts fields descriptions","text":"<ul> <li>INUM: Unique id identifying the script.</li> <li>Name: Name of the custom script. Only letters, digits and underscores are allowed.</li> <li>Description: Description of the script.</li> <li>Select SAML ACRS: The SAML parameter Authentication Context Requests (ACRS).</li> <li>Script Type: The type of the script (e.g. PERSON_AUTHENTICATION, INTROSPECTION, APPLICATION_SESSION, CLIENT_REGISTRATION etc).</li> <li>Programming Language: Programming language of the custom script (e.g. Java and Jython).</li> <li>Location Type: The location of the script, either database or file.</li> <li>Level: The level describes how secure and reliable the script is.</li> <li>Custom properties (key/value): Custom properties that can be used in the script.</li> <li>Script: Script content.</li> <li>Enable: Field set to enable or disable the script.</li> </ul>","tags":["administration","admin-ui","admin","role","permission","custom scripts","mau"]},{"location":"admin/admin-ui/services-menu/","title":"Services","text":"<p>This menu allows user to configure Cache Provider and LDAP schemas which can be used by the auth server.</p>","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#cache-provider-configuration","title":"Cache Provider Configuration","text":"<p>The following cache providers are supported in Janssen's auth server:</p> <ul> <li>In Memory : recommended for small deployments only</li> <li>Memcached : recommended for single cache server deployment</li> <li>Redis : recommended for cluster deployments</li> <li>Native Persistence : recommended avoiding additional components' installation. All cache entries are saved in persistence layers.</li> </ul>","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#cache-provider-properties","title":"Cache Provider Properties","text":"<p>The following tables include the name and description of each Cache Provider's properties.</p>","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#cache-configuration","title":"Cache Configuration","text":"Name Description Cache Provider Type The cache provider type","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#memcached-configuration","title":"Memcached Configuration","text":"Name Description Server Details Server details separated by spaces (e.g. `server1:8080 server2:8081) Max Operation Queue Length Maximum number of operations that can be queued Buffer Size Buffer size in bytes Default Put Expiration Expiration timeout value in seconds Connection Factory Type Connection factory type","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#in-memory-configuration","title":"In-Memory Configuration","text":"Name Description Default Put Expiration Default put expiration timeout value in seconds","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#redis-configuration","title":"Redis Configuration","text":"Name Description Redis Provider Type Type of connection: standalone, clustered, sharded, sentinel Server Details Server details separated by commas (e.g. 'server1:8080,server2:8081') Use SSL Enable SSL communication between Gluu Server and Redis cache Password Redis password Sentinel Master Group Name Sentinel Master Group Name (required if SENTINEL type of connection is selected) SSL Trust Store File Path Directory Path to Trust Store Default Put Expiration Default expiration time for the object put into cache in seconds Max Retry Attempts Max retry attepts in case of failure So Timeout With this option set to a non-zero timeout, a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires, a java.net.SocketTimeoutException is raised, though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be &gt; 0. A timeout of zero is interpreted as an infinite timeout. Max Idle Connections The cap on the number of \\\"idle\\\" instances in the pool. If maxIdle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them, causing the number of idle objects to rise above maxIdle. The best value for maxIdle for heavily loaded system will vary but the default is a good starting point. Max Total Connections The number of maximum connection instances in the pool Connection Timeout Connection time out","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/services-menu/#native-persistence-configuration","title":"Native Persistence Configuration","text":"Name Description Default Put Expiration Default expiration time for the object put into cache in seconds Default Cleanup Batch Size Default cleanup batch page size Delete Expired OnGetRequest whether to delete on GET request","tags":["administration","admin-ui","services","cache-configuration"]},{"location":"admin/admin-ui/smtp-menu/","title":"SMTP Configuration","text":"<p>The SMTP configuration page allows administrators to set up and manage the settings for sending emails through the configured SMTP server. Below is a detailed explanation of each field in the SMTP configuration form:</p> <p></p>","tags":["administration","admin-ui","smtp"]},{"location":"admin/admin-ui/smtp-menu/#smtp-settings","title":"SMTP Settings","text":"<p>SMTP Host</p> <ul> <li>This is the hostname or IP address of the SMTP server (e.g. smtp.mailserver.com).</li> </ul> <p>SMTP Port</p> <ul> <li>The port number used to connect to the SMTP server.</li> <li>Common values:<ul> <li>25: Default SMTP port (unencrypted).</li> <li>465: SMTP over SSL.</li> <li>587: SMTP with TLS encryption.</li> </ul> </li> </ul> <p>Connect Protection</p> <ul> <li>This option defines the type of protection for the connection. It can be set to:<ul> <li>None: No encryption is used.</li> <li>SslTls: Refined to include both SSL and TLS since they're often mentioned together as the encryption standard.</li> <li>StartTls: Corrected capitalization and clarified that it's used to upgrade an unencrypted connection to an encrypted one.</li> </ul> </li> </ul>","tags":["administration","admin-ui","smtp"]},{"location":"admin/admin-ui/smtp-menu/#sender-information","title":"Sender Information","text":"<p>From Name</p> <ul> <li>The name that will appear in the <code>From</code> field of sent emails.</li> </ul> <p>From Email Address</p> <ul> <li>The email address that will appear in the <code>From</code> field of sent emails.</li> </ul>","tags":["administration","admin-ui","smtp"]},{"location":"admin/admin-ui/smtp-menu/#authentication-and-security","title":"Authentication and Security","text":"<p>Requires Authentication</p> <ul> <li>A toggle button to enable or disable authentication for the SMTP server. If enabled, the SMTP server will require a valid username and password for sending emails.</li> </ul> <p>SMTP User Name</p> <ul> <li>The username used to authenticate with the SMTP server. This is typically your email address or a specific SMTP username provided by your email service.</li> </ul> <p>SMTP User Password</p> <ul> <li>The password associated with the SMTP user for authentication. This password is necessary if the <code>Requires Authentication</code> toggle button is Enabled.</li> </ul> <p>Trust Server</p> <ul> <li>A toggle button to enable or disable the option to trust the SMTP server. If enabled, the server's identity will be verified during the connection to ensure it's safe to communicate with.</li> </ul>","tags":["administration","admin-ui","smtp"]},{"location":"admin/admin-ui/smtp-menu/#keystore-and-encryption","title":"Keystore and Encryption","text":"<p>Keystore</p> <ul> <li>The file path to the keystore containing SSL certificates necessary for encrypted communication. For example, /etc/certs/smtp-keys.pkcs12. The keystore is essential for securely sending emails over SSL/TLS.</li> </ul> <p>Keystore Password</p> <ul> <li>The password used to access the keystore. This is required if the keystore is password-protected.</li> </ul> <p>Keystore Alias</p> <ul> <li>The alias associated with the certificate stored in the keystore. The alias is used to identify the specific certificate for signing or encryption purposes.</li> </ul> <p>Keystore Signing Algorithm</p> <ul> <li>The cryptographic algorithm used for signing the emails. An example of this might be <code>SHA256withECDSA</code>, which refers to a strong algorithm for securely signing messages.</li> </ul>","tags":["administration","admin-ui","smtp"]},{"location":"admin/admin-ui/user-claims/","title":"User Claims","text":"<p>User Claims are individual pieces of user data, like uid, email, First Name etc that are required by applications in order to identify a user. Admin UI allows administrator to manage the user claims.</p> <p></p> <p>The following fields are supported in the Person (attribute) creation form:</p> <ul> <li>Name: This field defines the name of the Person attribute. The name must be unique in the Janssen Server   persistence tree.</li> <li>Display Name: The display name can be anything that is human-readable.</li> <li>Description: The description of the attribute.</li> <li>Status: Used to mark the attribute as Active so that it can be used in your federation service or choose Inactive   to create the attribute that can be activated at a later date.</li> <li>Data Type: Select what type of attribute is being added in this field.</li> <li>Edit Type: This field controls who can edit this attribute. If user is selected, this will enable each user to   edit this attribute in their Janssen server user profile.</li> <li>View Type: This field controls which type of user is allowed to view the corresponding attribute on the web user   interface.</li> <li>oxAuth claim name: If this attribute will be used as a 'claim' in your OpenID Connect service, add the name of   the claim here. Generally, the <code>name of the attribute</code> == <code>name of the claim</code>.</li> <li>Multivalued?: If the attribute contains more than one value, set this field to True.</li> <li>Hide On Discovery?: Boolean value indicating if the attribute should be shown on the discovery page.</li> <li>Include In SCIM Extension?: Boolean value indicating if the attribute is a SCIM custom attribute.</li> <li>Enable custom validation for this attribute?: If you plan to set minimum and maximum lengths or a regex pattern,   as described below, you will need to enable custom validation for this attribute. Otherwise, you can leave this disabled.</li> <li>Regular expression: You can set a regex pattern to enforce the proper formatting of an attribute. For example,   you could set a regex expression for an email attribute like this: ^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$. This would   make sure that a value is added for the attribute only if it follows standard email formatting.</li> <li>Minimum length: This is the minimum length of a value associated with this attribute.</li> <li>Maximum length: This is the maximum length of a value associated with this attribute.</li> <li>Saml1 URI: This field can contain a SAML v1 supported nameformat for the new attribute. If this field is left   blank the Janssen Server will automatically populate a value.</li> <li>Saml2 URI: This field can contain a SAML v2 supported nameformat for the new attribute. If this field is left   blank the Janssen Server will automatically populate a value.</li> </ul>","tags":["user-claims","administration","admin-ui","schema","person","attributes"]},{"location":"admin/admin-ui/user-management-menu/","title":"Users","text":"<p>The User Management module allows administrators to create, edit, delete, and  search user records in Janssen persistence. This module can be accessed via the <code>Users</code> link on the left navigation menu as shown in the image below. </p> <p></p>","tags":["administration","admin-ui","users","user-management"]},{"location":"admin/admin-ui/user-management-menu/#user-list","title":"User List","text":"<ul> <li> <p><code>User</code> section lists all the available users in the Flex Server.</p> <p></p> </li> </ul>","tags":["administration","admin-ui","users","user-management"]},{"location":"admin/admin-ui/user-management-menu/#add-user","title":"Add User","text":"<ul> <li>To add a new user, use the edit action  on the user listing grid</li> <li> <p>The user creation form includes a number of user claims by default but the  administrator can add more user claims to the form using <code>Available Claims</code>  panel on the right side. Different Admin UI Roles can be assigned to the user in the <code>jansAdminUIRole</code> attribute (to be selected from the <code>Available Claims</code> panel).</p> <p></p> </li> </ul>","tags":["administration","admin-ui","users","user-management"]},{"location":"admin/admin-ui/user-management-menu/#edit-user","title":"Edit User","text":"<ul> <li>Modify existing user details, manage assigned claims, and update attributes.     </li> </ul>","tags":["administration","admin-ui","users","user-management"]},{"location":"admin/admin-ui/user-management-menu/#change-password","title":"Change password","text":"<ul> <li> <p>The password can be changed from the Edit User screen. </p> <p></p> </li> </ul>","tags":["administration","admin-ui","users","user-management"]},{"location":"admin/admin-ui/webhooks/","title":"Webhooks","text":"<p>Gluu Flex Admin UI serves as a powerful web interface designed to streamline the management and configuration of the Janssen Authentication Server. To further extend its capabilities, Gluu Flex Admin UI integrates the use of webhooks, enabling the execution of custom business logic during the creation, update, and deletion of information on the Janssen Authentication Server. The seamless integration of webhooks into this interface enhances its functionality, offering a dynamic and extensible solution.</p> <p>Webhooks are a mechanism for automating workflows by allowing external systems to be notified of specific events. In the context of Gluu Flex Admin UI, webhooks can be mapped to various Admin UI features to execute custom business logic when events associated with those features occur. Administrators can map one or more webhooks to specific feature events using the user interface.</p>","tags":["administration","admin-ui","webhooks"]},{"location":"admin/admin-ui/webhooks/#webhook-management-on-the-ui","title":"Webhook management on the UI","text":"<p>The webhook create/update form consists for following fields.</p> Field Description Required Webhook Id The unique identifier of webhook Yes. Generated by Admin UI Webhook Name The name give to webhook Yes URL The webhook url Yes HTTP Method The type HTTP request (e.g. GET, POST, PUT, PATCH, DELETE ) Yes Description Webhook description No Webhook Headers The HTTP request headers No Request Body The HTTP request body Mandatory for POST, PUT, PATCH requests Enabled Toggle switch to enable/disable webhook Yes Admin UI Features The Admin UI features which can be mapped to the webhook No <p></p> <p>Once a webhook is created it can be searched, edited or deleted.   </p> <p></p>","tags":["administration","admin-ui","webhooks"]},{"location":"admin/admin-ui/webhooks/#shortcodes","title":"Shortcodes","text":"<p>When working with webhooks, shortcodes play a crucial role in dynamically injecting data into URLs and request bodies. They allow for flexible and customizable communication between different systems. Shortcode is denoted by curly braces <code>${}</code>.</p> <ul> <li>Using shortcodes in webhook url: Shortcodes can be used in path parameters or query parameters of webhook url.</li> </ul> <pre><code>https://example.com/webhook/${inum}/update\nhttps://example.com/webhook?action=${action}&amp;user_id=${userId}\n</code></pre> <ul> <li>Using shortcodes in webhook request-body: Webhook request bodies can utilize placeholders to dynamically populate data sent to the recipient system.</li> </ul> <pre><code>{\n  \"username\": \"${username}\",\n  \"email\": \"${email}\",\n  \"password\": \"${password}\"\n}\n</code></pre> <p></p>","tags":["administration","admin-ui","webhooks"]},{"location":"admin/admin-ui/webhooks/#triggering-webhooks","title":"Triggering webhooks","text":"<p>The webhooks can be mapped with one or more Admin UI feature(s) using the webhook create/update form. The following Admin UI features can be mapped to the webhooks.</p> Feature Name Action Permission Custom Script Add/Edit https://jans.io/oauth/config/scripts.write Custom Script Delete https://jans.io/oauth/config/scripts.delete FIDO Configuration Edit https://jans.io/oauth/jans-auth-server/config/properties.write Jans Link Edit https://jans.io/oauth/config/jans-link.write OIDC Clients Add/Edit https://jans.io/oauth/config/openid/clients.write OIDC Clients Delete https://jans.io/oauth/config/openid/clients.delete Scopes Add/Edit https://jans.io/oauth/config/scopes.write Scopes Delete https://jans.io/oauth/config/scopes.delete Schema:Person Add/Edit https://jans.io/oauth/config/attributes.write Schema:Person Delete https://jans.io/oauth/config/attributes.delete SCIM Configuration Edit https://jans.io/scim/config.write SMTP Configuration Edit https://jans.io/oauth/config/smtp.write Users Add/Edit https://jans.io/oauth/config/user.write Users Delete https://jans.io/oauth/config/user.delete <p>When the feature action is performed (e.g. submitting the \"create new user\" form), the Admin UI displays the consent dialog with a list of webhooks that will be triggered upon the successful execution of the event. If the user clicks on the Accept button, all the enabled webhooks will be triggered during the event execution. The Admin UI is unable to proceed with event execution if any webhook fails during the process.       </p> <p></p>","tags":["administration","admin-ui","webhooks"]},{"location":"admin/kubernetes-ops/","title":"Operation Guide","text":"<p>This Operation guide helps you learn about the common operations for Gluu Flex on Kubernetes.</p> <p>Note</p> <p>Since Flex = Janssen + Admin-UI. The Kubernetes Operations in Gluu Flex are identitical to Janssen. You will mostly only need to change the helm chart reference from <code>janssen/janssen</code> to <code>gluu-flex/gluu</code>, along with the helm release name and namespace. Here's an example how would the upgrade of Flex looks like.</p>","tags":["administration","kubernetes","operations"]},{"location":"admin/kubernetes-ops/#common-operations","title":"Common Operations","text":"<ul> <li>Upgrade</li> <li>Admin-UI Private</li> <li>Scaling</li> <li>Backup and Restore </li> <li>Certificate Management </li> <li>Customization </li> <li>Start Order </li> <li>Logs</li> <li>External Secrets and Configmaps</li> <li>Health Check</li> <li>TUI K8s</li> <li>Custom Attributes</li> <li>Jans SAML/Keycloak</li> <li>Memory Dump</li> </ul>","tags":["administration","kubernetes","operations"]},{"location":"admin/kubernetes-ops/admin-ui-private/","title":"Admin-UI Private","text":"","tags":["administration","kubernetes","operations","private","internal","admin-ui"]},{"location":"admin/kubernetes-ops/admin-ui-private/#overview","title":"Overview","text":"<p>This document demonstrates a method to override the URLs in the admin-ui used to connect to the backend services, such as the config API.  This way the calls are made privately without hitting the FQDN through the internet.</p>","tags":["administration","kubernetes","operations","private","internal","admin-ui"]},{"location":"admin/kubernetes-ops/admin-ui-private/#configuration","title":"Configuration","text":"<ol> <li> <p>We will install nginx in <code>ingress-nginx</code> namespace using the following command:    <code>helm install ingress-nginx ingress-nginx/ingress-nginx -n ingress-nginx</code>     and thus, the svc is accessible at <code>ingress-nginx-controller.ingress-nginx.svc.cluster.local</code></p> </li> <li> <p>Modify <code>values.yaml</code>:</p> <pre><code>admin-ui:\n  usrEnvs:\n    normal:\n      CN_CONFIG_API_BASE_URL: https://ingress.local:8443\n      CN_AUTH_BASE_URL: https://ingress.local:8443\n      CN_TOKEN_SERVER_BASE_URL: https://ingress-nginx-controller.ingress-nginx.svc.cluster.local\n\nconfig-api:\n  usrEnvs:\n    normal:\n      CN_TOKEN_SERVER_BASE_URL: https://ingress-nginx-controller.ingress-nginx.svc.cluster.local\n\nnginx-ingress:\n  ingress:\n    hosts:\n      - demoexample.gluu.org # adjust Gluu FQDN used as needed\n      - ingress-nginx-controller.ingress-nginx.svc.cluster.local\n      - ingress.local\n</code></pre> </li> <li> <p>Deploy the flex helm chart using the updated <code>values.yaml</code></p> </li> <li> <p>To allow the browser to access internal service, add an entry inside <code>/etc/hosts</code> file:</p> <pre><code>127.0.0.1 ingress.local\n&lt;LB-External-IP&gt; ingress-nginx-controller.ingress-nginx.svc.cluster.local\n</code></pre> </li> <li> <p>By default, the <code>ingress-nginx-controller</code> deployment uses fake certificate generated by k8s. Add a new certificate (self-signed certificate and key are sufficient) as the default certificate into the ingress controller.</p> <ol> <li> <p>Generate SSL cert and key using your preferred tool. Make sure to add domain <code>ingress-nginx-controller.ingress-nginx.svc.cluster.local</code> and <code>ingress.local</code> in SAN section.</p> <p>Example:</p> <pre><code>openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes -keyout ingress.local.key -out ingress.local.crt -subj \"/CN=ingress.local\" -addext \"subjectAltName=DNS:ingress.local,DNS:ingress-nginx-controller.ingress-nginx.svc.cluster.local\"\n</code></pre> </li> <li> <p>Create secrets to store the certificate and key, for example:</p> <pre><code>kubectl -n &lt;namespace&gt; create secret tls internal-tls-certificate --cert /path/to/cert --key /path/to/key\n</code></pre> </li> <li> <p>Modify the <code>ingress-nginx-controller</code> deployment:</p> <pre><code>apiVersion: apps/v1                                       \nkind: Deployment                         \nmetadata:\n  name: ingress-nginx-controller\n  namespace: ingress-nginx\nspec:\n  template:\n    spec:\n      containers:\n        - args:\n          # some arguments are omitted\n          # add a new argument to load self-signed cert\n          - --default-ssl-certificate=&lt;namespace&gt;/internal-tls-certificate\n</code></pre> </li> <li> <p>Rollout restart the <code>ingress-nginx-controller</code> deployment.</p> </li> </ol> </li> <li> <p>Expose the service IP (port 443) to host (port 8443):</p> <pre><code>kubectl -n ingress-nginx port-forward svc/ingress-nginx-controller 8443:443 &amp;\n</code></pre> </li> <li> <p>OPTIONAL: if the K8s cluster is deployed at a remote VM, make SSH tunneling before accessing the admin-ui web:</p> <pre><code>ssh -N -L 8443:localhost:8443 &lt;user&gt;@&lt;remote-vm&gt; &amp;\n</code></pre> </li> <li> <p>Hit <code>https://ingress.local:8443</code> and allow the browser to skip certificate validation.</p> </li> <li> <p>Visit <code>https://&lt;Gluu-FQDN&gt;/admin</code></p> </li> </ol>","tags":["administration","kubernetes","operations","private","internal","admin-ui"]},{"location":"admin/kubernetes-ops/upgrade/","title":"Upgrade","text":"<p>This guide shows how to upgrade a Gluu Flex helm deployment.</p> <ol> <li> <p><code>helm ls -n &lt;namepsace&gt;</code></p> </li> <li> <p>Keep note of the helm release version</p> </li> <li> <p>Add your changes to <code>override.yaml</code></p> </li> <li> <p>Apply your upgrade:</p> <p><code>helm upgrade &lt;flex-release-name&gt; gluu-flex/gluu -n &lt;namespace&gt; -f override.yaml --version=replace-flex-version</code></p> </li> </ol>","tags":["administration","kubernetes","operations","helm","upgrade"]},{"location":"admin/recipes/","title":"Overview","text":"<p>Please use the left navigation menu to browse the content of this section while we are still working on developing content for <code>Overview</code> page.</p>","tags":["administration","recipes"]},{"location":"admin/recipes/add-claims-to-token/","title":"How to include user claims in id_token","text":"<ol> <li>Login to the Admin UI of the auth server (https://{auth-server-hostname}/admin).</li> <li>Using the left menu, go to <code>Auth Server ---&gt; Auth server properties</code>.</li> <li>Add <code>jansInclClaimsInIdTkn</code> to the <code>Dynamic Registration Custom Attributes</code> filed.</li> </ol>","tags":["administration","token","claims"]},{"location":"admin/recipes/add-claims-to-token/#including-the-claims-to-the-token","title":"Including the claims to the token","text":"<p>To include the claims to token</p> <ul> <li>Go to <code>Schema ---&gt; person</code></li> <li>Change the <code>Status</code> of the attribute to <code>Active</code>.</li> <li>Note <code>oxAuth claim name</code>. This is the claim-name used inside token.      </li> <li> <p>Now go to <code>Users</code> menu and open the user and add the claim and its value.       </p> </li> <li> <p>To include the claims in the token we will include them in the profile scope.</p> <ol> <li>Enable <code>profile</code> as the <code>Default Scope</code></li> <li>Include the claims in the claim field.       </li> </ol> </li> <li>On registering OIDC client using tarp add the <code>profile</code> scope and <code>openid</code>.</li> <li>Use the client to generate the token. </li> </ul>","tags":["administration","token","claims"]},{"location":"admin/recipes/getting-started-rancher/","title":"Getting Started with Rancher","text":""},{"location":"admin/recipes/getting-started-rancher/#overview","title":"Overview","text":"<p>Gluu Flex (\u201cFlex\u201d) is a cloud-native digital identity platform that enables organizations to authenticate and authorize people and software through the use of open standards like OpenID Connect, OAuth, and FIDO.</p> <p>It is a downstream commercial distribution of the Linux Foundation Janssen Project software, plus a web administration tool(Gluu Admin-UI).</p> <p>SUSE Rancher\u2019s helm-based deployment approach simplifies the deployment and configuration of Flex, enabling organizations to take advantage of Flex\u2019s modular design to improve their security posture while simultaneously enabling just-in-time auto-scaling.</p> <p>The key services of Flex include:</p> <ul> <li> <p>(REQUIRED) Jans Auth Server: This component is the OAuth Authorization Server, the OpenID Connect Provider, and the UMA Authorization Server for person and software authentication. This service must be Internet-facing.</p> </li> <li> <p>(REQUIRED) Jans Config API: The API to configure the auth-server and other components is consolidated in this component. This service should not be Internet-facing.</p> </li> <li> <p>Gluu Admin UI: Web admin tool for ad-hoc configuration.</p> </li> <li> <p>Jans Fido: This component provides the server-side endpoints to enroll and validate devices that use FIDO. It provides both FIDO U2F (register, authenticate) and FIDO 2 (attestation, assertion) endpoints. This service must be Internet-facing.</p> </li> <li> <p>Jans SCIM: System for Cross-domain Identity Management (SCIM) is JSON/REST API to manage user data. Use it to add, edit and update user information. This service should not be Internet-facing.</p> </li> <li> <p>Jans Casa: A self-service web portal for end-users to manage authentication and authorization preferences for their account in the Gluu Flex server. Typically, it enables people to manage their MFA credentials, like FIDO tokens and OTP authenticators. It's also extensible if your organization has any other self-service requirements.</p> </li> </ul>"},{"location":"admin/recipes/getting-started-rancher/#building-blocks","title":"Building Blocks","text":""},{"location":"admin/recipes/getting-started-rancher/#scope","title":"Scope","text":"<p>In this Quickstart Guide, we will: </p> <ol> <li>Deploy Flex and add some users.</li> <li>Enable two-factor authentication.</li> <li>Protect content on an Apache web server with OpenID Connect.</li> </ol>"},{"location":"admin/recipes/getting-started-rancher/#audience","title":"Audience","text":"<p>This document is intended for DevOps engineers, site reliability engineers (SREs), platform engineers, software engineers, and developers who are responsible for managing and running stateful workloads in Kubernetes clusters. </p>"},{"location":"admin/recipes/getting-started-rancher/#technical-overview","title":"Technical overview","text":"<p>In addition to the core services listed in the Introduction above, the SUSE Rancher deployment includes the following components:</p> <ul> <li><code>PostgreSQL/MySQL</code>: SQL database dialect used to store configuration, people clients, sessions and other data needed for <code>Gluu Flex</code> operation.</li> <li><code>Cert Manager</code>: Used for managing X.509 certificates and crypto keys lifecycle in Janssen Server.</li> <li><code>Key Rotation</code>: A cronjob that implements <code>Cert Manager</code> to rotate the auth keys</li> <li><code>Configuration job</code>: loads (generate/restore) and dumps (backup) the configuration and secrets.</li> <li><code>Persistence job</code>: This job loads initial data for the backend used (SQL or Couchbase).</li> <li><code>ConfigMaps</code>: Stores configuration needed for Flex environment setup.</li> <li><code>Secrets</code>: Contains sensitive or confidential data such as a password, a token, or a key.</li> </ul>"},{"location":"admin/recipes/getting-started-rancher/#config-and-secret-keys","title":"Config and Secret keys","text":"<p>The <code>Configuration job</code> creates a set of configurations and secrets used by all services in the Flex setup.</p> <p>To check the values of the configuration keys(configmaps) in the installation:</p> <pre><code>kubectl get cm cn -o json -n &lt;namespace&gt;\n</code></pre> <p>To check the values of the secret keys in installation:</p> <pre><code>kubectl get secret cn -o json -n &lt;namespace&gt;\n</code></pre>"},{"location":"admin/recipes/getting-started-rancher/#gluu-config-keys","title":"Gluu Config Keys","text":"Key Example Values <code>admin_email</code> <code>team@gluu.org</code> <code>admin_inum</code> <code>d3afef58-c026-4514-9d4c-e0a3efb4c29d</code> <code>admin_ui_client_id</code> <code>1901.a6575c1e-4688-4c11-8c95-d9e570b13ee8</code> <code>auth_enc_keys</code> <code>RSA1_5 RSA-OAEP</code> <code>auth_key_rotated_at</code> <code>1653517558</code> <code>auth_legacyIdTokenClaims</code> <code>false</code> <code>auth_openidScopeBackwardCompatibility</code> <code>false</code> <code>auth_openid_jks_fn</code> <code>/etc/certs/auth-keys.jks</code> <code>auth_openid_jwks_fn</code> <code>/etc/certs/auth-keys.json</code> <code>casa_client_id</code> <code>0008-db36db1f-025e-4164-aeed-f82df064eee8</code> <code>auth_sig_keys</code> <code>RS256 RS384 RS512 ES256 ES384 ES512 PS384 PS512</code> <code>city</code> <code>Austin</code> <code>country_code</code> <code>US</code> <code>default_openid_jks_dn_name</code> <code>CN=Janssen Auth CA Certificate</code> <code>fido2ConfigFolder</code> <code>/etc/jans/conf/fido2</code> <code>hostname</code> <code>demoexample.gluu.org</code> <code>jca_client_id</code> <code>1801.4df6c3ba-ebf6-4836-8fb5-6da927586f61</code> <code>optional_scopes</code> <code>[\\\"casa\\\", \\\"sql\\\", \\\"fido2\\\", \\\"scim\\\"]</code> <code>orgName</code> <code>Gluu</code> <code>tui_client_id</code> <code>2000.9313cd4b-147c-4a67-96be-8a69ddbaf7e9</code> <code>scim_client_id</code> <code>1201.1cbcc731-3fca-4668-a480-1b5f5a7d6a53</code> <code>state</code> <code>TX</code> <code>token_server_admin_ui_client_id</code> <code>1901.57a858dc-69f3-4967-befe-e089fe376638</code>"},{"location":"admin/recipes/getting-started-rancher/#gluu-secret-keys","title":"Gluu Secret Keys","text":"Key Example Values <code>admin_ui_client_encoded_pw</code> <code>QlBMMTZUZWVYeWczVlpNUk1XN0pzdzrg</code> <code>admin_ui_client_pw</code> <code>WnJYZEcyVlNBWG9d</code> <code>auth_jks_base64</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>auth_openid_jks_pass</code> <code>TWZoR3Rlb0NnUHEP</code> <code>auth_openid_key_base64</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>casa_client_encoded_pw</code> <code>b3NabG9oVGNncFVVWFpxNEJMU3V0dzrg</code> <code>casa_client_pw</code> <code>M1g0Z1dEbGNPQ19d</code> <code>encoded_admin_password</code> <code>e3NzaGF9eGpOaDRyblU3dzJZbmpPclovMUlheTdkR0RrOTdLe</code> <code>encoded_salt</code> <code>Um9NSEJnOU9IbTRvRkJHVVZETVZIeXEP</code> <code>jca_client_encoded_pw</code> <code>Um9NSEJnOU9IbTRvRkJHVVZETVZIeX58</code> <code>jca_client_pw</code> <code>Um9NSEJnOU9IbTRvR</code> <code>otp_configuration</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>pairwiseCalculationKey</code> <code>ZHd2VW01Y3VOUW6638ZHd2VW</code> <code>pairwiseCalculationSalt</code> <code>ZHd2VW01Y3VOUW6638ZHd2VW0</code> <code>plugins_admin_ui_properties</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>tui_client_encoded_pw</code> <code>ZHd2VW01Y3VOUW66388PS512</code> <code>tui_client_pw</code> <code>AusZHd2VW01Y3VOUW6638</code> <code>scim_client_encoded_pw</code> <code>UZHd2VW01Y3VOUW6638ZHd2VW01Y3VOUW6638</code> <code>scim_client_pw</code> <code>ZHd2VW01Y3VOUW6638</code> <code>sql_password</code> <code>ZHd2VW01Y3V638</code> <code>ssl_ca_cert</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ssl_ca_key</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ssl_cert</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ssl_csr</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ssl_key</code> <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>token_server_admin_ui_client_encoded_pw</code> <code>Q1Z1cmtYWUlYSVg4U2tLTldVcnZVTUF</code> <code>token_server_admin_ui_client_pw</code> <code>ZHd2VW01Y3VOUW6638</code>"},{"location":"admin/recipes/getting-started-rancher/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>SUSE Rancher installed with an accessible UI</p> </li> <li> <p>Kubernetes cluster running on SUSE Rancher with at least 1 worker node</p> </li> <li> <p>Sufficient RBAC permissions to deploy and manage applications in the cluster.</p> </li> <li> <p>LinuxIO kernel modules on the worker nodes</p> </li> <li> <p>Docker running locally (Linux preferred)</p> </li> <li> <p>Essential tools and CLI utilities are installed on your local workstation and are available in your <code>$PATH</code>: <code>curl</code>, <code>kubectl</code></p> </li> <li> <p>An entry in the <code>/etc/hosts</code> file of your local workstation to resolve the hostname of the Gluu Flex installation. This step is for testing purposes. </p> </li> </ul>"},{"location":"admin/recipes/getting-started-rancher/#installation","title":"Installation","text":"<p>Summary of steps:</p> <ol> <li> <p>Install Database:</p> <p>Note</p> <p>For the <code>Database test setup</code> to work, a PV provisioner support must be present in the underlying infrastructure.</p> </li> <li> <p>Install Nginx-Ingress, if you are not using Istio ingress</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://charts.helm.sh/stable\nhelm repo update\nhelm install nginx ingress-nginx/ingress-nginx\n</code></pre> <p>To get the Loadbalancer IP:  <pre><code>kubectl get svc nginx-ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre></p> </li> <li> <p>Install Gluu Flex:</p> <ul> <li>Head to <code>Apps</code> --&gt; <code>Charts</code> and search for <code>Gluu</code></li> <li>Click on <code>Install</code> on the right side of the window. </li> <li>Change the namespace from <code>default</code> to <code>gluu</code>, then click on <code>Next</code>.</li> <li>Scroll through the sections to get familiar with the options. For minimal setup follow with the next instructions.</li> <li>Add <code>License SSA</code>. Before initiating the setup, please obtain an\u00a0SSA\u00a0for Flex trial, after which you will issued a JWT.</li> <li>Click on the <code>Persistence</code> section. Change <code>SQL database host uri</code> to <code>postgresql.postgres.svc.cluster.local</code> in the case of <code>PostgreSQL</code> or <code>my-release-mysql.gluu.svc.cluster.local</code> in the case of <code>MySQL</code>. Also set <code>SQL database username</code>,<code>SQL password</code>, and <code>SQL database name</code> to the values you used during the database installation.</li> <li>To enable Casa and the Admin UI, navigate to the <code>Optional Services</code> section and check the <code>Enable casa</code> and <code>boolean flag to enable admin UI</code> boxes. You can also enable different services like <code>Client API</code> and <code>Jackrabbit</code>.</li> <li>Click on the  section named <code>Ingress</code> and enable all the endpoints. You might add LB IP or address if you don't have <code>FQDN</code> for <code>Gluu</code>. </li> <li>To pass your <code>FQDN</code> or <code>Domain</code> that is intended to serve the Gluu Flex IDP, head to the <code>Configuration</code> section:<ol> <li>Add your <code>FQDN</code> and check the box <code>Is the FQDN globally resolvable</code>.</li> <li>Click on the <code>Edit YAML</code> tab and add your <code>FQDN</code> to <code>nginx-ingress.ingress.hosts</code> and <code>nginx-ingress.ingress.tls.hosts</code>. </li> </ol> </li> <li>Click on <code>Install</code> on the bottom right of the window.</li> </ul> <p>Note</p> <p>You can upgrade your installation after the deployment. To do that, go to the SUSE Rancher Dashboard -&gt; Apps -&gt; Installed Apps -&gt; gluu -&gt; Click on the 3 dots on the right -&gt; Upgrade -&gt; Make your changes -&gt; Click Update.</p> </li> </ol> <p>The running deployment and services of different Gluu Flex components like <code>casa</code>, <code>admin-ui</code>, <code>scim</code>, <code>auth-server</code>, etc can be viewed by navigating through the SUSE Rancher. Go to <code>Workloads</code> and see the running pods. Go under <code>Service Discovery</code> and checkout the <code>Ingresses</code> and <code>Services</code>. All deployed components should be in a healthy and running state like in the screenshot shown below.</p> <p></p>"},{"location":"admin/recipes/getting-started-rancher/#install-postgresql-database","title":"Install PostgreSQL database","text":"<p>Note</p> <p>If you are willing to use MySQL installation, skip this section and head to the Install MySQL section.</p> <p>To install a quick setup with <code>PostgreSQL</code> as the backend, you need to provide the connection parameters of a fresh setup.  For a test setup, you can follow the below instructions:</p> <ul> <li><code>Apps</code> --&gt; <code>Charts</code> and search for <code>Postgres</code>.</li> <li>Click on <code>Install</code> on the right side of the window.</li> <li>Create a new namespace called <code>postgres</code> and hit <code>Next</code>.</li> <li>You should be on the <code>Edit YAML</code> page. Modify the below keys as desired. These values will be inputted in the installation of <code>Gluu Flex</code></li> </ul> Key <code>auth.database</code> <code>auth.username</code> <code>auth.password</code> <ul> <li>Click <code>Install</code> at the bottom right of the page.</li> </ul>"},{"location":"admin/recipes/getting-started-rancher/#install-mysql-database","title":"Install MySQL database","text":"<p>Note</p> <p>Skip this section if you installed PostgreSQL. This section is only needed if you are willing to use MySQL.</p> <p>To install a quick setup with <code>MySQL</code> as the backend, you need to provide the connection parameters of a fresh setup.  For a test setup, you can follow the below instructions:</p> <ul> <li>Open a kubectl shell from the top right navigation menu <code>&gt;_</code>. </li> <li>Run:     <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nkubectl create ns gluu #Create gluu namespace\n</code></pre></li> <li> <p>Pass in a custom password for the database. Here we used <code>Test1234#</code>. The admin user will be left as <code>root</code>. Notice we are installing in the <code>gluu</code> namespace. Run </p> <pre><code>helm install my-release --set auth.rootPassword=Test1234#,auth.database=jans bitnami/mysql -n gluu\n</code></pre> </li> </ul>"},{"location":"admin/recipes/getting-started-rancher/#successful-installation","title":"Successful Installation","text":"<p>After the installation is successful, you should have a <code>Statefulset</code> active in the rancher UI as shown in the screenshot below.</p> <p></p>"},{"location":"admin/recipes/getting-started-rancher/#connecting-to-the-setup","title":"Connecting to the Setup","text":"<p>Note</p> <p>You can skip this section if you have a globally resolvable <code>FQDN</code>.</p> <p>In the event you used microk8s or your fqdn is not registered, the below steps will help with connecting to your setup.</p> <ol> <li> <p>To access the setup from a browser or another VM, we need to change the ingress class annotation from <code>kubernetes.io/ingress.class: nginx</code> to <code>kubernetes.io/ingress.class: public</code> e.g., for the specific component you want to access publicly in the browser;</p> <ul> <li>Navigate through the SUSE Rancher UI to <code>Service Discovery</code> -&gt; <code>Ingresses</code></li> <li>Choose the <code>ingress</code> for the targeted component. For example <code>gluu-nginx-ingress-auth-server</code> for <code>auth-server</code> </li> <li>Click on the three dots in the top right corner </li> <li>Click on <code>Edit Yaml</code></li> <li>On line 8, change the <code>kubernetes.io/ingress.class</code> annotation value from <code>nginx</code> to <code>public</code></li> <li>Click <code>Save</code></li> </ul> <p></p> </li> <li> <p>The <code>LoadBalancer IP</code> needs to get mapped inside <code>/etc/hosts</code> with the domain chosen for <code>gluu flex</code>. If the domain you used in the setup is demoexample.gluu.org:</p> <pre><code>3.65.27.95 demoexample.gluu.org\n</code></pre> </li> <li> <p>You can do the same edit for every component you want to access publicly from the browser.</p> </li> </ol>"},{"location":"admin/recipes/getting-started-rancher/#testing-configuration-endpoints","title":"Testing Configuration endpoints","text":"<ol> <li> <p>Try accessing some Gluu Flex endpoints like <code>https://demoexample.gluu.org/.well-known/openid-configuration</code> in the browser and you'll get back a JSON response;</p> <p></p> </li> <li> <p>Note that you can also access those endpoints via curl command, E.g.</p> <pre><code>curl -k https://demoexample.gluu.org/.well-known/openid-configuration\n</code></pre> <p>You should get a similar response like the one below;</p> <p><code>{\"version\":\"1.1\",\"issuer\":\"https://demoexample.gluu.org\",\"attestation\":{\"base_path\":\"https://demoexample.gluu.org/jans-fido2/restv1/attestation\",\"options_enpoint\":\"https://demoexample.gluu.org/jans-fido2/restv1/attestation/options\",\"result_enpoint\":\"https://demoexample.gluu.org/jans-fido2/restv1/attestation/result\"},\"assertion\":{\"base_path\":\"https://demoexample.gluu.org/jans-fido2/restv1/assertion\",\"options_enpoint\":\"https://demoexample.gluu.org/jans-fido2/restv1/assertion/options\",\"result_enpoint\":\"https://demoexample.gluu.org/jans-fido2/restv1/assertion/result\"}}</code></p> </li> </ol>"},{"location":"admin/recipes/getting-started-rancher/#login-and-add-a-new-user","title":"Login and Add a New User","text":"<p>After inputting the license keys, you can then use <code>admin</code> and the password you set to login to the Admin UI and you should see the Admin UI dashboard.</p> <p>You could also add another test user via the admin UI that will be used for testing Casa and 2FA as shown in the screenshot below.</p> <p>Navigate to <code>Users</code> and click on <code>+</code> in the top right corner to add a user.</p> <p></p>"},{"location":"admin/recipes/getting-started-rancher/#testing-casa","title":"Testing Casa","text":"<p>Jans Casa (\"Casa\") is a self-service web portal for managing account security preferences. The primary use case for Casa is self-service 2FA, but other use cases and functionalities can be supported via Casa plugins.</p> <p>Although you have not enabled two-factor authentication yet, you should still be able to login to Casa as the admin user and the password is the one you set during installation. </p> <p>Point your browser to <code>https://demoexample.gluu.org/jans-casa</code> and you should be welcomed by the Casa login page as shown below.</p> <p></p> <p>After logging in, you'll be welcomed by the home page as shown below.</p> <p></p>"},{"location":"admin/recipes/getting-started-rancher/#enabling-two-factor-authentication","title":"Enabling Two-Factor Authentication","text":"<p>In this part, we are going to enable two standard authentication mechanisms: OTP and FIDO. </p> <p>This can be done through the admin UI. 2FA can be turned on by clicking the switch in the Second Factor Authentication widget. By default, you will be able to choose from a few 2FA policies:</p> <ul> <li>Always (upon every login attempt)</li> <li>If the location (e.g. city) detected in the login attempt is unrecognized</li> <li>If the device used to login is unrecognized</li> </ul> <p>To reduce the chance of account lockout, enroll at least two different types of 2FA credentials -- e.g. one security key and one OTP app; or one OTP app and one SMS phone number, etc. This way, regardless of which device you're using to access a protected resource, you will have a usable option for passing strong authentication.</p> <p>To enable 2FA, firstly the OTP and FIDO components have to be enabled in the Casa admin UI then login to Casa as an end user, and register an OTP device (i.e. Google Authenticator) and a FIDO device.</p> <p><code>Register OTP device</code></p> <ul> <li>To add a new OTP token, navigate to 2FA credentials &gt; OTP Tokens.</li> <li>You can either add a soft OTP token by choosing the <code>Soft token</code> option or a hard token by choosing the <code>Hard Token</code> Option</li> <li>Check the soft OTP token and click ready</li> <li>Before proceeding to the next step, Download Google Authenticator from Google Play or Appstore</li> <li>Then proceed and scan the QR code with your app</li> </ul> <p></p> <ul> <li>Enter the 6-digit code that appears in your authenticator app and validate the enrollment.</li> </ul> <p><code>Register Fido device</code></p> <ul> <li>To add a new FIDO 2 credential, navigate to <code>2FA credentials</code> &gt; <code>Security Keys and built-in Platform Authenticators</code> Insert the fido key and click Ready. Casa will prompt you to press the button on the key.</li> </ul> <p></p> <ul> <li>Add a nickname and click Add. Once added, the new device will appear in a list on the same page. Click the pencil to edit the device's nickname</li> </ul>"},{"location":"admin/recipes/getting-started-rancher/#testing-apache-oidc-locally","title":"Testing Apache OIDC Locally","text":"<p>In this part, we are going to use docker to locally configure an apache web server, and then install the mod_auth_openidc module and configure it accordingly.</p> <p>Using local docker containers, our approach is to first register a client, then spin up two Apache containers, one serving static content (with server-side includes configured so we can display headers and environment information), and one acting as the OpenID Connect authenticating reverse proxy.</p>"},{"location":"admin/recipes/getting-started-rancher/#register-an-openid-connect-client","title":"Register an OpenID Connect client","text":"<p>On the Janssen server, you can register a new client in the Flex Admin UI or the jans-cli. In this section, we are going to show both ways of doing it from the Admin UI and using jans-cli</p>"},{"location":"admin/recipes/getting-started-rancher/#admin-ui","title":"<code>Admin UI</code>","text":"<p>Navigate to <code>Auth server</code> -&gt; <code>Clients</code> and click on <code>+</code> in the top right corner to create a client.</p> <p>Take note of the following keys:values because they configure the right client that we need</p> <pre><code>scopes: email_,openid_,profile\nresponseTypes: code\n</code></pre> <p>The screenshot below shows an example of the Admin UI section from where a client is created</p> <p></p>"},{"location":"admin/recipes/getting-started-rancher/#jans-tui","title":"<code>Jans TUI</code>","text":"<p>On the Janssen server, we are going to register a new client using the jans-cli. There are two ways you can register an OIDC client with the Janssen server, Manual Client Registration and Dynamic Client Registration (DCR).</p> <p>Here we will use manual client registration. We will use jans-tui tool provided by the Janssen server. jans-tui has a menu-driven interface that makes it easy to configure the Janssen server. Here we will use the menu-driven approach to register a new client.</p> <ol> <li> <p>Download jans-cli-tui from the release assets depending on your OS. For example: </p> <p><code>wget https://github.com/JanssenProject/jans/releases/download/vreplace-janssen-version/jans-cli-tui-linux-ubuntu-X86-64.pyz</code></p> <p>Now we have <code>jans-cli-tui-linux-ubuntu-X86-64.pyz</code> downloaded.</p> </li> <li> <p>Now we can grab the FQDN, client-id, client-secret, and connect using the following commands:     <pre><code>FQDN= #Add your FQDN here\nTUI_CLIENT_ID=$(kubectl get cm cn -n &lt;namespace&gt; --template={{.data.tui_client_id}})\nTUI_CLIENT_SECRET=$(kubectl get secret cn -n &lt;namespace&gt; --template={{.data.tui_client_pw}} | base64 -d)\n#add -noverify if your FQDN is not registered\n</code></pre></p> </li> <li> <p>Get schema file using this command</p> <p><code>python3 jans-cli-tui-linux-ubuntu-X86-64.pyz --host &lt;FQDN&gt; --client-id &lt;TUI_CLIENT_ID&gt; --client-secret &lt;TUI_CLIENT_SECRET&gt; --no-tui --schema /components/schemas/Client</code></p> </li> <li> <p>Add values for required params and store this JSON in a text file. Take keynote of the following properties.</p> <p><code>schema-json-file.json</code></p> <pre><code>{\n    \"dn\": null,\n    \"inum\": null,\n    \"displayName\": \"&lt;name-of-choice&gt;\",\n    \"clientSecret\": \"&lt;secret-of-your-choice&gt;\",\n    \"frontChannelLogoutUri\": null,\n    \"frontChannelLogoutSessionRequired\": null,\n    \"registrationAccessToken\": null,\n    \"clientIdIssuedAt\": null,\n    \"clientSecretExpiresAt\": null,\n    \"redirectUris\": [\n        \"&lt;your-uri-here&gt;\"\n    ],\n    \"claimRedirectUris\": null,\n    \"responseTypes\": [\n        \"code\"\n    ],\n    \"grantTypes\": [\n        \"authorization_code\"\n    ],\n    \"applicationType\": \"web\",\n    \"contacts\": null,\n    \"idTokenTokenBindingCnf\": null,\n    \"logoUri\": null,\n    \"clientUri\": null,\n    \"policyUri\": null,\n    \"tosUri\": null,\n    \"jwksUri\": null,\n    \"jwks\": null,\n    \"sectorIdentifierUri\": null,\n    \"subjectType\": \"public\",\n    \"idTokenSignedResponseAlg\": null,\n    \"idTokenEncryptedResponseAlg\": null,\n    \"idTokenEncryptedResponseEnc\": null,\n    \"userInfoSignedResponseAlg\": null,\n    \"userInfoEncryptedResponseAlg\": null,\n    \"userInfoEncryptedResponseEnc\": null,\n    \"requestObjectSigningAlg\": null,\n    \"requestObjectEncryptionAlg\": null,\n    \"requestObjectEncryptionEnc\": null,\n    \"tokenEndpointAuthMethod\": \"client_secret_basic\",\n    \"tokenEndpointAuthSigningAlg\": null,\n    \"defaultMaxAge\": null,\n    \"requireAuthTime\": null,\n    \"defaultAcrValues\": null,\n    \"initiateLoginUri\": null,\n    \"postLogoutRedirectUris\": null,\n    \"requestUris\": null,\n    \"scopes\": [\n        \"email\",\n        \"openid\",\n        \"profile\"\n    ],\n    \"claims\": null,\n    \"trustedClient\": false,\n    \"lastAccessTime\": null,\n    \"lastLogonTime\": null,\n    \"persistClientAuthorizations\": null,\n    \"includeClaimsInIdToken\": false,\n    \"refreshTokenLifetime\": null,\n    \"accessTokenLifetime\": null,\n    \"customAttributes\": null,\n    \"customObjectClasses\": null,\n    \"rptAsJwt\": null,\n    \"accessTokenAsJwt\": null,\n    \"accessTokenSigningAlg\": null,\n    \"disabled\": false,\n    \"authorizedOrigins\": null,\n    \"softwareId\": null,\n    \"softwareVersion\": null,\n    \"softwareStatement\": null,\n    \"attributes\": null,\n    \"backchannelTokenDeliveryMode\": null,\n    \"backchannelClientNotificationEndpoint\": null,\n    \"backchannelAuthenticationRequestSigningAlg\": null,\n    \"backchannelUserCodeParameter\": null,\n    \"expirationDate\": null,\n    \"deletable\": false,\n    \"jansId\": null,\n    \"description\": null\n}\n</code></pre> </li> <li> <p>Now you can use that JSON file as input to the command below and register your client</p> <p><code>python3 jans-cli-tui-linux-ubuntu-X86-64.pyz --host &lt;FQDN&gt; --client-id &lt;TUI_CLIENT_ID&gt; --client-secret &lt;TUI_CLIENT_SECRET&gt; --no-tui --operation-id=post-oauth-openid-client --data &lt;path&gt;/schema-json-file.json</code></p> </li> <li> <p>After the client is successfully registered, there will be data that describes the newly registered client. Some of these values, like <code>inum</code> and <code>clientSecret</code>, will be required before we configure <code>mod_auth_openidc</code> So keep in mind that we shall get back to this.</p> </li> </ol>"},{"location":"admin/recipes/getting-started-rancher/#create-an-application-container","title":"Create an Application Container","text":"<p>An application docker container will be run locally which will act as the protected resource (PR) / external application. The following files have code for the small application. We shall create a directory locally / on your machine called <code>test</code> and add the required files.</p> <ol> <li> <p>Firstly create a project folder named <code>test</code> by running <code>mkdir test &amp;&amp; cd test</code> and add the following files with their content; </p> <p><code>app.conf</code></p> <pre><code>ServerRoot \"/usr/local/apache2\"\nListen 80\n\nLoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule authz_core_module modules/mod_authz_core.so\nLoadModule include_module modules/mod_include.so\nLoadModule filter_module modules/mod_filter.so\nLoadModule mime_module modules/mod_mime.so\nLoadModule log_config_module modules/mod_log_config.so\nLoadModule setenvif_module modules/mod_setenvif.so\nLoadModule unixd_module modules/mod_unixd.so\nLoadModule dir_module modules/mod_dir.so\n\nUser daemon\nGroup daemon\n\n&lt;Directory /&gt;\nAllowOverride none\nRequire all denied\n&lt;/Directory&gt;\n\nDocumentRoot \"/usr/local/apache2/htdocs\"\n&lt;Directory \"/usr/local/apache2/htdocs\"&gt;\nOptions Indexes FollowSymLinks Includes\nAllowOverride None\nRequire all granted\n\nSetEnvIf X-Remote-User \"(.*)\" REMOTE_USER=$0\nSetEnvIf X-Remote-User-Name \"(.*)\" REMOTE_USER_NAME=$0\nSetEnvIf X-Remote-User-Email \"(.*)\" REMOTE_USER_EMAIL=$0\n&lt;/Directory&gt;\n\nDirectoryIndex index.html\n&lt;Files \".ht*\"&gt;\n    Require all denied\n&lt;/Files&gt;\n\nErrorLog /proc/self/fd/2\nLogLevel warn\nLogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\nLogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %b\" common\nCustomLog /proc/self/fd/1 common\n\nTypesConfig conf/mime.types\nAddType application/x-compress .Z\nAddType application/x-gzip .gz .tgz\nAddType text/html .shtml\nAddOutputFilter INCLUDES .shtml\n</code></pre> <p><code>user.shtml</code></p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hello User&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Hello &lt;!--#echo var=REMOTE_USER_NAME --&gt;!&lt;/p&gt;\n&lt;p&gt;You authenticated as: &lt;!--#echo var=REMOTE_USER --&gt;&lt;/p&gt;\n&lt;p&gt;Your email address is: &lt;!--#echo var=REMOTE_USER_EMAIL --&gt;&lt;/p&gt;\n&lt;p&gt;Environment:&lt;/&gt;\n&lt;p&gt;&lt;!--#printenv --&gt;!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>index.html</code></p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hello World&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Hello world!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>Dockerfile</code></p> <pre><code>FROM httpd:2.4.54@sha256:c9eba4494b9d856843b49eb897f9a583a0873b1c14c86d5ab77e5bdedd6ad05d\n# \"Created\": \"2022-06-08T18:45:46.260791323Z\" , \"Version\":\"2.4.54\"\n\nRUN apt-get update \\\n&amp;&amp; apt-get install -y --no-install-recommends wget ca-certificates libcjose0 libhiredis0.14 apache2-api-20120211 apache2-bin\\\n&amp;&amp; wget https://github.com/zmartzone/mod_auth_openidc/releases/download/v2.4.11.2/libapache2-mod-auth-openidc_2.4.11.2-1.buster+1_amd64.deb \\\n&amp;&amp; dpkg -i libapache2-mod-auth-openidc_2.4.11.2-1.buster+1_amd64.deb \\\n&amp;&amp; ln -s /usr/lib/apache2/modules/mod_auth_openidc.so /usr/local/apache2/modules/mod_auth_openidc.so \\\n&amp;&amp; rm -rf /var/log/dpkg.log /var/log/alternatives.log /var/log/apt \\\n&amp;&amp; touch /usr/local/apache2/conf/extra/secret.conf \\\n&amp;&amp; touch /usr/local/apache2/conf/extra/oidc.conf\n\nRUN echo \"\\n\\nLoadModule auth_openidc_module modules/mod_auth_openidc.so\\n\\nInclude conf/extra/secret.conf\\nInclude conf/extra/oidc.conf\\n\" &gt;&gt; /usr/local/apache2/conf/httpd.conf\n</code></pre> <p><code>gluu.secret.conf</code></p> <pre><code>OIDCClientID &lt;inum-as-received-in-client-registration-response&gt;\nOIDCCryptoPassphrase &lt;crypto-passphrase-of-choice&gt;\nOIDCClientSecret &lt;as-provided-in-client-registration-request&gt;\nOIDCResponseType code\nOIDCScope \"openid email profile\"\nOIDCProviderTokenEndpointAuth client_secret_basic\nOIDCSSLValidateServer Off\nOIDCRedirectURI http://localhost:8111/oauth2callback\nOIDCCryptoPassphrase &lt;crypto-passphrase-of-choice&gt;\n&lt;Location \"/\"&gt;\n    Require valid-user\n    AuthType openid-connect\n&lt;/Location&gt;\n</code></pre> </li> <li> <p>After, run an Apache container which will play the role of an application being protected by the authenticating reverse proxy.</p> <pre><code>docker run -dit -p 8110:80 \\\n       -v \"$PWD/app.conf\":/usr/local/apache2/conf/httpd.conf \\\n       -v \"$PWD/index.html\":/usr/local/apache2/htdocs/index.html \\\n       -v \"$PWD/user.shtml\":/usr/local/apache2/htdocs/user.shtml \\\n       --name apache-app httpd:2.4\n</code></pre> <p>Note that we are using a popular pre-built image useful for acting as a reverse proxy for authentication in front of an application. It contains a stripped-down Apache with minimal modules, and adds the <code>mod_auth_openidc</code> module for performing OpenID Connect authentication.</p> </li> <li> <p>Make a test curl command call to ensure you get back some content as shown in the screenshot below</p> <pre><code>curl http://localhost:8110/user.shtml\n</code></pre> <p></p> </li> </ol>"},{"location":"admin/recipes/getting-started-rancher/#create-an-authenticating-reverse-proxy-container","title":"Create an Authenticating Reverse Proxy Container","text":"<p>We shall use Apache, but this time we use a Docker image that has <code>mod_auth_oidc</code> installed and configured. This proxy will require authentication, handle the authentication flow with redirects, and then forward requests to the application.</p> <p>In order to use this, you will need to have registered a new OpenID Connect client on the Janssen server. We did that in the step 1 above</p> <ol> <li> <p>Add the following files to the <code>test</code> folder.</p> <p><code>oidc.conf</code></p> <pre><code># Unset to make sure clients can't control these\nRequestHeader unset X-Remote-User\nRequestHeader unset X-Remote-User-Name\nRequestHeader unset X-Remote-User-Email\n\n# If you want to see tons of logs for your experimentation\n#LogLevel trace8\n\nOIDCClientID &lt;inum-as-received-in-client-registration-response&gt;\nOIDCProviderMetadataURL https://idp-proxy.med.stanford.edu/auth/realms/med-all/.well-known/openid-configuration\n#OIDCProviderMetadataURL https://idp-proxy-stage.med.stanford.edu/auth/realms/choir/.well-known/openid-configuration\nOIDCRedirectURI http://localhost:8111/oauth2callback\n\nOIDCScope \"openid email profile\"\nOIDCRemoteUserClaim principal\nOIDCPassClaimsAs environment\n\n&lt;Location /&gt;\nAuthType openid-connect\nRequire valid-user\n\nProxyPass http://app:80/\nProxyPassReverse http://app:80/\n\nRequestHeader set X-Remote-User %{OIDC_CLAIM_principal}e\nRequestHeader set X-Remote-User-Name %{OIDC_CLAIM_name}e\nRequestHeader set X-Remote-User-Email %{OIDC_CLAIM_email}e\n&lt;/Location&gt;\n</code></pre> <p><code>proxy.conf</code></p> <pre><code># This is the main Apache HTTP server configuration file. For documentation, see:\n#   http://httpd.apache.org/docs/2.4/\n#   http://httpd.apache.org/docs/2.4/mod/directives.html\n#\n# This is intended to be a hardened configuration, with minimal security surface area necessary\n# to run mod_auth_openidc.\n\nServerRoot \"/usr/local/apache2\"\nListen 80\n\nLoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule authn_file_module modules/mod_authn_file.so\nLoadModule authn_core_module modules/mod_authn_core.so\nLoadModule authz_host_module modules/mod_authz_host.so\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\nLoadModule authz_user_module modules/mod_authz_user.so\nLoadModule authz_core_module modules/mod_authz_core.so\nLoadModule access_compat_module modules/mod_access_compat.so\nLoadModule auth_basic_module modules/mod_auth_basic.so\nLoadModule reqtimeout_module modules/mod_reqtimeout.so\nLoadModule filter_module modules/mod_filter.so\nLoadModule mime_module modules/mod_mime.so\nLoadModule log_config_module modules/mod_log_config.so\nLoadModule env_module modules/mod_env.so\nLoadModule headers_module modules/mod_headers.so\nLoadModule setenvif_module modules/mod_setenvif.so\n#LoadModule version_module modules/mod_version.so\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule unixd_module modules/mod_unixd.so\n#LoadModule status_module modules/mod_status.so\n#LoadModule autoindex_module modules/mod_autoindex.so\nLoadModule dir_module modules/mod_dir.so\nLoadModule alias_module modules/mod_alias.so\n\n&lt;IfModule unixd_module&gt;\n    User daemon\n    Group daemon\n&lt;/IfModule&gt;\n\nServerAdmin you@example.com\n\n&lt;Directory /&gt;\n    AllowOverride none\n    Require all denied\n&lt;/Directory&gt;\n\nDocumentRoot \"/usr/local/apache2/htdocs\"\n&lt;Directory \"/usr/local/apache2/htdocs\"&gt;\n    Options Indexes FollowSymLinks\n    AllowOverride None\n    Require all granted\n&lt;/Directory&gt;\n&lt;IfModule dir_module&gt;\n    DirectoryIndex index.html\n&lt;/IfModule&gt;\n&lt;Directory /opt/apache/htdocs&gt;\n    Options None\n    Require all denied\n&lt;/Directory&gt;\n&lt;Files \".ht*\"&gt;\n    Require all denied\n&lt;/Files&gt;\nErrorLog /proc/self/fd/2\nLogLevel warn\n&lt;IfModule log_config_module&gt;\n    LogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n    LogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %b\" common\n    &lt;IfModule logio_module&gt;\n    LogFormat \"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\n    &lt;/IfModule&gt;\n    CustomLog /proc/self/fd/1 common\n&lt;/IfModule&gt;\n&lt;IfModule alias_module&gt;\n    ScriptAlias /cgi-bin/ \"/usr/local/apache2/cgi-bin/\"\n&lt;/IfModule&gt;\n&lt;Directory \"/usr/local/apache2/cgi-bin\"&gt;\n    AllowOverride None\n    Options None\n    Require all granted\n&lt;/Directory&gt;\n\n&lt;IfModule headers_module&gt;\n    RequestHeader unset Proxy early\n&lt;/IfModule&gt;\n\n&lt;IfModule mime_module&gt;\n    TypesConfig conf/mime.types\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz\n&lt;/IfModule&gt;\n&lt;IfModule proxy_html_module&gt;\nInclude conf/extra/proxy-html.conf\n&lt;/IfModule&gt;\n&lt;IfModule ssl_module&gt;\nSSLRandomSeed startup builtin\nSSLRandomSeed connect builtin\n&lt;/IfModule&gt;\nTraceEnable off\nServerTokens Prod\nServerSignature Off\nLoadModule auth_openidc_module modules/mod_auth_openidc.so\nInclude conf/extra/secret.conf\nInclude conf/extra/oidc.conf\n</code></pre> </li> <li> <p>Edit the file to include the client secret for the client you created during DCR, and add a securely generated pass phrase for the session keys</p> <pre><code>docker build --pull -t apache-oidc -f Dockerfile .\n\ndocker run -dit -p 8111:80 \\\n       -v \"$PWD/proxy.conf\":/usr/local/apache2/conf/httpd.conf \\\n       -v \"$PWD/gluu.secret.conf\":/usr/local/apache2/conf/extra/secret.conf \\\n       -v \"$PWD/oidc.conf\":/usr/local/apache2/conf/extra/oidc.conf \\\n       --link apache-app:app \\\n       --name apache-proxy apache-oidc\n</code></pre> </li> <li> <p>Now open a fresh web browser with private (incognito) mode, and go to this url</p> <pre><code>http://localhost:8111/user.shtml\n</code></pre> </li> <li> <p>To check the proxy logs</p> <pre><code>docker logs -f apache-proxy\n</code></pre> </li> <li> <p>To see the app logs</p> <pre><code>docker logs -f apache-app\n</code></pre> </li> <li> <p>If you modified the configuration files, just restart the proxy.</p> <pre><code>docker restart apache-proxy\n</code></pre> </li> </ol>"},{"location":"admin/recipes/testing-flex-saml-sso-sptest/","title":"Test SAML SSO with Flex","text":"<p>This guide shows how to test Flex for SAML SSO. We will be using  sptest test service provider  to complete our test.</p>","tags":["administration","test","SAML","SSO"]},{"location":"admin/recipes/testing-flex-saml-sso-sptest/#installing-saml-idp-in-the-flex-server","title":"Installing SAML IDP in the Flex Server","text":"<p>During installation the Flex Server, make sure you have  selected the Jans KC  module to be installed.</p> <p></p>","tags":["administration","test","SAML","SSO"]},{"location":"admin/recipes/testing-flex-saml-sso-sptest/#configure-idp-in-flex-server","title":"Configure IDP in Flex Server","text":"<p>Follow the steps below to create a  TR and apply them in Flex Server:</p> <ul> <li>Download the SP metadata using the following command: Command<pre><code>wget https://sptest.iamshowcase.com/testsp_metadata.xml\n</code></pre></li> <li>Open the Flex Admin UI and navigate to <code>SAML &gt; Configuration</code>.</li> <li> <p>Select <code>Keycloak</code> as the IDP. </p> </li> <li> <p>Then navigate to <code>Website SSO</code> &gt; <code>Add Service Provider</code> </p> </li> <li> <p>Release the required attributes (e.g., <code>username</code>, <code>inum</code>). </p> </li> <li> <p>Finally, click Apply.</p> </li> </ul>","tags":["administration","test","SAML","SSO"]},{"location":"admin/recipes/testing-flex-saml-sso-sptest/#configure-sp-in-iamshowcase","title":"Configure SP in Iamshowcase","text":"<p>After configuring the IDP in Flex Server, it's time to connect the service  provider (SP) with the IDP:</p> <ul> <li>Download the IDP metadata from the following URL: <pre><code>https://&lt;your-janssen-server&gt;/kc/realms/jans/protocol/saml/descriptor\n</code></pre></li> <li>Go to: <code>https://sptest.iamshowcase.com/instructions#spinit</code>  and upload the IDP metadata.</li> <li>After the metadata is uploaded, it will provide you with an  SP link to test the SAML SSO flow. </li> </ul>","tags":["administration","test","SAML","SSO"]},{"location":"admin/recipes/testing-flex-saml-sso-sptest/#test-sso","title":"Test SSO","text":"<ul> <li> <p>Copy that link and open it in a browser. You can open it in  incognito mode to avoid session issue.</p> </li> <li> <p>This will redirect you to the Janssen login page. Once you log in with  your user credentials, you will be redirected back to the SP\u2019s protected page,  which will display the user session details.</p> </li> </ul> <p>Refer to the Janssen Server SAML SSO documentation for further details.</p>","tags":["administration","test","SAML","SSO"]},{"location":"admin/recipes/testing-flex-saml-sso-sptest/#faq","title":"FAQ","text":"<p>Check KC scheduler log for any TR issue  <pre><code>/opt/kc-scheduler/logs/scheduler.log\n</code></pre> Also check file directory inside  <pre><code>/opt/idp/configs/keycloak/sp/metadata\n</code></pre></p>","tags":["administration","test","SAML","SSO"]},{"location":"admin/saml/","title":"Index","text":""},{"location":"admin/saml/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"admin/saml/idp/","title":"Idp","text":""},{"location":"admin/saml/idp/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"admin/saml/proxy/","title":"Proxy","text":""},{"location":"admin/saml/proxy/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"includes/cn-system-requirements/","title":"Cn system requirements","text":"<p>The resources may be set minimally to the below:</p> <ul> <li>8-13 GB RAM based on the services deployed</li> <li>8-11 CPU cores based on the services deployed</li> <li>50GB hard-disk</li> </ul> <p>Use the listing below for a detailed estimation of the minimum required resources. The table contains the default resources recommendation per service. Depending on the use of each service the resources need may be increase or decrease.</p> Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes fido2 0.5 0.5GB N/A 64 Bit No scim 1 1GB N/A 64 Bit No config - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs persistence - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs nginx 1 1GB N/A 64 Bit Yes if ALB/Istio not used auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 1 1GB N/A 64 Bit No casa 0.5 0.5GB N/A 64 Bit No admin-ui 2 2GB N/A 64 Bit No link 0.5 1GB N/A 64 Bit No saml 0.5 1GB N/A 64 Bit No kc-scheduler - job 0.3 0.3GB N/A 64 Bit No <p>Releases of images are in style 1.0.0-beta.0, 1.0.0-0</p>"},{"location":"install/","title":"Installation Overview","text":"<p>The goal of Gluu Flex is to give you a lot of deployment options. This is a challenge--the more ways to install, the more ways for things to go wrong! But to build a large community, we need to provide ways to install the software in enough different ways to make at least the bulk of the community happy.</p> <p>Currently, that means the following installation options:</p> <ol> <li>VM packages for Ubuntu, SUSE and Red Hat</li> <li>Helm deployments for Amazon, Google, Microsoft and Rancher</li> <li>Docker monolith deployment for development / testing (not production)</li> </ol>","tags":["administration","installation"]},{"location":"install/#minimal-configuration","title":"Minimal Configuration","text":"<p>It turns out that just installing the Flex binary object code (i.e. the bits), is totally useless. That's because in order to do anything useful with Gluu Flex, you need a minimal amount of configuration. For example, you need to generate cryptographic key pairs, you need to generate a minimal amount of data in the database, you need to generate some web server TLS certificates.  For this reason, for most of the platforms, installation is a three step process. Step 1, install the bits. Step 2, run \"setup\" and answer some basic question (like the hostname of your IDP). Step 3, fire up a configuration tool to perform any other last mile configuration.</p>","tags":["administration","installation"]},{"location":"install/#databases","title":"Databases","text":"<p>Gluu Flex gives you a few options to store data: MySQL, Postgres, Couchbase, Amazon Aurora, and Spanner. You can also configure an in-memory cache server like Redis. Sometimes installation and configuration of this database is included in the setup process. Sometimes, you need to setup the database ahead of time. Please refer to the database instructions specific for your choice. And of course, you may need to refer to the database documentation itself--we don't want to duplicate any of that third party content.</p>","tags":["administration","installation"]},{"location":"install/#optimization","title":"Optimization","text":"<p>Remember, installation is just a starting point. To get peak performance, you may need to tweak some of the configuration dials for your system or the database. If you intend to deploy a Gluu Flex in production for high concurrency, make sure you benchmark the exact flows you expect to serve in production. </p>","tags":["administration","installation"]},{"location":"install/agama/prerequisites/","title":"Prerequisites","text":"","tags":["administration","installation"]},{"location":"install/agama/prerequisites/#agama-lab","title":"Agama Lab","text":"<p>Agama Lab is a platform to manage your Gluu license. This is where you may subscribe to Gluu Flex or obtain credentials for your enterprise license.</p> <ul> <li>To begin, please visit Agama Lab</li> <li>You may register via email or login via GitHub<ul> <li>If you want to author or test Agama or Cedarling projects, you will need to login via GitHub</li> </ul> </li> <li>Once you have logged in, please navigate to <code>Market</code> &gt; <code>Flex</code></li> </ul>","tags":["administration","installation"]},{"location":"install/agama/prerequisites/#software-statement-assertions","title":"Software Statement Assertions","text":"<p>In order to install Flex, you will need a Software Statement Assertion (SSA). An SSA is a signed JSON Web Token (JWT) that is required by the Flex install script to validate your license.</p>","tags":["administration","installation"]},{"location":"install/agama/prerequisites/#obtaining-an-ssa","title":"Obtaining an SSA","text":"<p>Gluu issues SSAs through the Agama Lab web interface. You can obtain an SSA for use with Flex by following these steps:</p> <ul> <li>Login to Agama Lab</li> <li>On the left navigation bar, select <code>Market</code></li> <li>Navigate to the tab named <code>Flex</code>. </li> <li> <p>Click on <code>Create New SSA</code></p> <ul> <li>On <code>Software Name</code>, fill in a unique identifier for this SSA</li> <li><code>Description</code> is optional</li> <li>Under <code>Software Roles</code>, tick <code>license</code></li> <li>Under <code>Expiration Date</code>, select an appropriate date. Your SSA will not be useable after that date.</li> <li>Under <code>SSA Lifetime</code>, choose an appropriate lifetime for the Flex client. One month or longer is recommended.</li> <li>Deselect <code>One time use</code> and <code>Rotate SSA</code></li> <li>Click <code>Create</code></li> </ul> <p> - Click on <code>Detail</code> of the newly issued SSA, then click on <code>Show JWT</code> </p> </li> <li> <p>You will be shown a long string of characters. Copy this and save it to a file.</p> </li> <li>You may now use this file during Flex installation.</li> </ul>","tags":["administration","installation"]},{"location":"install/agama/prerequisites/#license","title":"License","text":"<p>Gluu Flex uses the SSA obtained in the above step to either request a 30 day trial license or verify presence of a license tied to your Agama Lab account. One account may request one trial license in its lifetime. To purchase a full license, please navigate to the <code>Flex</code> tab of the marketplace where you may purchase licenses for up to 1600 MAU (monthly active users). To purchase an enterprise license for more MAU, please contact Sales.</p> <p>If you have subscribed to Flex via Agama Lab, the SSA obtained in the step before will automatically link your license to your installation. For enterprise licenses, please open a support ticket so that we can issue a license against your account. Once this is done, you may use the SSA obtained to proceed to installation.</p>","tags":["administration","installation"]},{"location":"install/docker-install/compose/","title":"Docker compose","text":"<p>Warning</p> <p>This image is for testing and development purposes only. Use Flex helm charts for production setups.</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#docker-compose","title":"Docker Compose","text":"<p>Docker monolith image packaging for Gluu Flex. This image packs janssen services including the auth-server, config-api, fido2, casa, scim and the Gluu admin ui.</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Docker</li> <li>Docker compose</li> </ul>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#versions","title":"Versions","text":"<p>See Releases for stable versions. This image should never be used in production. For bleeding-edge/unstable version, use <code>gluufederation/monolith:0.0.0-nightly</code>.</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#environment-variables","title":"Environment Variables","text":"<p>Installation depends on the set of environment variables shown below. These environment variables can be set to customize installation as per the need. If not set, the installer uses default values.</p> ENV Description Default <code>CN_HOSTNAME</code> Hostname to install gluu with. <code>demoexample.gluu.org</code> <code>CN_ADMIN_PASS</code> Password of the admin user. <code>1t5Fin3#security</code> <code>CN_ORG_NAME</code> Organization name. Used for ssl cert generation. <code>Gluu</code> <code>CN_EMAIL</code> Email. Used for ssl cert generation. <code>team@gluu.org</code> <code>CN_CITY</code> City. Used for ssl cert generation. <code>Austin</code> <code>CN_STATE</code> State. Used for ssl cert generation <code>TX</code> <code>CN_COUNTRY</code> Country. Used for ssl cert generation. <code>US</code> <code>CN_INSTALL_MYSQL</code> Install gluu with mysql as the backend <code>false</code> <code>CN_INSTALL_PGSQL</code> Install gluu with Postgres as the backend <code>false</code> <code>CN_INSTALL_ADMIN_UI</code> Installs the Admin-UI <code>true</code> <code>CN_INSTALL_CONFIG_API</code> Installs the Config API service. <code>true</code> <code>CN_INSTALL_SCIM</code> Installs the SCIM  API service. <code>true</code> <code>CN_INSTALL_FIDO2</code> Installs the FIDO2 API service. <code>true</code> <code>RDBMS_DATABASE</code> RDBMS gluu database for MySQL or Postgres. <code>gluu</code> <code>RDBMS_USER</code> RDBMS database user for MySQL or Postgres. <code>gluu</code> <code>RDBMS_PASSWORD</code> RDBMS database user password for MySQL or Postgres. <code>1t5Fin3#security</code> <code>RDBMS_HOST</code> RDBMS host for MySQL or Postgres. <code>mysql</code> which is the docker compose service name <code>TEST_CLIENT_ID</code> ID of test client in UUID which has all available scopes to access any gluu API <code>9876baac-de39-4c23-8a78-674b59df8c09</code> <code>TEST_CLIENT_SECRET</code> Secret for test client <code>1t5Fin3#security</code> <code>TEST_CLIENT_TRUSTED</code> Trust test client <code>true</code> <code>TEST_CLIENT_REDIRECT_URI</code> Not Implemented yet Redirect URI for test client. Multiple uri's with comma may be provided, if not provided redirect uris will be same as the config-api-client ``","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#how-to-run","title":"How to run","text":"<p>Download the compose file of your chosen persistence from mysql or postgres</p> <pre><code>wget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/flex-mysql-compose.yml \nwget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/flex-postgres-compose.yml \n</code></pre> <p>Download the script files </p> <pre><code>wget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/up.sh\nwget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/down.sh\nwget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/clean.sh\n</code></pre> <p>Give execute permission to the scripts <code>chmod u+x up.sh down.sh clean.sh</code></p> <p>This docker compose file runs two containers, the flex monolith container and mysql container.</p> <p>To start the containers.</p> <pre><code>./up.sh #You can pass mysql|postgres as an argument to the script. If you don't pass any, it will default to mysql.\n</code></pre> <p>To view the containers running</p> <pre><code>docker compose -f flex-mysql-compose.yml ps\n</code></pre> <p>To stop the containers.</p> <pre><code>./down.sh #You can pass mysql|postgres as an argument to the script. If you don't pass any, it will default to mysql.\n</code></pre>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#configure-gluu-flex","title":"Configure Gluu flex","text":"<ol> <li> <p>Access the Docker container shell using:</p> <pre><code>docker compose -f flex-mysql-compose.yml exec flex /bin/bash #This opens a bash terminal in the running container\n</code></pre> </li> <li> <p>You can grab <code>client_id</code> and <code>client_pw</code>(secret), and other values from <code>setup.properties</code> or <code>/opt/jans/jans-setup/setup.properties.last</code></p> </li> <li> <p>Use the CLI tools located under <code>/opt/jans/jans-cli/</code> to configure Gluu flex as needed. For example you can run the TUI:     <pre><code>python3 /opt/jans/jans-cli/config-cli-tui.py\n</code></pre></p> </li> </ol>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#access-endpoints-externally","title":"Access endpoints externally","text":"<p>Add to your <code>/etc/hosts</code> file the ip domain record which should be the ip of the instance docker is installed at and the domain used in the env above <code>CN_HOSTNAME</code>.</p> <pre><code># For-example\n172.22.0.3      demoexample.gluu.org\n</code></pre> <p>After adding the record you can hit endpoints such as https://demoexample.gluu.org/.well-known/openid-configuration</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/compose/#clean-up","title":"Clean up","text":"<p>Remove setup and volumes</p> <pre><code>./clean.sh #You can pass mysql|postgres as an argument to the script. If you don't pass any, it will default to mysql.\n</code></pre>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"install/docker-install/quick-start/","title":"Quick Start","text":"<p>Warning</p> <p>This image is for testing and development purposes only. Use Flex helm charts for production setups.</p>","tags":["administration","installation","quick-start","docker"]},{"location":"install/docker-install/quick-start/#overview","title":"Overview","text":"<p>The quickest way to get Gluu flex up and running is to have a Docker container-based deployment.</p>","tags":["administration","installation","quick-start","docker"]},{"location":"install/docker-install/quick-start/#system-requirements","title":"System Requirements","text":"<p>System should meet minimum VM system requirements</p>","tags":["administration","installation","quick-start","docker"]},{"location":"install/docker-install/quick-start/#install","title":"Install","text":"<p>Installation depends on a set of environment variables. These environment variables can be set to customize installation as per the need. If not set, the installer uses default values.</p> <p>Run this command to start the installation:</p> <pre><code>wget https://raw.githubusercontent.com/GluuFederation/flex/vreplace-flex-version/automation/startflexmonolithdemo.sh &amp;&amp; chmod u+x startflexmonolithdemo.sh &amp;&amp; sudo bash startflexmonolithdemo.sh demoexample.gluu.org MYSQL\n</code></pre> <p>Console messages like below confirms the successful installation:</p> <pre><code>[+] Running 3/3\n \u283f Network docker-flex-monolith_cloud_bridge  Created                      0.0s    \n \u283f Container docker-flex-monolith-mysql-1     Started                      0.6s\n \u283f Container docker-flex-monolith-flex-1      Started                      0.9s\n\nWaiting for auth-server to come up. Depending on the resources it may take 3-5 mins for the services to be up.\nTesting openid-configuration endpoint.. \n</code></pre> <p>As can be seen, the install script also accesses the well-known endpoints to verify that Gluu Flex is responsive.</p>","tags":["administration","installation","quick-start","docker"]},{"location":"install/docker-install/quick-start/#verify-installation-by-accessing-standard-endpoints","title":"Verify Installation By Accessing Standard Endpoints","text":"<p>To access Gluu flex standard endpoints from outside of the Docker container, systems <code>/etc/hosts</code> file needs to be updated. Open the file and add the IP domain record which should be the IP of the instance docker is installed. And the domain used in the env above <code>CN_HOSTNAME</code>.</p> <pre><code># For-example\n172.22.0.3      demoexample.gluu.org\n</code></pre> <p>After adding the record, hit the standard endpoints such as </p> <pre><code>https://demoexample.gluu.org/.well-known/openid-configuration\n</code></pre>","tags":["administration","installation","quick-start","docker"]},{"location":"install/docker-install/quick-start/#configure-gluu-flex","title":"Configure Gluu flex","text":"<ol> <li> <p>Access the Docker container shell using:</p> <pre><code>docker exec -ti docker-flex-monolith-flex-1 bash\n</code></pre> </li> <li> <p>Grab a pair of client_id and client_pw(secret) from <code>setup.properties</code> or <code>/opt/jans/jans-setup/setup.properties.last</code></p> </li> <li> <p>Use the CLI tools located under <code>/opt/jans/jans-cli/</code> to configure Gluu flex as needed. For example you can run the TUI:     <pre><code>python3 /opt/jans/jans-cli/config-cli-tui.py\n</code></pre></p> </li> </ol>","tags":["administration","installation","quick-start","docker"]},{"location":"install/docker-install/quick-start/#uninstallremove-gluu-flex","title":"Uninstall/Remove Gluu flex","text":"<p>This docker based installation uses <code>docker compose</code> under the hood to create containers. Hence uninstalling Gluu flex involves invoking <code>docker compose</code> with appropriate yml file. Run command below to stop and remove containers.</p> <pre><code>docker compose -f /tmp/flex/docker-flex-monolith/flex-mysql-compose.yml down &amp;&amp; rm -rf flex-*\n</code></pre> <p>Console messages like below confirms the successful removal:</p> <pre><code>[+] Running 3/3\n \u283f Container docker-flex-monolith-flex-1      Removed                   10.5s\n \u283f Container docker-flex-monolith-mysql-1     Removed                    0.9s\n \u283f Network docker-flex-monolith_cloud_bridge  Removed                    0.1s\n</code></pre>","tags":["administration","installation","quick-start","docker"]},{"location":"install/helm-install/","title":"Helm Deployment","text":"<p>Gluu Flex enables organizations to build a scalable centralized authentication and authorization service using free open source software.</p> <p>The components of the project include client and server implementations of the OAuth, OpenID Connect, SCIM and FIDO standards.</p> <p>All these components are deployed using Gluu helm chart.</p> <p>You can check the reference guide to view the list of the chart components and values.</p>","tags":["administration","installation","helm"]},{"location":"install/helm-install/#looking-for-older-helm-charts","title":"Looking for older helm charts?","text":"<p>If you are looking for older helm charts, you need to build them from the Gluu Flex repository. We only keep the last 5 versions of the chart up. We support auto-upgrade using helm upgrade and hence want everyone to stay up to date with our charts. </p> <p>To build older charts manually from the Gluu Flex repository, you can use the following example which assumes we are building for janssen version <code>v5.0.0</code>:</p> <pre><code>git clone --filter blob:none --no-checkout https://github.com/GluuFederation/flex.git /tmp/flex \\\n    &amp;&amp; cd /tmp/flex \\\n    &amp;&amp; git sparse-checkout init --cone \\\n    &amp;&amp; git checkout v5.0.0 \\\n    &amp;&amp; git sparse-checkout add charts/gluu \\\n    &amp;&amp; cd charts/gluu \\\n    &amp;&amp; helm dependency update \\\n    &amp;&amp; helm package .\n</code></pre>","tags":["administration","installation","helm"]},{"location":"install/helm-install/amazon-eks/","title":"Install Gluu Flex on EKS","text":"","tags":["administration","installation","helm","EKS","Amazon Web Services","AWS"]},{"location":"install/helm-install/amazon-eks/#system-requirements","title":"System Requirements","text":"<p>The resources may be set minimally to the below:</p> <ul> <li>8-13 GB RAM based on the services deployed</li> <li>8-11 CPU cores based on the services deployed</li> <li>50GB hard-disk</li> </ul> <p>Use the listing below for a detailed estimation of the minimum required resources. The table contains the default resources recommendation per service. Depending on the use of each service the resources need may be increase or decrease.</p> Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes fido2 0.5 0.5GB N/A 64 Bit No scim 1 1GB N/A 64 Bit No config - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs persistence - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs nginx 1 1GB N/A 64 Bit Yes if ALB/Istio not used auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 1 1GB N/A 64 Bit No casa 0.5 0.5GB N/A 64 Bit No admin-ui 2 2GB N/A 64 Bit No link 0.5 1GB N/A 64 Bit No saml 0.5 1GB N/A 64 Bit No kc-scheduler - job 0.3 0.3GB N/A 64 Bit No <p>Releases of images are in style 1.0.0-beta.0, 1.0.0-0</p>","tags":["administration","installation","helm","EKS","Amazon Web Services","AWS"]},{"location":"install/helm-install/amazon-eks/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Before initiating the setup, please obtain an\u00a0SSA\u00a0for Flex trial, after which you will issued a JWT.</p> </li> <li> <p>Install aws cli</p> </li> <li> <p>Configure your AWS user account using aws configure command. This makes you able to authenticate before creating the cluster.     Note that this user account must have permissions to work with Amazon EKS IAM roles and service linked roles, AWS CloudFormation, and a VPC and related resources</p> </li> <li> <p>Install kubectl</p> </li> <li> <p>Install eksctl </p> </li> <li> <p>Create cluster using eksctl such as the following example:</p> <p><pre><code>eksctl create cluster --name gluu-cluster --nodegroup-name gluu-nodes --node-type NODE_TYPE --nodes 2  --managed --region REGION_CODE\n</code></pre> You can adjust <code>node-type</code> and <code>nodes</code> number as per your desired cluster size</p> </li> <li> <p>To be able to attach volumes to your pod, you need to install the Amazon EBS CSI driver</p> </li> <li> <p>Install Helm3</p> </li> <li> <p>Create <code>gluu</code> namespace where our resources will reside     <pre><code>kubectl create namespace gluu\n</code></pre></p> </li> </ol>","tags":["administration","installation","helm","EKS","Amazon Web Services","AWS"]},{"location":"install/helm-install/amazon-eks/#gluu-flex-installation-using-helm","title":"Gluu Flex Installation using Helm","text":"<ol> <li> <p>Install Nginx-Ingress, if you are not using Istio ingress</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://charts.helm.sh/stable\nhelm repo update\nhelm install nginx ingress-nginx/ingress-nginx\n</code></pre> </li> <li> <p>Create a file named <code>override.yaml</code> and add changes as per your desired configuration:</p> <ul> <li> <p>FQDN/domain is not registered:</p> <p>Get the Loadbalancer address:  <pre><code>kubectl get svc nginx-ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].hostname}'\n</code></pre></p> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n    isFqdnRegistered: false\nconfig:\n    configmap:\n        lbAddr: http:// #Add LB address from previous command\n</code></pre> </li> <li> <p>FQDN/domain is registered:</p> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n    isFqdnRegistered: true\n    fqdn: demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\nconfig:\n    configmap:\n        lbAddr: http:// #Add LB address from previous command\nnginx:\n  ingress:\n      enabled: true\n      path: /\n      hosts:\n      - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n      tls:\n      - secretName: tls-certificate\n        hosts:\n        - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n</code></pre> </li> <li> <p>PostgreSQL for persistence storage</p> <p>In a production environment, a production grade PostgreSQL server should be used such as <code>Amazon RDS</code></p> <p>For testing purposes, you can deploy it on the EKS cluster using the following command:</p> <pre><code>helm install my-release --set auth.postgresPassword=Test1234#,auth.database=gluu -n gluu oci://registry-1.docker.io/bitnamicharts/postgresql\n</code></pre> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n  cnPersistenceType: sql\nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 5432\n    cnSqlDbDialect: pgsql\n    cnSqlDbHost: my-release-postgresql.gluu.svc\n    cnSqlDbUser: postgres\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> </li> <li> <p>MySQL for persistence storage</p> <p>In a production environment, a production grade MySQL server should be used such as <code>Amazon RDS</code></p> <p>For testing purposes, you can deploy it on the EKS cluster using the following command:</p> <pre><code>helm install my-release --set auth.rootPassword=Test1234#,auth.database=gluu -n gluu oci://registry-1.docker.io/bitnamicharts/mysql\n</code></pre> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n  cnPersistenceType: sql\nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 3306\n    cnSqlDbDialect: mysql\n    cnSqlDbHost: my-release-mysql.gluu.svc\n    cnSqlDbUser: root\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> <p>So if your desired configuration has FQDN and MySQL, the final <code>override.yaml</code> file will look something like that:</p> <pre><code>global:\n  cnPersistenceType: sql\n  isFqdnRegistered: true\n  fqdn: demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\nnginx-ingress:\n  ingress:\n      path: /\n      hosts:\n      - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n      tls:\n      - secretName: tls-certificate\n        hosts:\n        - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu  \nconfig:\n  configmap:\n    lbAddr: http:// #Add LB address from previous command\n    cnSqlDbName: gluu\n    cnSqlDbPort: 3306\n    cnSqlDbDialect: mysql\n    cnSqlDbHost: my-release-mysql.gluu.svc\n    cnSqlDbUser: root\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> </li> </ul> </li> <li> <p>Install Gluu Flex</p> <p>After finishing all the tweaks to the <code>override.yaml</code> file, we can use it to install gluu flex.</p> <pre><code>helm repo add gluu-flex https://docs.gluu.org/charts\nhelm repo update\nhelm install gluu gluu-flex/gluu -n gluu -f override.yaml\n</code></pre> </li> </ol>","tags":["administration","installation","helm","EKS","Amazon Web Services","AWS"]},{"location":"install/helm-install/amazon-eks/#configure-gluu-flex","title":"Configure Gluu Flex","text":"<p>You can use the Janssen TUI to configure Flex components. The TUI calls the Config API to perform ad hoc configuration. </p>","tags":["administration","installation","helm","EKS","Amazon Web Services","AWS"]},{"location":"install/helm-install/google-gke/","title":"Install Gluu Flex on GKE","text":"","tags":["administration","installation","helm","GKE","Google Cloud","GCP"]},{"location":"install/helm-install/google-gke/#system-requirements","title":"System Requirements","text":"<p>The resources may be set minimally to the below:</p> <ul> <li>8-13 GB RAM based on the services deployed</li> <li>8-11 CPU cores based on the services deployed</li> <li>50GB hard-disk</li> </ul> <p>Use the listing below for a detailed estimation of the minimum required resources. The table contains the default resources recommendation per service. Depending on the use of each service the resources need may be increase or decrease.</p> Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes fido2 0.5 0.5GB N/A 64 Bit No scim 1 1GB N/A 64 Bit No config - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs persistence - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs nginx 1 1GB N/A 64 Bit Yes if ALB/Istio not used auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 1 1GB N/A 64 Bit No casa 0.5 0.5GB N/A 64 Bit No admin-ui 2 2GB N/A 64 Bit No link 0.5 1GB N/A 64 Bit No saml 0.5 1GB N/A 64 Bit No kc-scheduler - job 0.3 0.3GB N/A 64 Bit No <p>Releases of images are in style 1.0.0-beta.0, 1.0.0-0</p>","tags":["administration","installation","helm","GKE","Google Cloud","GCP"]},{"location":"install/helm-install/google-gke/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Before initiating the setup, please obtain an\u00a0SSA\u00a0for Flex trial, after which you will issued a JWT.</p> </li> <li> <p>Enable GKE API if not enabled yet.</p> </li> <li> <p>If you are using <code>Cloud Shell</code>, you can skip to step 7.</p> </li> <li> <p>Install gcloud.</p> </li> <li> <p>Install <code>kubectl</code> using <code>gcloud components install kubectl</code> command.</p> </li> <li> <p>Install Helm3.</p> </li> <li> <p>Create cluster using a command such as the following example:</p> <p><pre><code>gcloud container clusters create gluu-cluster --num-nodes 2 --machine-type e2-standard-4 --zone us-west1-a\n</code></pre> You can adjust <code>num-nodes</code> and <code>machine-type</code> as per your desired cluster size    </p> </li> <li> <p>Create <code>gluu</code> namespace where our resources will reside     <pre><code>kubectl create namespace gluu\n</code></pre></p> </li> </ol>","tags":["administration","installation","helm","GKE","Google Cloud","GCP"]},{"location":"install/helm-install/google-gke/#gluu-flex-installation-using-helm","title":"Gluu Flex Installation using Helm","text":"<ol> <li> <p>Install Nginx-Ingress, if you are not using Istio ingress</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://charts.helm.sh/stable\nhelm repo update\nhelm install nginx ingress-nginx/ingress-nginx\n</code></pre> </li> <li> <p>Create a file named <code>override.yaml</code> and add changes as per your desired configuration:</p> <ul> <li> <p>FQDN/domain is not registered:</p> <p>Get the Loadbalancer IP:  <pre><code>kubectl get svc nginx-ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre></p> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n    lbIp: #Add the Loadbalance IP from the previous command\n    isFqdnRegistered: false\n</code></pre> </li> <li> <p>FQDN/domain is registered:</p> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n    lbIp: #Add the LoadBalancer IP from the previous command\n    isFqdnRegistered: true\n    fqdn: demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\nnginx-ingress:\n  ingress:\n      path: /\n      hosts:\n      - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n      tls:\n      - secretName: tls-certificate\n        hosts:\n        - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n</code></pre> </li> <li> <p>PostgreSQL for persistence storage</p> <p>In a production environment, a production grade PostgreSQL server should be used such as <code>Cloud SQL</code></p> <p>For testing purposes, you can deploy it on the GKE cluster using the following command:</p> <pre><code>helm install my-release --set auth.postgresPassword=Test1234#,auth.database=gluu -n gluu oci://registry-1.docker.io/bitnamicharts/postgresql\n</code></pre> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n  cnPersistenceType: sql\nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 5432\n    cnSqlDbDialect: pgsql\n    cnSqlDbHost: my-release-postgresql.gluu.svc\n    cnSqlDbUser: postgres\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> </li> <li> <p>MySQL for persistence storage</p> <p>In a production environment, a production grade MySQL server should be used such as <code>Cloud SQL</code></p> <p>For testing purposes, you can deploy it on the GKE cluster using the following command:</p> <pre><code>helm install my-release --set auth.rootPassword=Test1234#,auth.database=gluu -n gluu oci://registry-1.docker.io/bitnamicharts/mysql\n</code></pre> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n  cnPersistenceType: sql\nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 3306\n    cnSqlDbDialect: mysql\n    cnSqlDbHost: my-release-mysql.gluu.svc\n    cnSqlDbUser: root\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> <p>So if your desired configuration has FQDN and MySQL, the final <code>override.yaml</code> file will look something like that:</p> <pre><code>global:\n  cnPersistenceType: sql\n  lbIp: \"\" #Add the LoadBalancer IP from previous command\n  isFqdnRegistered: true\n  fqdn: demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\nnginx-ingress:\n  ingress:\n      path: /\n      hosts:\n      - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n      tls:\n      - secretName: tls-certificate\n        hosts:\n        - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu  \nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 3306\n    cnSqlDbDialect: mysql\n    cnSqlDbHost: my-release-mysql.gluu.svc\n    cnSqlDbUser: root\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> </li> </ul> </li> <li> <p>Install Gluu Flex</p> <p>After finishing all the tweaks to the <code>override.yaml</code> file, we can use it to install gluu flex.</p> <pre><code>helm repo add gluu-flex https://docs.gluu.org/charts\nhelm repo update\nhelm install gluu gluu-flex/gluu -n gluu -f override.yaml\n</code></pre> </li> </ol>","tags":["administration","installation","helm","GKE","Google Cloud","GCP"]},{"location":"install/helm-install/google-gke/#configure-gluu-flex","title":"Configure Gluu Flex","text":"<p>You can use the Janssen TUI to configure Flex components. The TUI calls the Config API to perform ad hoc configuration. </p>","tags":["administration","installation","helm","GKE","Google Cloud","GCP"]},{"location":"install/helm-install/local/","title":"Install Gluu Server Locally with minikube and MicroK8s","text":"","tags":["administration","installation","helm"]},{"location":"install/helm-install/local/#system-requirements","title":"System Requirements","text":"<p>For local deployments like <code>minikube</code> and <code>MicroK8s</code> or cloud installations in demo mode, resources may be set to the minimum as below:</p> <ul> <li>8 GB RAM</li> <li>4 CPU cores</li> <li>50 GB hard-disk</li> </ul> <p>Use the listing below for a detailed estimation of minimum required resources. The table contains the default resources recommendation per service. Depending on the use of each service the resources need may increase or decrease.</p> Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes fido2 0.5 0.5GB N/A 64 Bit No scim 1 1GB N/A 64 Bit No config - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs persistence - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs nginx 1 1GB N/A 64 Bit Yes if ALB/Istio not used auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 1 1GB N/A 64 Bit No casa 0.5 0.5GB N/A 64 Bit No admin-ui 2 2GB N/A 64 Bit No link 0.5 1GB N/A 64 Bit No saml 0.5 1GB N/A 64 Bit No <p>Releases of images are in style 1.0.0-beta.0, 1.0.0-0</p>","tags":["administration","installation","helm"]},{"location":"install/helm-install/local/#installation-steps","title":"Installation Steps","text":"<p>Before initiating the setup, please obtain an\u00a0SSA\u00a0for Flex trial, after which you will issued a JWT.</p> <p>Start a fresh Ubuntu <code>18.04</code>/<code>20.04</code>/<code>22.04</code> VM with ports <code>443</code> and <code>80</code> open. Then execute the following:</p> <p><pre><code>sudo su -\n</code></pre> <pre><code>wget https://raw.githubusercontent.com/GluuFederation/flex/vreplace-flex-version/automation/startflexdemo.sh &amp;&amp; chmod u+x startflexdemo.sh &amp;&amp; ./startflexdemo.sh\n</code></pre></p> <p>This will install Docker, Microk8s, Helm and Gluu with the default settings that can be found inside values.yaml.  </p> <p>The installer will automatically add a record to your hosts record in the VM but if you want to access the endpoints outside the VM you must map the <code>ip</code> of the instance running Ubuntu to the FQDN you provided and then access the endpoints at your browser such in the example in the table below.</p> Service Example endpoint Auth server <code>https://FQDN/.well-known/openid-configuration</code> fido2 <code>https://FQDN/.well-known/fido2-configuration</code> scim <code>https://FQDN/.well-known/scim-configuration</code> Casa <code>https://FQDN/jans-casa</code> Admin-UI <code>https://FQDN/admin</code>","tags":["administration","installation","helm"]},{"location":"install/helm-install/local/#configure-gluu-flex","title":"Configure Gluu Flex","text":"<p>You can use the Janssen TUI to configure Flex components. The TUI calls the Config API to perform ad hoc configuration.</p>","tags":["administration","installation","helm"]},{"location":"install/helm-install/microsoft-azure/","title":"Install Gluu Flex on AKS","text":"","tags":["administration","installation","helm","AKS","Microsoft","Azure"]},{"location":"install/helm-install/microsoft-azure/#system-requirements","title":"System Requirements","text":"<p>The resources may be set minimally to the below:</p> <ul> <li>8-13 GB RAM based on the services deployed</li> <li>8-11 CPU cores based on the services deployed</li> <li>50GB hard-disk</li> </ul> <p>Use the listing below for a detailed estimation of the minimum required resources. The table contains the default resources recommendation per service. Depending on the use of each service the resources need may be increase or decrease.</p> Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes fido2 0.5 0.5GB N/A 64 Bit No scim 1 1GB N/A 64 Bit No config - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs persistence - job 0.3 0.3GB N/A 64 Bit Yes on fresh installs nginx 1 1GB N/A 64 Bit Yes if ALB/Istio not used auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 1 1GB N/A 64 Bit No casa 0.5 0.5GB N/A 64 Bit No admin-ui 2 2GB N/A 64 Bit No link 0.5 1GB N/A 64 Bit No saml 0.5 1GB N/A 64 Bit No kc-scheduler - job 0.3 0.3GB N/A 64 Bit No <p>Releases of images are in style 1.0.0-beta.0, 1.0.0-0</p>","tags":["administration","installation","helm","AKS","Microsoft","Azure"]},{"location":"install/helm-install/microsoft-azure/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Before initiating the setup, please obtain an\u00a0SSA\u00a0for Flex trial, after which you will issued a JWT.</p> </li> <li> <p>Install Azure CLI</p> </li> <li> <p>Create a Resource Group <pre><code>az group create --name gluu-resource-group --location eastus\n</code></pre></p> </li> <li> <p>Create an AKS cluster such as the following example:     <pre><code>az aks create -g gluu-resource-group -n gluu-cluster --enable-managed-identity --node-vm-size NODE_TYPE --node-count 2 --enable-addons monitoring --enable-msi-auth-for-monitoring  --generate-ssh-keys \n</code></pre>     You can adjust <code>node-count</code> and <code>node-vm-size</code> as per your desired cluster size</p> </li> <li> <p>Connect to the cluster <pre><code>az aks install-cli\naz aks get-credentials --resource-group gluu-resource-group --name gluu-cluster\n</code></pre></p> </li> <li> <p>Install Helm3</p> </li> <li> <p>Create <code>gluu</code> namespace where our resources will reside     <pre><code>kubectl create namespace gluu\n</code></pre></p> </li> </ol>","tags":["administration","installation","helm","AKS","Microsoft","Azure"]},{"location":"install/helm-install/microsoft-azure/#gluu-flex-installation-using-helm","title":"Gluu Flex Installation using Helm","text":"<ol> <li> <p>Install Nginx-Ingress, if you are not using Istio ingress</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://charts.helm.sh/stable\nhelm repo update\nhelm install nginx ingress-nginx/ingress-nginx\n</code></pre> </li> <li> <p>Create a file named <code>override.yaml</code> and add changes as per your desired configuration:</p> <ul> <li> <p>FQDN/domain is not registered:</p> <p>Get the Loadbalancer IP:  <pre><code>kubectl get svc nginx-ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre></p> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n    lbIp: #Add the Loadbalance IP from the previous command\n    isFqdnRegistered: false\n</code></pre> </li> <li> <p>FQDN/domain is registered:</p> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n    lbIp: #Add the LoadBalancer IP from the previous command\n    isFqdnRegistered: true\n    fqdn: demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\nnginx-ingress:\n  ingress:\n      path: /\n      hosts:\n      - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n      tls:\n      - secretName: tls-certificate\n        hosts:\n        - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n</code></pre> </li> <li> <p>PostgreSQL for persistence storage</p> <p>In a production environment, a production grade PostgreSQL server should be used such as <code>Azure Database for PostgreSQL</code></p> <p>For testing purposes, you can deploy it on the AKS cluster using the following command:</p> <pre><code>helm install my-release --set auth.postgresPassword=Test1234#,auth.database=gluu -n gluu oci://registry-1.docker.io/bitnamicharts/postgresql\n</code></pre> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n  cnPersistenceType: sql\nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 5432\n    cnSqlDbDialect: pgsql\n    cnSqlDbHost: my-release-postgresql.gluu.svc\n    cnSqlDbUser: postgres\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> </li> <li> <p>MySQL for persistence storage</p> <p>In a production environment, a production grade MySQL server should be used such as <code>Azure Database for MySQL</code></p> <p>For testing purposes, you can deploy it on the AKS cluster using the following command:</p> <pre><code>helm install my-release --set auth.rootPassword=Test1234#,auth.database=gluu -n gluu oci://registry-1.docker.io/bitnamicharts/mysql\n</code></pre> <p>Add the following yaml snippet to your <code>override.yaml</code> file:</p> <pre><code>global:\n  cnPersistenceType: sql\nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 3306\n    cnSqlDbDialect: mysql\n    cnSqlDbHost: my-release-mysql.gluu.svc\n    cnSqlDbUser: root\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> <p>So if your desired configuration has FQDN and MySQL, the final <code>override.yaml</code> file will look something like that:</p> <pre><code>global:\n  cnPersistenceType: sql\n  lbIp: \"\" #Add the LoadBalancer IP from previous command\n  isFqdnRegistered: true\n  fqdn: demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\nnginx-ingress:\n  ingress:\n      path: /\n      hosts:\n      - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu\n      tls:\n      - secretName: tls-certificate\n        hosts:\n        - demoexample.gluu.org #CHANGE-THIS to the FQDN used for Gluu  \nconfig:\n  configmap:\n    cnSqlDbName: gluu\n    cnSqlDbPort: 3306\n    cnSqlDbDialect: mysql\n    cnSqlDbHost: my-release-mysql.gluu.svc\n    cnSqlDbUser: root\n    cnSqlDbTimezone: UTC\n    cnSqldbUserPassword: Test1234#\n</code></pre> </li> </ul> </li> <li> <p>Install Gluu Flex</p> <p>After finishing all the tweaks to the <code>override.yaml</code> file, we can use it to install gluu flex.</p> <pre><code>helm repo add gluu-flex https://docs.gluu.org/charts\nhelm repo update\nhelm install gluu gluu-flex/gluu -n gluu -f override.yaml\n</code></pre> </li> </ol>","tags":["administration","installation","helm","AKS","Microsoft","Azure"]},{"location":"install/helm-install/microsoft-azure/#configure-gluu-flex","title":"Configure Gluu Flex","text":"<p>You can use the Janssen TUI to configure Flex components. The TUI calls the Config API to perform ad hoc configuration.</p>","tags":["administration","installation","helm","AKS","Microsoft","Azure"]},{"location":"install/helm-install/rancher/","title":"Install Gluu Server Using Rancher Marketplace","text":"<p>For a more generic <code>Gluu Flex</code> installation on Rancher, you can follow this comprehensive guide.</p> <p>Also, there are multiple <code>Rancher</code> installation options. For this quick start setup we will use a single node Kubernetes install in docker with a self-signed certificate.</p>","tags":["administration","installation","helm"]},{"location":"install/helm-install/rancher/#installation-steps","title":"Installation Steps","text":"<p>Note</p> <p>If you are deploying an Ingress controller on a single node deployment, in which Ingress utilizes ports 80 and 443, then you have to adjust the host ports mapped for the rancher/rancher container.  Here's an example on how to do that. </p> <ol> <li>Before initiating the setup, please obtain an\u00a0SSA\u00a0for Flex trial, after which you will issued a JWT.</li> <li>Provision a Linux 4 CPU, 16 GB RAM, and 50GB SSD VM with ports <code>443</code> and <code>80</code> open. Save the VM IP address. For development environments, the VM can be set up using VMWare Workstation Player or VirtualBox with Ubuntu 20.04/22.04 operating system running on a VM.</li> <li>Install Docker.</li> <li>Execute     <pre><code>docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher:latest\n</code></pre>    The final line of the returned text is the <code>container-id</code>, which you'll need for the next step.</li> <li>Execute the following command to get the bootstrap password for login.     <pre><code>docker logs  &lt;container-id&gt;  2&gt;&amp;1 | grep \"Bootstrap Password:\"\n</code></pre></li> <li>Head to <code>https://&lt;VM-IP-ADDRESS-FROM-FIRST-STEP&gt;</code> and log in with the username <code>admin</code> and the password from the previous step. If you are logging into Rancher for the first time, you'll need to enter just the password, and on the next step, Rancher will ask you to reset your current password.</li> <li>Next, you'll see the Rancher home page with a list of existing clusters. By default, the name of the newly created cluster would be <code>local</code>. Click on the cluster name to go to the dashboard.</li> <li>From the top-left menu expand <code>Apps</code> and click <code>Charts</code>.</li> <li>Search for <code>Gluu</code> and begin your installation.</li> <li>During Step 1 of installation, be sure to select the <code>Customize Helm options before install</code> option.</li> <li>In Step 2, customize the settings for the Gluu installation. Specifically <code>Optional Services</code> from where you can enable Gluu modules.</li> <li>In Step 3, unselect the <code>Wait</code> option and start the installation.</li> </ol>","tags":["administration","installation","helm"]},{"location":"install/vm-install/rhel/","title":"Install Gluu Flex On Red Hat EL","text":"<p>This is a step-by-step guide for installation and uninstallation of Gluu Flex on Ubuntu Linux.</p>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure that the OS platform is one of the supported versions</li> <li>VM should meet VM system requirements</li> <li>Make sure that if <code>SELinux</code> is installed then it is  put into permissive mode</li> <li>If the server firewall is running, make sure you allow <code>https</code>, which is   needed for OpenID and FIDO. <pre><code>sudo firewall-cmd --permanent --zone=public --add-service=https\n</code></pre> <pre><code>sudo firewall-cmd --reload;\n</code></pre></li> <li>Install EPEL and mod-auth-openidc as dependencies <pre><code>sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E %rhel).noarch.rpm\n</code></pre> <pre><code>sudo yum -y module enable mod_auth_openidc;\n</code></pre></li> <li>Please obtain an SSA to trial Flex, after which you are issued a JWT   that you can use during installation. SSA should be stored in a text file on an accessible path.</li> </ul>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#install-the-package","title":"Install the Package","text":"","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#download-and-verify-the-release-package","title":"Download and Verify the Release Package","text":"<ul> <li>Download the release package from the Github Flex   Releases <pre><code>wget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex-replace-flex-version-stable.el8.x86_64.rpm -P /tmp\n</code></pre></li> <li>GPG key is used to ensure the authenticity of the downloaded package during the installation process. If the key is   not found, the installation step would fail. Use the commands below to download and   import the GPG key. <pre><code>wget https://github.com/GluuFederation/flex/files/11814579/automation-flex-public-gpg.zip\n</code></pre> <pre><code>unzip automation-flex-public-gpg.zip\n</code></pre> <pre><code>sudo rpm -import automation-flex-public-gpg.asc\n</code></pre></li> <li>Verify the integrity of the downloaded package using published <code>sha256sum</code>. Download the <code>sha256sum</code> file for the package <pre><code>wget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex-replace-flex-version-stable.el8.x86_64.rpm.sha256sum  -P /tmp\n</code></pre> Run the command below from the directory where the downloaded package and the <code>.sha256sum</code> files are located. <pre><code>cd /tmp;\nsha256sum -c flex-replace-flex-version-stable.el8.x86_64.rpm.sha256sum;\n</code></pre> Output similar to below should confirm the integrity of the downloaded package. <pre><code>flex-replace-flex-version-el8.x86_64.rpm : ok\n</code></pre></li> </ul>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#install-the-release-package","title":"Install the Release Package","text":"<pre><code>sudo yum install ./flex-replace-flex-version-stable.el8.x86_64.rpm\n</code></pre>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#run-the-setup-script","title":"Run the setup script","text":"<p>Execute the setup script with command below: <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py\n</code></pre></p> <pre><code>Install Admin UI [Y/n]: y\n</code></pre>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#verify-and-access-the-installation","title":"Verify and Access the Installation","text":"<p>Verify that installation has been successful and all installed components are accessible using the steps below</p> <ul> <li> <p>Log in to Text User Interface (TUI) <pre><code>/opt/jans/jans-cli/jans_cli_tui.py\n</code></pre> Full TUI documentation can be found here</p> </li> <li> <p>Log into Admin-UI using URI below <pre><code>https://FQDN/admin\n</code></pre> After successful installation of the Admin-UI component, we need to upload the required SSA input as a file path. This should be the SSA or file that was acquired as part of prerequisite step.</p> </li> </ul> <p>When troubleshooting issues with Admin UI access, it's advisable to check the logs, refer to the FAQ, and review service dependencies for potential solutions.</p> <ul> <li>Access Casa using URI below <pre><code>https://FQDN/jans-casa\n</code></pre></li> </ul>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#enabling-https","title":"Enabling HTTPS","text":"<p>To enable communication with Janssen Server over TLS (https) in a production  environment, Janssen Server needs details about CA certificate. Update the  HTTPS cofiguration file <code>https_jans.conf</code> as shown below:</p> <p>Note</p> <p>Want to use <code>Let's Encrypt</code> to get a certificate? Follow this guide.</p> <ul> <li>Open <code>https_jans.conf</code> <pre><code>sudo vi /etc/httpd/conf.d/https_jans.conf\n</code></pre></li> <li>Update <code>SSLCertificateFile</code> and <code>SSLCertificateKeyFile</code> parameters values   <pre><code>SSLCertificateFile location_of_fullchain.pem\nSSLCertificateKeyFile location_of_privkey.pem\n</code></pre></li> <li>Restart <code>httpd</code> service for changes to take effect   <pre><code>sudo service httpd restart\n</code></pre></li> </ul>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#uninstallation","title":"Uninstallation","text":"<p>Removing Flex is a two step process:</p> <ul> <li>Uninstall Gluu Flex</li> <li>Uninstall Janssen Packages</li> </ul> <p>If you have not run the setup script, you can skip step 1 and just remove the package.</p>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#uninstall-gluu-flex","title":"Uninstall Gluu Flex","text":"<p>Use the command below to uninstall the Gluu Flex server <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n</code></pre> Output: <pre><code>[ec2-user@manojs1978-lenient-drum ~]$ sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n\nThis process is irreversible.\nGluu Flex Components will be removed\n\n\n\nAre you sure to uninstall Gluu Flex? [yes/N] yes\n\nProfile was detected as jans.\n\nLog Files:\n\n/opt/jans/jans-setup/logs/flex-setup.log\n/opt/jans/jans-setup/logs/flex-setup-error.log\n\n/opt/jans/jans-setup/setup_app/pylib/jwt/utils.py:7: CryptographyDeprecationWarning: Python 3.6 is no longer supported by the Python core team. Therefore, support for it is deprecated in cryptography and will be removed in a future release.\n  from cryptography.hazmat.primitives.asymmetric.ec import EllipticCurve\nPlease wait while collecting properties...\nUninstalling Gluu Casa\n  - Deleting /etc/default/casa\n  - Deleting /etc/systemd/system/casa.service\n  - Removing casa directives from apache configuration\n  - Deleting /opt/jans/jetty/jans-auth/custom/libs/casa-config.jar\n  - Removing plugin /opt/jans/jetty/jans-auth/custom/libs/casa-config.jar from Jans Auth Configuration\n  - Deleting /opt/jans/python/libs/Casa.py\n  - Deleting /opt/jans/python/libs/casa-external_fido2.py\n  - Deleting /opt/jans/python/libs/casa-external_otp.py\n  - Deleting /opt/jans/python/libs/casa-external_super_gluu.py\n  - Deleting /opt/jans/python/libs/casa-external_twilio_sms.py\n  - Deleting casa client from db backend\n  - Deleting casa client scopes from db backend\n  - Deleting casa configuration from db backend\n  - Deleting script 3000-F75A from db backend\n  - Deleting /opt/jans/jetty/casa\nUninstalling Gluu Admin-UI\n  - Deleting Gluu Flex Admin UI Client  2001.931e814d-01e2-4983-898f-91bf93670f7b\n  - Removing Admin UI directives from apache configuration\n  - Deleting /opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar\n  - Removing plugin /opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar from Jans Config API Configuration\n  - Deleting /opt/jans/jetty/jans-config-api/custom/config/log4j2-adminui.xml\n  - Deleting /opt/jans/jetty/jans-config-api/custom/config/log4j2.xml\n  - Rewriting Jans CLI init file for plugins\n  - Deleting /var/www/html/admin\nDisabling script A51E-76DA\nRestarting Apache\nRestarting Jans Auth\nRestarting Janssen Config Api\n</code></pre></p>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#uninstall-janssen-packages","title":"Uninstall Janssen Packages","text":"<p>The command below removes and uninstall the <code>jans</code> package <pre><code>sudo python3 /opt/jans/jans-setup/install.py -uninstall\n</code></pre> Output: <pre><code>[ec2-user@manojs1978-lenient-drum ~]$ sudo python3 /opt/jans/jans-setup/install.py -uninstall\n\nThis process is irreversible.\nYou will lose all data related to Janssen Server.\n\n\n\nAre you sure to uninstall Janssen Server? [yes/N] yes\n\nUninstalling Jannsen Server...\nRemoving /etc/default/jans-config-api\nStopping jans-config-api\nRemoving /etc/default/jans-auth\nStopping jans-auth\nRemoving /etc/default/jans-fido2\nStopping jans-fido2\nRemoving /etc/default/jans-scim\nStopping jans-scim\nRemoving /etc/default/jans-cache-refresh\nStopping jans-cache-refresh\nExecuting rm -r -f /etc/certs\nExecuting rm -r -f /etc/jans\nExecuting rm -r -f /opt/jans\nExecuting rm -r -f /opt/amazon-corretto*\nExecuting rm -r -f /opt/jre\nExecuting rm -r -f /opt/node*\nExecuting rm -r -f /opt/jetty*\nExecuting rm -r -f /opt/jython*\nExecuting rm -r -f /opt/dist\nRemoving /etc/httpd/conf.d/https_jans.conf\n</code></pre></p>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#remove-gluu-flex-packages","title":"Remove Gluu Flex Packages:","text":"<p>List existing Gluu packages with: <pre><code>sudo yum list installed | grep flex\n</code></pre> Remove packages: <pre><code>sudo yum remove &lt;package-name&gt;\n</code></pre></p>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#uninstalling-admin-ui","title":"Uninstalling Admin UI","text":"<p>To uninstall the Admin UI from your Flex installation, execute this command:</p> <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n</code></pre>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/rhel/#updating-admin-ui","title":"Updating Admin UI","text":"<p>To update the Admin UI in an existing Flex installation, execute this command:</p> <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --update-admin-ui\n</code></pre>","tags":["administration","installation","vm","RHEL","CentOS"]},{"location":"install/vm-install/suse/","title":"Install Gluu Flex On SUSE Linux","text":"<p>This is a step-by-step guide for installation and uninstallation of Gluu Flex on SUSE Linux distributions</p>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure that the OS platform is one of the supported versions</li> <li>VM should meet VM system requirements</li> <li>Make sure that if <code>SELinux</code> is installed then   it is put into permissive mode</li> <li>If the server firewall is running, make sure you allow <code>https</code>, which is   needed for OpenID and FIDO. <pre><code>sudo firewall-cmd --permanent --zone=public --add-service=https\n</code></pre> <pre><code>sudo firewall-cmd --reload\n</code></pre></li> <li>for SUSE Linux Enterprise(SLES) we need to enable PackageHub as per OS version and architecture <pre><code>sudo SUSEConnect -p PackageHub/15.4/x86_64\n</code></pre></li> <li>Please obtain an SSA to trial Flex, after which you are issued a JWT   that you can use during installation. SSA should be stored in a text file on an accessible path.</li> </ul>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#install-the-package","title":"Install the Package","text":"","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#download-and-verify-the-release-package","title":"Download and Verify the Release Package","text":"<ul> <li> <p>Download the release package from the GitHub FLEX Releases <pre><code>wget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex-replace-flex-version-stable.suse15.x86_64.rpm -P ~/\n</code></pre></p> </li> <li> <p>GPG key is used to ensure the authenticity of the downloaded package during the installation process. If the key is   not found, the installation step would fail. Use the commands below to download and   import the GPG key. <pre><code>wget https://github.com/GluuFederation/flex/files/11814579/automation-flex-public-gpg.zip\n</code></pre> <pre><code>unzip automation-flex-public-gpg.zip\n</code></pre> <pre><code>sudo rpm -import automation-flex-public-gpg.asc\n</code></pre></p> </li> <li> <p>Verify the integrity of the downloaded package using published <code>sha256sum</code>. Download the <code>sha256sum</code> file for the package <pre><code>wget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex-replace-flex-version-stable.suse15.x86_64.rpm.sha256sum  -P ~/\n</code></pre></p> </li> <li> <p>Verify package integrity <pre><code>sha256sum -c flex-replace-flex-version-stable.suse15.x86_64.rpm.sha256sum\n</code></pre> You should see: <pre><code>flex-replace-flex-version-suse15.x86_64.rpm: ok\n</code></pre></p> </li> </ul>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#install-the-release-package","title":"Install the Release Package","text":"<p>Use SUSE <code>zypper</code> to install <pre><code>sudo zypper install ~/flex-replace-flex-version-stable.suse15.x86_64.rpm\n</code></pre></p>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#run-the-setup-script","title":"Run the setup script","text":"<ul> <li>Run the setup script:</li> </ul> <p>Execute the setup script with command below: <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py\n</code></pre></p> <pre><code>Install Admin UI [Y/n]: y\n</code></pre>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#verify-and-access-the-installation","title":"Verify and Access the Installation","text":"<p>Verify that installation has been successful and all installed components are accessible using the steps below:</p> <ul> <li> <p>Log in to Text User Interface (TUI) <pre><code>/opt/jans/jans-cli/jans_cli_tui.py\n</code></pre> TUI is a text-based configuration tool for Gluu Flex Server.</p> </li> <li> <p>Log into Admin-UI using URI below <pre><code>https://FQDN/admin\n</code></pre> After successful installation of the Admin-UI component, we need to upload the required SSA input as a file path. This should be the SSA or file that was acquired as part of the prerequisite step.</p> </li> </ul> <p>When troubleshooting issues with Admin UI access, it's advisable to check the logs, refer to the FAQ, and review service dependencies for potential solutions.</p> <ul> <li>Access Casa using URI below <pre><code>https://FQDN/jans-casa\n</code></pre></li> </ul>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#enabling-https","title":"Enabling HTTPS","text":"<p>To enable communication with Janssen Server over TLS (https) in a production  environment, Janssen Server needs details about CA certificate. Update the  HTTPS cofiguration file <code>https_jans.conf</code> as shown below:</p> <p>Note</p> <p>Want to use <code>Let's Encrypt</code> to get a certificate? Follow this guide.</p> <ul> <li>Open <code>_https_jans.conf</code> <pre><code> sudo vi /etc/apache2/vhosts.d/_https_jans.conf\n ```\n - Update `SSLCertificateFile` and `SSLCertificateKeyFile` parameters values\n ```bash\nSSLCertificateFile location_of_fullchain.pem\nSSLCertificateKeyFile location_of_privkey.pem\n</code></pre></li> <li>Restart <code>apache</code> service for changes to take effect <pre><code>sudo /usr/sbin/rcapache2 restart\n</code></pre></li> </ul>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#uninstallation","title":"Uninstallation","text":"<p>Removing Flex is a two step process:</p> <ul> <li>Uninstall Gluu Flex and Uninstall Janssen Packages</li> <li>Remove Gluu Packages</li> </ul> <p>If you have not run the setup script, you can skip step 1 and just remove the package.</p> <p>First use the command below to uninstall the Gluu Flex server</p> <p><pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n</code></pre> the output will be like this: <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n\nThis process is irreversible.\nGluu Flex Components will be removed\n\n\n\nAre you sure to uninstall Gluu Flex? [yes/N] yes\n\nProfile was detected as jans.\n\nLog Files:\n\n/opt/jans/jans-setup/logs/flex-setup.log\n/opt/jans/jans-setup/logs/flex-setup-error.log\n\n/opt/jans/jans-setup/setup_app/pylib/jwt/utils.py:7: CryptographyDeprecationWarning: Python 3.6 is no longer supported by the Python core team. Therefore, support for it is deprecated in cryptography and will be removed in a future release.\n  from cryptography.hazmat.primitives.asymmetric.ec import EllipticCurve\nPlease wait while collecting properties...\nUninstalling Gluu Casa\n  - Deleting /etc/default/casa\n  - Deleting /etc/systemd/system/casa.service\n  - Removing casa directives from apache configuration\n  - Deleting /opt/jans/jetty/jans-auth/custom/libs/casa-config.jar\n  - Removing plugin /opt/jans/jetty/jans-auth/custom/libs/casa-config.jar from Jans Auth Configuration\n  - Deleting /opt/jans/python/libs/Casa.py\n  - Deleting /opt/jans/python/libs/casa-external_fido2.py\n  - Deleting /opt/jans/python/libs/casa-external_otp.py\n  - Deleting /opt/jans/python/libs/casa-external_super_gluu.py\n  - Deleting /opt/jans/python/libs/casa-external_twilio_sms.py\n  - Deleting casa client from db backend\n  - Deleting casa client scopes from db backend\n  - Deleting casa configuration from db backend\n  - Deleting script 3000-F75A from db backend\n  - Deleting /opt/jans/jetty/casa\nUninstalling Gluu Admin-UI\n  - Deleting Gluu Flex Admin UI Client  2001.732c7b51-57c4-48a5-b64d-8718b3e043bb\n  - Removing Admin UI directives from apache configuration\n  - Deleting /opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar\n  - Removing plugin /opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar from Jans Config API Configuration\n  - Deleting /opt/jans/jetty/jans-config-api/custom/config/log4j2-adminui.xml\n  - Deleting /opt/jans/jetty/jans-config-api/custom/config/log4j2.xml\n  - Rewriting Jans CLI init file for plugins\n  - Deleting /srv/www/htdocs/admin\nDisabling script A51E-76DA\nRestarting Apache\nRestarting Jans Auth\nRestarting Janssen Config Api\n</code></pre></p>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#uninstall-janssen-packages","title":"Uninstall Janssen Packages","text":"<p>The command below removes and uninstall the <code>jans</code> package <pre><code>sudo python3 /opt/jans/jans-setup/install.py -uninstall\n</code></pre> output will be like this: <pre><code>sudo python3 /opt/jans/jans-setup/install.py -uninstall -yes --keep-downloads --keep-setup\n\nThis process is irreversible.\nYou will lose all data related to Janssen Server.\n\n\n\nAre you sure to uninstall Janssen Server? [yes/N] yes\n\nUninstalling Jannsen Server...\nRemoving /etc/default/jans-config-api\nStopping jans-config-api\nRemoving /etc/default/jans-auth\nStopping jans-auth\nRemoving /etc/default/jans-fido2\nStopping jans-fido2\nRemoving /etc/default/jans-scim\nStopping jans-scim\nRemoving /etc/default/jans-cache-refresh\nStopping jans-cache-refresh\nExecuting rm -r -f /etc/certs\nExecuting rm -r -f /etc/jans\nExecuting rm -r -f /opt/jans\nExecuting rm -r -f /opt/amazon-corretto*\nExecuting rm -r -f /opt/jre\nExecuting rm -r -f /opt/node*\nExecuting rm -r -f /opt/jetty*\nExecuting rm -r -f /opt/jython*\nExecuting rm -r -f /opt/dist\nRemoving /etc/apache2/vhosts.d/_https_jans.conf\n</code></pre></p> <p>Second uninstall the package:</p> <p>You should see the package with: <pre><code>sudo rpm -qa | grep flex\n</code></pre></p> <p>Remove package with:  <pre><code>sudo zypper remove flex\n</code></pre></p>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/suse/#updating-admin-ui","title":"Updating Admin UI","text":"<p>To update the Admin UI in an existing Flex installation, execute this command:</p> <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --update-admin-ui\n</code></pre>","tags":["administration","installation","vm","SUSE","SLES","Tumbleweed"]},{"location":"install/vm-install/ubuntu/","title":"Install Gluu Flex On Ubuntu Linux","text":"<p>This is a step-by-step guide for installation and uninstallation of Gluu Flex on Ubuntu Linux</p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure that the OS platform is one of the supported versions</li> <li>VM should meet VM system requirements</li> <li>Make sure that if <code>SELinux</code> is installed then it is put into permissive mode</li> <li>If the server firewall is running, make sure you allow <code>https</code>, which is   needed for OpenID and FIDO. <pre><code>sudo ufw allow https\n</code></pre></li> <li>Please obtain an SSA to trial Flex, after which you are issued a JWT   that you can use during installation. SSA should be stored in a text file on an accessible path.</li> </ul>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#supported-versions","title":"Supported Versions","text":"<ul> <li>Ubuntu 24.04</li> <li>Ubuntu 22.04</li> <li>Ubuntu 20.04</li> </ul>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#install-the-package","title":"Install the Package","text":"","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#download-and-verify-the-release-package","title":"Download and Verify the Release Package","text":"<ul> <li> <p>Download the release package from the GitHub FLEX Releases. Choose the correct command from below based on the OS version. <pre><code>#Ubuntu 24.04\nwget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex_replace-flex-version-stable.ubuntu24.04_amd64.deb -P /tmp\n</code></pre> <pre><code>#Ubuntu 22.04\nwget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex_replace-flex-version-stable.ubuntu22.04_amd64.deb -P /tmp\n</code></pre> <pre><code>#Ubuntu 20.04\nwget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex_replace-flex-version-stable.ubuntu20.04_amd64.deb -P /tmp\n</code></pre></p> </li> <li> <p>GPG key is used to ensure the authenticity of the downloaded package during the installation process. If the key is   not found, the installation step would fail. Use the commands below to download and   import the GPG key. <pre><code>wget https://github.com/GluuFederation/flex/files/11814579/automation-flex-public-gpg.zip\n</code></pre> <pre><code>unzip automation-flex-public-gpg.zip;\n</code></pre> <pre><code>sudo gpg --import automation-flex-public-gpg.asc;\n</code></pre></p> </li> <li> <p>Verify the integrity of the downloaded package using published <code>sha256sum</code>. Download the <code>sha256sum</code> file for the  package.  Choose the correct command from below based on the OS version. <pre><code>#Ubuntu 24.04\nwget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex_replace-flex-version-stable.ubuntu24.04_amd64.deb.sha256sum  -P /tmp\n</code></pre> <pre><code>#Ubuntu 22.04\nwget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex_replace-flex-version-stable.ubuntu22.04_amd64.deb.sha256sum  -P /tmp\n</code></pre> <pre><code>#Ubuntu 20.04\nwget https://github.com/GluuFederation/flex/releases/download/vreplace-flex-version/flex_replace-flex-version-stable.ubuntu20.04_amd64.deb.sha256sum  -P /tmp\n</code></pre> Verify package integrity of the package that has been downloaded by checking hash. Run the command below from the directory where the downloaded package and the <code>.sha256sum</code> files are located. Choose the correct command from below based on the OS version. <pre><code>#Ubuntu 24.04\ncd /tmp\nsha256sum -c flex_replace-flex-version-stable.ubuntu24.04_amd64.deb.sha256sum\n</code></pre> <pre><code>#Ubuntu 22.04\ncd /tmp\nsha256sum -c flex_replace-flex-version-stable.ubuntu22.04_amd64.deb.sha256sum\n</code></pre> <pre><code>#Ubuntu 20.04\ncd /tmp\nsha256sum -c flex_replace-flex-version-stable.ubuntu20.04_amd64.deb.sha256sum\n</code></pre> Output similar to below should confirm the integrity of the downloaded package. <pre><code>flex_replace-flex-version-stable.ubuntu&lt;version&gt;_amd64.deb: ok\n</code></pre></p> </li> </ul>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#install-the-release-package","title":"Install the Release Package","text":"<p>Choose the correct command from below based on the OS version.</p> <p><pre><code>#Ubuntu 24.04\napt install -y /tmp/flex_replace-flex-version-stable.ubuntu24.04_amd64.deb\n</code></pre> <pre><code>#Ubuntu 22.04\napt install -y /tmp/flex_replace-flex-version-stable.ubuntu22.04_amd64.deb\n</code></pre> <pre><code>#Ubuntu 20.04\napt install -y /tmp/flex_replace-flex-version-stable.ubuntu20.04_amd64.deb\n</code></pre></p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#run-the-setup-script","title":"Run the setup script","text":"<p>Execute the setup script with command below: <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py\n</code></pre></p> <pre><code>Install Admin UI [Y/n]: y\n</code></pre>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#verify-and-access-the-installation","title":"Verify and Access the Installation","text":"<p>Verify that installation has been successful and all installed components are accessible using the steps below:</p> <ul> <li> <p>Log in to Text User Interface (TUI) <pre><code>/opt/jans/jans-cli/jans_cli_tui.py\n</code></pre> TUI is a text-based configuration tool for Gluu Flex Server.</p> </li> <li> <p>Log into Admin-UI using URI below <pre><code>https://FQDN/admin\n</code></pre> After successful installation of the Admin-UI component, we need to upload the required SSA input as a file path. This should be the SSA or file that was acquired as part of the prerequisite step.</p> </li> </ul> <p>When troubleshooting issues with Admin UI access, it's advisable to check the logs, refer to the FAQ, and review service dependencies for potential solutions.</p> <ul> <li>Access Casa using URI below <pre><code>https://FQDN/jans-casa\n</code></pre></li> </ul>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#enabling-https","title":"Enabling HTTPS","text":"<p>To enable communication with Janssen Server over TLS (https) in a production environment, Janssen Server needs details about CA certificate.</p> <p>Note</p> <p>Want to use <code>Let's Encrypt</code> to get a certificate? Follow this guide.</p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#uninstallation","title":"Uninstallation","text":"<p>Removing Flex is a two step process:</p> <ul> <li>Uninstall Gluu Flex</li> <li>Uninstall Janssen Packages</li> </ul> <p>If you have not run the setup script, you can skip step 1 and just remove the package.</p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#uninstall-gluu-flex","title":"Uninstall Gluu Flex","text":"<p>Use the command below to uninstall the Gluu Flex server <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n</code></pre> Output: <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n\nThis process is irreversible.\nGluu Flex Components will be removed\n\n\n\nAre you sure to uninstall Gluu Flex? [yes/N] yes\n\nProfile was detected as jans.\n\nLog Files:\n\n/opt/jans/jans-setup/logs/flex-setup.log\n/opt/jans/jans-setup/logs/flex-setup-error.log\n\nPlease wait while collecting properties...\nUninstalling Gluu Casa\n  - Deleting /etc/default/casa\n  - Deleting /etc/systemd/system/casa.service\n  - Removing casa directives from apache configuration\n  - Deleting /opt/jans/jetty/jans-auth/custom/libs/casa-config.jar\n  - Removing plugin /opt/jans/jetty/jans-auth/custom/libs/casa-config.jar from Jans Auth Configuration\n  - Deleting /opt/jans/python/libs/Casa.py\n  - Deleting /opt/jans/python/libs/casa-external_fido2.py\n  - Deleting /opt/jans/python/libs/casa-external_otp.py\n  - Deleting /opt/jans/python/libs/casa-external_super_gluu.py\n  - Deleting /opt/jans/python/libs/casa-external_twilio_sms.py\n  - Deleting casa client from db backend\n  - Deleting casa client scopes from db backend\n  - Deleting casa configuration from db backend\n  - Deleting script 3000-F75A from db backend\n  - Deleting /opt/jans/jetty/casa\nUninstalling Gluu Admin-UI\n  - Deleting Gluu Flex Admin UI Client  2001.e7989c7e-09b5-4e39-a7c9-a78017127cf0\n  - Removing Admin UI directives from apache configuration\n  - Deleting /opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar\n  - Removing plugin /opt/jans/jetty/jans-config-api/custom/libs/gluu-flex-admin-ui-plugin.jar from Jans Config API Configuration\n  - Deleting /opt/jans/jetty/jans-config-api/custom/config/log4j2-adminui.xml\n  - Deleting /opt/jans/jetty/jans-config-api/custom/config/log4j2.xml\n  - Rewriting Jans CLI init file for plugins\n  - Deleting /var/www/html/admin\nDisabling script A51E-76DA\nRestarting Apache\nRestarting Jans Auth\nRestarting Janssen Config Api\n</code></pre></p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#uninstall-janssen-packages","title":"Uninstall Janssen Packages","text":"<p>The command below removes and uninstall the <code>jans</code> package <pre><code>python3 /opt/jans/jans-setup/install.py -uninstall\n</code></pre> Output : <pre><code>sudo python3 /opt/jans/jans-setup/install.py -uninstall\n\nThis process is irreversible.\nYou will lose all data related to Janssen Server.\n\n\n\nAre you sure to uninstall Janssen Server? [yes/N] yes\n\nUninstalling Jannsen Server...\nRemoving /etc/default/jans-config-api\nStopping jans-config-api\nRemoving /etc/default/jans-auth\nStopping jans-auth\nRemoving /etc/default/jans-fido2\nStopping jans-fido2\nRemoving /etc/default/jans-scim\nStopping jans-scim\nRemoving /etc/default/jans-cache-refresh\nStopping jans-cache-refresh\nStopping OpenDj Server\nStopping Server...\n[23/Jun/2023:09:10:27 +0000] category=BACKEND severity=NOTICE msgID=370 msg=The backend userRoot is now taken offline\n[23/Jun/2023:09:10:28 +0000] category=BACKEND severity=NOTICE msgID=370 msg=The backend site is now taken offline\n[23/Jun/2023:09:10:28 +0000] category=BACKEND severity=NOTICE msgID=370 msg=The backend metric is now taken offline\n[23/Jun/2023:09:10:28 +0000] category=CORE severity=NOTICE msgID=203 msg=The Directory Server is now stopped\nExecuting rm -r -f /etc/certs\nExecuting rm -r -f /etc/jans\nExecuting rm -r -f /opt/jans\nExecuting rm -r -f /opt/amazon-corretto*\nExecuting rm -r -f /opt/jre\nExecuting rm -r -f /opt/node*\nExecuting rm -r -f /opt/jetty*\nExecuting rm -r -f /opt/jython*\nExecuting rm -r -f /opt/opendj\nExecuting rm -r -f /opt/dist\nRemoving /etc/apache2/sites-enabled/https_jans.conf\nRemoving /etc/apache2/sites-available/https_jans.conf\n</code></pre></p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#remove-gluu-flex-packages","title":"Remove Gluu Flex Packages:","text":"<p>List existing Gluu Flex packages with: <pre><code>sudo apt list --installed | grep flex\n</code></pre> Remove packages: <pre><code>sudo apt remove &lt;package name&gt;\n</code></pre></p>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#uninstalling-admin-ui","title":"Uninstalling Admin UI","text":"<p>To uninstall the Admin UI from your Flex installation, execute this command:</p> <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --remove-flex\n</code></pre>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/ubuntu/#updating-admin-ui","title":"Updating Admin UI","text":"<p>To update the Admin UI in an existing Flex installation, execute this command:</p> <pre><code>sudo python3 /opt/jans/jans-setup/flex/flex-linux-setup/flex_setup.py --update-admin-ui\n</code></pre>","tags":["administration","installation","vm","Ubuntu"]},{"location":"install/vm-install/vm-requirements/","title":"VM System Requirements","text":""},{"location":"install/vm-install/vm-requirements/#supported-versions","title":"Supported Versions","text":"<p>Gluu Flex currently provides packages for these Linux distros:</p> <ul> <li>Ubuntu (versions: 20.04 and 22.04)</li> <li>SUSE Distributions<ul> <li>SUSE Linux Enterprise Server (SLES) 15</li> <li>openSUSE Leap 15.5</li> <li>openSUSE Tumbleweed</li> </ul> </li> <li>RedHat Enterprise Linux (version: 8)</li> </ul> <p>Note</p> <p>This document is intended exclusively for dev and staging environments. For production deployment on a VM, refer to this documentation which utilizes Rancher and Helm deployments.</p>"},{"location":"install/vm-install/vm-requirements/#hardware-requirements","title":"Hardware Requirements","text":"<p>A single-VM deployment is where all services are running on one server. Although, the requirements can vary based on the size of the data and the required concurrency, the following guidelines can help you plan:</p> <ul> <li>8 GB RAM</li> <li>4 CPU</li> <li>20 GB Disk</li> </ul>"},{"location":"install/vm-install/vm-requirements/#port-configuration","title":"Port Configuration","text":"<p>Gluu Flex requires the following ports to be open for incoming connections.</p> Port Protocol Notes 443 TCP TLS/HTTP <p>You may want to use a redirect on port 80 to 443, although it is not required. Of course you will also need some way to login to your server, but that is out of scope of these docs.</p> <p>Check your server firewall documentation to configure your firewall to allow <code>https</code>.</p>"},{"location":"install/vm-install/vm-requirements/#hostname-ip-address-configuration","title":"Hostname / IP Address Configuration","text":"<p>It is recommended that you use a static ip address for Gluu Flex. Your server should also return the hostname for the <code>hostname</code> command, it's recommended that you add the hostname to the <code>/etc/hosts</code> file.</p>"},{"location":"install/vm-install/vm-requirements/#file-descriptor-configuration-fd","title":"File Descriptor Configuration (FD)","text":"<p>Like most database and Internet servers, you must have at least 65k file descriptors. If you don't, your server will hang.</p> <p>First, check the current file descriptor limit using command below. If the existing FD limit exceeds 65535, then you're good.</p> <pre><code># cat /proc/sys/fs/file-max\n</code></pre> <p>If FD limit is less than 65535 (e.g. 1024), then follow the steps below to increase the value.</p> <p>1) Set soft and hard limits by adding the following lines in the <code>/etc/security/limits.conf</code> file</p> <pre><code>* soft nofile 65535\n* hard nofile 262144\n</code></pre> <p>2) Add the following lines to <code>/etc/pam.d/login</code> if not already present</p> <pre><code>session required pam_limits.so\n</code></pre> <p>3) Increase the FD limit in <code>/proc/sys/fs/file-max</code></p> <pre><code>echo 65535 &gt; /proc/sys/fs/file-max**\n</code></pre> <p>4) Use the <code>ulimit</code> command to set the FD limit to the hard limit specified in <code>/etc/security/limits.conf</code>. If setting to hard limit doesn't work, then try to set it to the soft limit.</p> <pre><code>ulimit -n 262144\n</code></pre> <p>5) Restart the system</p>"},{"location":"openbanking/","title":"Gluu Open Banking Identity Platform","text":""},{"location":"openbanking/#overview","title":"Overview","text":"<p>The Gluu Open Banking Identity Platform is a specific profile of the Gluu Server that is packaged and configured for certain use cases:  </p> <ul> <li>Dynamic Client Registration using software statements  </li> <li>Payment Authorization  </li> <li>Identity - eKYC  </li> <li>Client Initiated Authentication (mobile/out-of-band)  </li> </ul> <p>Other services needed by enterprises--but not by banks--have been disabled. The goal is to reduce the security surface area to make the platform easy to deploy, easy to keep up to date, and easy to rollout new features with zero downtime.</p> <p>This is a cloud-native distribution. Cloud-native is essential for auto-scaling, high availability, and operational automation. For development and testing we also support its VM distribution, where the Installation Section has more details about it.</p> <p>This distribution of Gluu is based on the Linux Foundation Janssen Project at the Linux Foundation, the most certified OpenID Platform available.</p>"},{"location":"openbanking/#components","title":"Components","text":"<ul> <li>Open Banking OpenID Provider: Based on the Janssen Auth-Server, this internet-facing component provides the FAPI OpenID Connect API for dynamic  client registration, transaction authorization, and CIBA.</li> <li>Config API: Service which configures the OpenID Provider. The Client must present an access token authorized by a trusted issuer with certain scopes.  </li> <li>Cloud Database: Database used to store configuration, client metadata, tokens, and other information required for the operation of the OpenID Provider.</li> <li>Open Banking API Gateway: An Internet facing gateway for the core open banking API, should enforce the presence of a token with certain scopes.</li> <li>Open Banking API: The core banking API.</li> <li>Internal Authentication and Consent Service: An OpenID Provider, SAML IDP, or another authentication service that provides access to actual customer information. This service may handle the consent, or delegate consent to another service.</li> <li>User Accounts: A database where the user account information is held</li> <li>Bank Regulatory Directory: This is hosted by the federation operator which publishes public key material and other metadata about participants in the open  banking ecosystem.</li> <li>Fintech / Payment Processor: A service that wants to call the Open Banking API or to get data or to process a payment.  </li> </ul>"},{"location":"openbanking/#pki-infrastructure","title":"PKI infrastructure","text":""},{"location":"openbanking/#cloud-native-architecture","title":"Cloud-Native Architecture","text":""},{"location":"openbanking/configuration-instructions/","title":"Configuration Instructions","text":""},{"location":"openbanking/configuration-instructions/#generateinstall-keys-and-certs-for-gluu-open-banking-identity-platform","title":"Generate/install keys and certs for Gluu Open Banking Identity Platform","text":"<p>This section covers details about setting up the keys and certificates in Cloud-Native distribution.</p> <ul> <li>For MTLS keys, see the document that demonstrates enabling mTLS in nginx ingress.</li> </ul> <p>Remember, MTLS is needed not only for the TPPs to call the authorization and token endpoints for OpenID Connect flows, but also by clients that are calling the configuration API.</p>"},{"location":"openbanking/configuration-instructions/#addupdate-custom-scripts","title":"Add/Update Custom Scripts:","text":"<p>To add or update custom scripts, you can use either <code>jans-cli</code> or <code>curl</code>. </p> <ul> <li> <p><code>jans-cli</code> in interactive mode, <code>option 13</code> enables you to manage custom scripts. For more info, see the docs.</p> </li> <li> <p><code>jans-cli</code> in command line argument mode is more conducive to scripting and automation. To display the available operations for custom scripts, use <code>config-cli.py --info CustomScripts</code>. See the docs for more info.</p> </li> <li> <p>To use <code>curl</code> see these docs</p> </li> </ul> <p>Note: If using VM installation you can normally find <code>jans-cli.py</code> in the <code>/opt/jans/jans-cli/</code> folder. </p>"},{"location":"openbanking/curl/","title":"Managing scripts with CURL","text":""},{"location":"openbanking/curl/#curl-prerequisites","title":"Curl Prerequisites","text":"<ul> <li>Gluu open banking distribution</li> <li>client-id</li> <li>client-secret</li> <li>client certificate</li> <li>client key</li> </ul>"},{"location":"openbanking/curl/#getting-the-prerequisites","title":"Getting the prerequisites","text":"<ol> <li> <p>Get a client id  and its associated password. Here, we will use the client id and secret created for config-api.      <pre><code>TESTCLIENT=$(kubectl get cm cn -n &lt;namespace&gt; --template={{.data.jca_client_id}})\nTESTCLIENTSECRET=$(kubectl get secret cn -n &lt;namespace&gt; --template={{.data.jca_client_pw}} | base64 -d)\n</code></pre></p> </li> <li> <p><code>client.crt</code> and <code>client.key</code> are the certificate and key files respectively for MTLS.</p> <p>Use your <code>ca.crt</code> and <code>ca.key</code> that was provided during setup to generate as many client certificates and keys as needed.</p> <p>If you have an existing helm deployment, you can retrieve <code>ca.crt</code> and <code>ca.key</code> using the following commands: <pre><code>kubectl get secret cn -n &lt;namespace&gt; --template={{.data.ssl_ca_cert}} | base64 -d &gt; ca.crt\nkubectl get secret cn -n &lt;namespace&gt; --template={{.data.ssl_ca_key}} | base64 -d &gt; ca.key\n</code></pre></p> </li> <li> <p>Generate client.crt and client.key files:     <pre><code>openssl req -new -newkey rsa:4096 -keyout client.key -out client.csr -nodes -subj '/CN=Openbanking'\nopenssl x509 -req -sha256 -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out client.crt\n</code></pre></p> </li> </ol>"},{"location":"openbanking/curl/#curl-operations","title":"CURL operations","text":"<ol> <li> <p>The curl commands to list, add, or update custom script require a token, so first call the token endpoint to get the token using:</p> <pre><code>curl -u $TESTCLIENT:$TESTCLIENTSECRET https://&lt;FQDN&gt;/jans-auth/restv1/token -d  \"grant_type=client_credentials&amp;scope=https://jans.io/oauth/config/scripts.readonly\" --cert client.crt --key client.key\n</code></pre> <p>Example:</p> <pre><code>curl -u '1801.bdfae945-b31d-4d60-8e47-16518153215:rjHoLfjfsv2G2qzGEasd1651813aIXvCi61NU' https://bank.gluu.org/jans-auth/restv1/token -d  \"grant_type=client_credentials&amp;scope=https://jans.io/oauth/config/scripts.readonly\" --cert apr22.crt --key apr22.key\n{\"access_token\":\"ad34ac-8f2d-4bec-aed3-343adasda2\",\"scope\":\"https://jans.io/oauth/config/scripts.readonly\",\"token_type\":\"bearer\",\"expires_in\":299}\n</code></pre> </li> <li> <p>Save the <code>access_token</code> for use in subsequent commands.</p> </li> <li> <p>Use different scope values as per the requirement:</p> <ol> <li> <p>View scripts information: https://jans.io/oauth/config/scripts.readonly</p> </li> <li> <p>Manage scripts-related information: https://jans.io/oauth/config/scripts.write</p> </li> <li> <p>Delete scripts-related information: https://jans.io/oauth/config/scripts.delete</p> </li> </ol> </li> <li> <p>Use the obtained access token to perform further operations on custom scripts as given in subsequent text:</p> <ol> <li> <p>Use the following command to display details of all the available custom scripts:</p> <pre><code>curl -X GET https://&lt;FQDN&gt;/jans-config-api/api/v1/config/scripts -H \"Accept: application/json\" -H \"Authorization:Bearer &lt;access_token&gt;\" -H \"Content-Type: application/json\"\n</code></pre> <p>Example:</p> <pre><code>curl -X GET https://bank.gluu.org/jans-config-api/api/v1/config/scripts -H \"Accept: application/json\" -H \"Authorization:Bearer ad34ac-8f2d-4bec-aed3-343adasda2\" -H \"Content-Type: application/json\"\n</code></pre> </li> <li> <p>The following command will add a new custom script (Obtain token with write scope) and if it is successful it will display the added script in JSON format. The scriptformat.json file has script details according to the custom script schema. It should have the entire script inside the scriptformat.json as a string value under the script field. Converting a multiline script into a string requires converting newlines into \\n. So curl is not a suitable choice for adding new script, jans-cli is a better option.    </p> <pre><code>curl -X POST \"https://&lt;FQDN&gt;/jans-config-api/api/v1/config/scripts\" -H  \"Accept: application/json\" -H \"Authorization:Bearer &lt;access_token&gt;\" -H \"Content-Type: application/json\" --data @/home/user/scriptformat.json\n</code></pre> <p>Example:</p> <pre><code>curl -X POST \"https://bank.gluu.org/jans-config-api/api/v1/config/scripts\" -H  \"Accept: application/json\" -H \"Authorization:Bearer ad34ac-8f2d-4bec-aed3-343adasda2\" -H \"Content-Type: application/json\" --data @/home/user/scriptformat.json\n</code></pre> </li> </ol> </li> </ol>"},{"location":"openbanking/install-cn/","title":"Cloud-Native","text":""},{"location":"openbanking/install-cn/#system-requirements","title":"System Requirements","text":"<p>Use the listing below for a detailed estimation of the minimum required resources. The table contains the default resources recommendation per service. Depending on the use of each service the resources need may increase or decrease.</p> Service CPU Unit RAM Disk Space Processor Type Required Auth-server 2.5 2.5GB N/A 64 Bit Yes config - job 0.5 0.5GB N/A 64 Bit Yes on fresh installs persistence - job 0.5 0.5GB N/A 64 Bit Yes on fresh installs nginx 1 1GB N/A 64 Bit Yes if not ALB or Istio config-api 1 1GB N/A 64 Bit No"},{"location":"openbanking/install-cn/#installation","title":"Installation","text":""},{"location":"openbanking/install-cn/#install-using-helmproduction-ready","title":"Install using Helm(production-ready)","text":"<ul> <li> <p>The below certificates and keys are needed to complete the installation.</p> Certificate / key Description OB Issuing CA Used in nginx as a certificate authority OB Root CA Used in nginx as a certificate authority OB Signing CA Used in nginx as a certificate authority OB AS Transport key Used for mTLS. This will also be added to the JVM OB AS Transport crt Used for mTLS. This will also be added to the JVM OB AS signing crt Added to the JVM. Used in SSA Validation OB AS signing key Added to the JVM. Used in SSA Validation OB transport truststore Used in SSA Validation. Generated from OB Root CA nd Issuing CA </li> <li> <p>Based on the provider/platform you're using, you can follow the docs to install your platform prerequistes, nginx-ingress, and the yaml changes needed in <code>override.yaml</code> based on the Gluu persistence choosed.</p> </li> <li> <p>To enable mTLS in ingress-nginx, add the following to your <code>override.yaml</code>:       <pre><code>nginx-ingress:\n  ingress:\n    additionalAnnotations:\n      nginx.ingress.kubernetes.io/auth-tls-verify-client: \"optional\"\n      nginx.ingress.kubernetes.io/auth-tls-secret: \"gluu/tls-ob-ca-certificates\"\n      nginx.ingress.kubernetes.io/auth-tls-verify-depth: \"1\"\n      nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: \"true\"\n</code></pre></p> <p>Adding these annotations will enable client certificate authentication.</p> </li> <li> <p>Enable <code>authServerProtectedToken</code> and <code>authServerProtectedRegister</code>:       <pre><code>global\n  auth-server:\n    ingress:\n      authServerProtectedToken: true\n      authServerProtectedRegister: true\n</code></pre></p> </li> <li> <p>Enable HTTPS</p> <p>During fresh installation, the config-job checks if SSL certificates and keys are mounted as files. If no mounted files are found, it attempts to download SSL certificates from the FQDN supplied. If the download is successful, an empty key file is generated. If no mounted or downloaded files are found, it generates self-signed SSL certificates, CA certificates, and keys.</p> certificates and keys of interest in https Notes web_https.crt (nginx) web server certificate. This is commonly referred to as server.crt web_https.key (nginx) web server key. This is commonly referred to as server.key web_https.csr (nginx) web server certificate signing request. This is commonly referred to as server.csr web_https_ca.crt Certificate authority certificate that signed/signs the web server certificate. web_https_ca.key Certificate authority key that signed/signs the web server certificate. </li> <li> <p>Create a secret containing the OB CA certificates (issuing, root, and signing CAs) and the OB AS transport crt. For more information read here.</p> <pre><code>cat web_https_ca.crt issuingca.crt rootca.crt signingca.crt &gt;&gt; ca.crt\nkubectl create secret generic tls-ob-ca-certificates -n gluu --from-file=tls.crt=web_https.crt --from-file=tls.key=web_https.key --from-file=ca.crt=ca.crt\n</code></pre> <p>If you have an existing helm deployment, those secrets can be retrieved and then create using the following commands:</p> <pre><code>kubectl get secret cn -n gluu --template={{.data.ssl_ca_cert}} | base64 -d &gt; ca.crt\nkubectl get secret cn -n gluu --template={{.data.ssl_cert}} | base64 -d &gt; server.crt\nkubectl get secret cn -n gluu --template={{.data.ssl_key}} | base64 -d &gt; server.key\n\nkubectl create secret generic ca-secret -n gluu --from-file=tls.crt=server.crt --from-file=tls.key=server.key --from-file=ca.crt=ca.crt\n</code></pre> </li> <li> <p>Inject OBIE signed certs, keys and uri: </p> <ol> <li> <p>When using OBIE signed certificates and keys, there are  many objects that can be injected. The certificate signing pem file i.e <code>obsigning.pem</code>, the signing key i.e <code>obsigning-oajsdij8927123.key</code>, the certificate transport pem file i.e <code>obtransport.pem</code>, the transport key i.e <code>obtransport-sdfe4234234.key</code>, the transport truststore p12 i.e <code>ob-transport-truststore.p12</code>, and the jwks uri <code>https://mykeystore.openbanking.wow/xxxxx/xxxxx.jwks</code>.</p> </li> <li> <p>base64 encrypt all <code>.pem</code> and <code>.key</code> files.</p> <pre><code>cat obsigning.pem | base64 | tr -d '\\n' &gt; obsigningbase64.pem\ncat obsigning-oajsdij8927123.key | base64 | tr -d '\\n' &gt; obsigningbase64.key\ncat obtransport.pem | base64 | tr -d '\\n' &gt; obtransportbase64.pem\ncat obtransport-sdfe4234234.key | base64 | tr -d '\\n' &gt; obtransportbase64.key\n</code></pre> </li> <li> <p>Generate your transport truststore or convert it to <code>.p12</code> format. Please name it as <code>ob-transport-truststore.p12</code> </p> <pre><code>cat obissuingca.pem obrootca.pem obsigningca.pem &gt; transport-truststore.crt\nkeytool -importcert -file transport-truststore.crt -keystore ob-transport-truststore.p12 -alias obkeystore\n</code></pre> </li> <li> <p>base64 encrypt the <code>ob-transport-truststore.p12</code></p> <pre><code>cat ob-transport-truststore.p12 | base64 | tr -d '\\n' &gt; obtransporttruststorebase64.pem\n</code></pre> </li> <li> <p>Add the kid as the alias for the JKS used for the OB AS external signing crt. This is a kid value.Used in SSA Validation, kid used while encoding a JWT sent to token URL i.e XkwIzWy44xWSlcWnMiEc8iq9s2G. This kid value should exist inside the jwks uri endpoint.</p> </li> <li> <p>Add those values to <code>override.yaml</code>: <pre><code>  global:\n    # -- Open banking external signing jwks uri. Used in SSA Validation.\n    cnObExtSigningJwksUri: \"&lt;JWKS URI&gt;\"\n    # -- Open banking external signing jwks AS certificate authority string. Used in SSA Validation. This must be encoded using base64.. Used when `.global.cnObExtSigningJwksUri` is set.\n    cnObExtSigningJwksCrt: &lt;base64 string in obsigningbase64.pem&gt;\n    # -- Open banking external signing jwks AS key string. Used in SSA Validation. This must be encoded using base64. Used when `.global.cnObExtSigningJwksUri` is set.\n    cnObExtSigningJwksKey: &lt;base64 string in obsigningbase64.key&gt;\n    # -- Open banking external signing jwks AS key passphrase to unlock provided key. This must be encoded using base64. Used when `.global.cnObExtSigningJwksUri` is set.\n    cnObExtSigningJwksKeyPassPhrase: &lt;base64 string passphrase of obsigningbase64.key&gt;\n    # -- Open banking external signing AS Alias. This is a kid value. Used in SSA Validation, kid used while encoding a JWT sent to token URL i.e. XkwIzWy44xWSlcWnMiEc8iq9s2G\n    cnObExtSigningAlias: &lt;Alias of the entry inside the keystore ob-ext-signing.jks&gt;\n    # -- Open banking signing AS kid to force the AS to use a specific signing key. i.e. Wy44xWSlcWnMiEc8iq9s2G\n    cnObStaticSigningKeyKid: &lt;Alias of the entry inside the keystore ob-ext-signing.jks&gt;\n    # -- Open banking AS transport crt. Used in SSA Validation. This must be encoded using base64.\n    cnObTransportCrt: &lt;base64 string in obtransportbase64.pem&gt;\n    # -- Open banking AS transport key. Used in SSA Validation. This must be encoded using base64.\n    cnObTransportKey: &lt;base64 string in obtransportbase64.key&gt;\n    # -- Open banking AS transport key passphrase to unlock AS transport key. This must be encoded using base64.\n    cnObTransportKeyPassPhrase: &lt;base64 string passphrase in obtransportbase64.key&gt;\n    # -- Open banking transport Alias used inside the JVM.\n    cnObTransportAlias: \"\"\n    # -- Open banking AS transport truststore crt. This is normally generated from the OB issuing CA, OB Root CA and Signing CA. Used when .global.cnObExtSigningJwksUri is set. Used in SSA Validation. This must be encoded using base64.\n    cnObTransportTrustStore: &lt;base64 string in obtransporttruststorebase64.pem&gt;\n</code></pre></p> </li> </ol> </li> <li> <p>Please note that the password for the keystores created can be fetched by executing the following command:</p> <p><code>kubectl get secret cn -n gluu --template={{.data.auth_openid_jks_pass}} | base64 -d</code></p> <p>The above password is needed in custom scripts such as the <code>Client Registration script</code></p> </li> <li> <p>After finishing all the tweaks to the <code>override.yaml</code> file, run <code>helm install</code> or <code>helm upgrade</code> if <code>Gluu</code> is already installed</p> <pre><code>helm repo add gluu-flex https://docs.gluu.org/charts\nhelm repo update\nhelm install gluu gluu-flex/gluu -n gluu -f override.yaml\n</code></pre> </li> </ul>"},{"location":"openbanking/install-cn/#install-on-microk8sdevelopmenttesting","title":"Install on microK8s(development/testing)","text":"<p>On your Ubuntu VM, run the following commands:</p> <pre><code>sudo su -\nwget https://raw.githubusercontent.com/GluuFederation/flex/main/automation/startopenabankingdemo.sh &amp;&amp; chmod u+x startopenabankingdemo.sh &amp;&amp; ./startopenabankingdemo.sh\n</code></pre> <p>Running this script will install the Gluu Open Banking Platform with mTLS enabled along with the mysql backend as a persistence.</p> <p>After running the script, you can go ahead and test the setup.</p>"},{"location":"openbanking/install-cn/#testing-the-setup","title":"Testing the setup","text":"<p>After successful installation, you can access and test the Gluu Open Banking Platform using either curl or Jans-CLI.</p>"},{"location":"openbanking/install-cn/#changing-the-signing-key-kid-for-the-as-dynamically","title":"Changing the  signing key kid for the AS dynamically","text":"<ol> <li> <p>Get a client id and its associated password. We will use the jans-config-api client id and secret</p> <pre><code>TESTCLIENT=$(kubectl get cm cn -n gluu --template={{.data.jca_client_id}})\nTESTCLIENTSECRET=$(kubectl get secret cn -n gluu --template={{.data.jca_client_pw}} | base64 -d)\n</code></pre> </li> <li> <p>Get a token. To pass mTLS, we will use client.crt and client.key:</p> <pre><code>curl -k -u $TESTCLIENT:$TESTCLIENTSECRET https://&lt;FQDN&gt;/jans-auth/restv1/token -d \"grant_type=client_credentials&amp;scope=https://jans.io/oauth/jans-auth-server/config/properties.write\" --cert client.crt --key client.key\n</code></pre> </li> <li> <p>Add the entry <code>staticKid</code> to force the AS to use a specific signing key. Please modify <code>XhCYDfFM7UFXHfykNaLk1aLCnZM</code> to the kid to be used:          </p> <pre><code>curl -k -X PATCH \"https://&lt;FQDN&gt;/jans-config-api/api/v1/jans-auth-server/config\" -H  \"accept: application/json\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization:Bearer 170e8412-1d55-4b19-ssss-8fcdeaafb954\" -d \"[{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/staticKid\\\",\\\"value\\\":\\\"XhCYDfFM7UFXHfykNaLk1aLCnZM\\\"}]\"\n</code></pre> </li> <li> <p>Perform a rolling restart for the auth-server and config-api deployments.</p> <pre><code>kubectl rollout restart deployment &lt;gluu-release-name&gt;-auth-server -n gluu\nkubectl rollout restart deployment &lt;gluu-release-name&gt;-config-api -n gluu\n</code></pre> </li> </ol>"},{"location":"openbanking/install-cn/#adding-custom-scopes-upon-installation","title":"Adding custom scopes upon installation","text":"<ol> <li> <p>Download the original scopes file</p> <pre><code>wget https://raw.githubusercontent.com/JanssenProject/docker-jans-persistence-loader/master/templates/scopes.ob.ldif\n</code></pre> </li> <li> <p>Add to the file the custom scopes desired.</p> </li> <li> <p>Create a configmap with the scopes file</p> <pre><code>kubectl create cm custom-scopes -n gluu --from-file=scopes.ob.ldif\n</code></pre> </li> <li> <p>Mount the configmap in your override.yaml under <code>persistence.volumes</code> and <code>persistence.volumeMounts</code></p> <pre><code>persistence:\n    volumes:\n        - name: custom-scopes\n            configMap:\n                name: custom-scopes\n    volumeMounts:\n        - name: custom-scopes\n            mountPath: \"/app/templates/scopes.ob.ldif\"\n            subPath: scopes.ob.ldif\n</code></pre> </li> <li> <p>Run helm install or helm upgrade if Gluu has already been installed.</p> </li> </ol>"},{"location":"openbanking/install-vm/","title":"Installing and Configuring Gluu Open Banking Identity Platform on a VM","text":""},{"location":"openbanking/install-vm/#vm-based-distribution","title":"VM Based Distribution","text":"<p>This section covers details on installing Gluu Openbanking Indentity Platform 1.0 in a VM. We recommend the Cloud Native Distribution for production environment. However, for development and testing VM distribution will be easier.</p>"},{"location":"openbanking/install-vm/#vm-preparation","title":"VM Preparation","text":"<p>Prepare a VM with the following minimum specs:</p> <ul> <li>4 GB RAM</li> <li>2 GB swap space</li> <li>2 CPU units</li> <li>50 GB disk space</li> </ul> <p>The VM must have a static IP address and a resolvable hostname. A fully qualified domain name (FQDN) is required for production deployments.</p> <p>The Gluu Open Banking Identity Platform can be installed on main Linux distributions.</p>"},{"location":"openbanking/install-vm/#installation","title":"Installation","text":"<p>Download the installer (<code>install.py</code>) <pre><code>wget https://raw.githubusercontent.com/JanssenProject/jans/main/jans-linux-setup/jans_setup/install.py\n</code></pre> Execute the installer:  <pre><code>sudo python3 install.py --profile openbanking\n</code></pre></p> <p>The installation script will install required tools, programs, packages and then it will prompt the user for setup instructions. Answer the following questions:</p>"},{"location":"openbanking/install-vm/#certificate-generation-setup","title":"Certificate Generation Setup","text":"Prompt Description Enter IP Address The IP address for the VM. Use an IP address assigned to one of this server's network interfaces (usage of addresses assigned to loopback interfaces is not supported) Enter Hostname The hostname for the VM. Recommended to be a FQDN Enter your city or locality Used to generate X.509 certificates. Enter your state or province two letter code Used to generate X.509 certificates. Enter two letter Country Code Used to generate X.509 certificates. Enter Organization Name Used to generate X.509 certificates. Enter email address for support at your organization Used to generate X.509 certificates."},{"location":"openbanking/install-vm/#architecture-setup","title":"Architecture Setup","text":"Prompt Description Enter maximum RAM for applications in MB Maximum RAM Size in MB RDBM Type Backend type. Currently only MySQL is supported Use remote RDBM Select if connecting to an external MySQL server Enter Openbanking static kid The fallback key when key is not passed in requests (as required by Openbanking) Use external key If yes, link to an external Open Banking key file <p>Before the last question installer process will display the selected choices and confirm to proceed.</p> Prompt Description Proceed with these values [Y/n] Confirmation before setting up the services."},{"location":"openbanking/install-vm/#uninstalling-janssen-server","title":"Uninstalling Janssen Server","text":"<p>Execute the installation script with the <code>-uninstall</code> argument.</p>"},{"location":"openbanking/install-vm/#mtls-configuration","title":"MTLS Configuration","text":"<p>For MTLS, OBIE-issued (for openbanking UK) certificates and keys should be used. The following discussion assumes that the file <code>ca.crt</code> has a CA certificate and <code>ca.key</code> has a CA private key.  Following command generates self-signed ca.crt and ca.key:  <pre><code>openssl req -newkey rsa:2048 -nodes -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.crt\n</code></pre></p> <p>The following set of commands is an example of how to create the server\u2019s private key (<code>server.key</code>), Certificate Signing Request (CSR) (<code>server.csr</code>) and certificate (<code>server.crt)</code>:</p> <pre><code>openssl genrsa -out server.key 2048\nopenssl req -new -key server.key -out server.csr\nopenssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -set_serial 100 -days 365 -outform PEM -out server.crt\n</code></pre> <p>Now, store the server key (<code>server.key</code>) and certificate (<code>server.crt</code>) file in some location (preferably inside <code>/etc/certs</code>) and set its path in the apache <code>.conf</code> file (<code>/etc/apache2/sites-enabled/https_jans.conf</code>) with  <code>SSLCertificateFile</code> and  <code>SSLCertificateKeyFile</code> directives:</p> <pre><code>SSLCertificateFile /etc/certs/bankgluu/server.crt\nSSLCertificateKeyFile /etc/certs/bankgluu/server.key\n</code></pre> <p>The path of CA certificate file should be set to SSLCACertificateFile directive as:</p> <pre><code>SSLCACertificateFile /etc/apache2/certs/matls.pem    \n</code></pre> <p>The following commands will create client\u2019s private key (<code>client.key</code>), CSR (<code>client.csr</code>) and certificate (<code>client.crt</code>):</p> <pre><code>openssl genrsa -out client.key 2048\nopenssl req -new -key client.key -out client.csr\nopenssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -set_serial 101 -days 365 -outform PEM -out client.crt\n</code></pre> <p>The following command will create a client certification chain (private key, public certificate and ca certificate) into the file <code>client.pem</code>:</p> <pre><code>cat client.key client.crt ca.crt &gt;client.pem\n</code></pre> <p>Use this pem file to create JWKs for the clients (if required). To create a JWK, you can use a free utility published at https://mkjwk.org. Or you can download the command-line tool from GitHub. There are numerous other online PEM-to-JWKS tools available like JWKConvertFunctions. We may need to add/update some data in these generated JWKs.</p> <p>Note</p> <p>It is important to give different values of the Common Name field (\u201cCommon Name (e.g. server FQDN or YOUR name) []\u201d) for the CA, Server and  clients. Other fields may have common values but the same values for Common Name of all certificates result in certificate verification failing at runtime.</p>"},{"location":"openbanking/install-vm/#importing-the-ca-certificate-in-jvm-truststore-and-signing-encryption-keys-into-auth-server-keystore","title":"Importing the CA certificate in JVM truststore and signing, encryption keys into auth-Server keystore:","text":"<p>The command line utility keytool is installed with JDK, it can be used to import the CA certificate in JVM truststore (/opt/jre/lib/security/cacerts) and  signing,encryption keys into the jans-auth server\u2019s keystore(/etc/certs/jans-auth-keys.jks).</p> <pre><code>./keytool -importcert -file /path/to/file/filename.cer -keystore /etc/certs/jans-auth-keys.jks -alias yourkeystore\n\n./keytool -importkeystore -srckeystore /path/to/file/filename.jks -srcstoretype JKS -destkeystore /opt/jre/lib/security/cacerts -deststoretype JKS\n</code></pre>"},{"location":"openbanking/install-vm/#accessing-the-platform","title":"Accessing the Platform","text":"<p>After successful installation, access the Gluu Open Banking Platform using either jans-cli or curl.</p>"},{"location":"openbanking/jans-cli/","title":"Managing Scripts with the jans-cli","text":""},{"location":"openbanking/jans-cli/#introduction","title":"Introduction","text":"<p>Jans-cli is a command line interface to configure the Janssen software and it supports both interactive and command-line options for configuration. </p> <p>Jans-cli calls the Jans-Config-API to perform various operations. During Janssen installation, the installer creates a client to use Jans Config API. Jans-cli uses this client to call Jans Config API.</p>"},{"location":"openbanking/jans-cli/#supported-operations","title":"Supported Operations","text":"<p>Jans-cli supports the following six operations on custom scripts: </p> <ol> <li><code>get-config-scripts</code>: gets a list of custom scripts.</li> <li><code>post-config-scripts</code>: adds a new custom script.</li> <li><code>put-config-scripts</code>: updates a custom script.</li> <li><code>get-config-scripts-by-type</code>: requires an argument <code>--url-suffix TYPE: &lt;&gt;</code>.     You can specify the following types:      <code>PERSON_AUTHENTICATION</code>, <code>INTROSPECTION</code>, <code>RESOURCE_OWNER_PASSWORD_CREDENTIALS</code>, <code>APPLICATION_SESSION</code>, <code>CACHE_REFRESH</code>, <code>UPDATE_USER</code>, <code>USER_REGISTRATION</code>, <code>CLIENT_REGISTRATION</code>, <code>ID_GENERATOR</code>, <code>UMA_RPT_POLICY</code>, <code>UMA_RPT_CLAIMS</code>, <code>UMA_CLAIMS_GATHERING</code>, <code>CONSENT_GATHERING</code>, <code>DYNAMIC_SCOPE</code>, <code>SPONTANEOUS_SCOPE</code>, <code>END_SESSION</code>, <code>POST_AUTHN</code>, <code>SCIM</code>, <code>CIBA_END_USER_NOTIFICATION</code>, <code>PERSISTENCE_EXTENSION</code>, <code>IDP</code>, or <code>UPDATE_TOKEN</code>. </li> <li><code>get-config-scripts-by-inum</code>: requires an argument <code>--url-suffix inum: &lt;&gt;</code></li> <li><code>delete-config-scripts-by-inum</code>: requires an argument <code>--url-suffix inum: &lt;&gt;</code></li> </ol>"},{"location":"openbanking/jans-cli/#using-jans-cli","title":"Using jans-cli","text":"<ol> <li> <p>Download <code>jans-cli.pyz</code>. This package can be built manually too.</p> </li> <li> <p>Get a client id  and its associated password. Here, we will use the client id and secret created for config-api.      <pre><code>TESTCLIENT=$(kubectl get cm cn -n &lt;namespace&gt; --template={{.data.jca_client_id}})\nTESTCLIENTSECRET=$(kubectl get secret cn -n &lt;namespace&gt; --template={{.data.jca_client_pw}} | base64 -d)\n</code></pre></p> </li> <li> <p><code>client.crt</code> and <code>client.key</code> are the certificate and key files respectively for MTLS. We need to pass this certificate, key as the token endpoint is under MTLS and jans-cli obtains an appropriate token before performing the operation. </p> <p>Use your <code>ca.crt</code> and <code>ca.key</code> that was provided during setup to generate as many client certificates and keys for operating jans-cli as needed.</p> <p>If you have an existing helm deployment, you can retrieve <code>ca.crt</code> and <code>ca.key</code> using the following commands: <pre><code>kubectl get secret cn -n &lt;namespace&gt; --template={{.data.ssl_ca_cert}} | base64 -d &gt; ca.crt\nkubectl get secret cn -n &lt;namespace&gt; --template={{.data.ssl_ca_key}} | base64 -d &gt; ca.key\n</code></pre></p> </li> <li> <p>Generate client.crt and client.key files:     <pre><code>openssl req -new -newkey rsa:4096 -keyout client.key -out client.csr -nodes -subj '/CN=Openbanking'\nopenssl x509 -req -sha256 -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out client.crt\n</code></pre></p> </li> <li> <p>Run the jans-cli in interactive mode and try it out: </p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --CC client.crt --CK client.key\n</code></pre> </li> </ol>"},{"location":"openbanking/jans-cli/#examples","title":"Examples","text":"<p>The <code>post-config-scripts</code> and <code>put-config-scripts</code> require various details about the scripts. The following command gives the basic schema of the custom scripts to pass to these operations. </p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --schema /components/schemas/CustomScript \n</code></pre> <p>The output of the above command will be similar as: </p> <pre><code>{\n  \"dn\": null,\n  \"inum\": null,\n  \"name\": \"string\",\n  \"aliases\": [],\n  \"description\": null,\n  \"script\": \"string\",\n  \"scriptType\": \"IDP\",\n  \"programmingLanguage\": \"PYTHON\",\n  \"moduleProperties\": {\n    \"value1\": null,\n    \"value2\": null,\n    \"description\": null\n  },\n  \"configurationProperties\": {\n    \"value1\": null,\n    \"value2\": null,\n    \"description\": null,\n    \"hide\": true\n  },\n  \"level\": \"integer\",\n  \"revision\": 0,\n  \"enabled\": false,\n  \"scriptError\": {\n    \"raisedAt\": null,\n    \"stackTrace\": null\n  },\n  \"modified\": false,\n  \"internal\": false\n}\n</code></pre> <p>To add or modify a script first, we need to create the script's python file (e.g. /tmp/sample.py) and then create a JSON file by following the above schema and update the fields as :</p> <p>/tmp/sample.json <pre><code>{\n  \"name\": \"mySampleScript\",\n  \"aliases\": null,\n  \"description\": \"This is a sample script\",\n  \"script\": \"_file /tmp/sample.py\",\n  \"scriptType\": \"PERSON_AUTHENTICATION\",\n  \"programmingLanguage\": \"PYTHON\",\n  \"moduleProperties\": [\n    {\n      \"value1\": \"mayvalue1\",\n      \"value2\": \"myvalues2\",\n      \"description\": \"description for property\"\n    }\n  ],\n  \"configurationProperties\": null,\n  \"level\": 1,\n  \"revision\": 0,\n  \"enabled\": false,\n  \"scriptError\": null,\n  \"modified\": false,\n  \"internal\": false\n}\n</code></pre></p>"},{"location":"openbanking/jans-cli/#add-a-new-custom-script-update-and-delete-existing-custom-script","title":"Add a new custom script, update and delete existing custom script","text":"<p>The following command will add a new script with details given in /tmp/sampleadd.json file. The jans-cli will generate a unique inum of this new script if we skip inum in the json file.</p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --operation-id post-config-scripts --data /tmp/sampleadd.json \\\n--CC client.crt --CK client.key\n</code></pre> <p>The following command will modify/update the existing script with details given in /tmp/samplemodify.json file. Remember to set inum field in samplemodify.json to the inum of the script to update. </p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --operation-id put-config-scripts --data /tmp/samplemodify.json \\\n--CC client.crt --CK client.key\n</code></pre> <p>To delete a custom script by its inum, use the following command: </p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --operation-id delete-config-scripts-by-inum --url-suffix inum:HKM-TEST \\\n--CC client.crt --CK client.key\n</code></pre>"},{"location":"openbanking/jans-cli/#print-details-of-existing-custom-scripts","title":"Print details of existing custom scripts","text":"<p>These commands to print the details are important, as using them we can get the inum of these scripts which is required to perform update or delete operations.</p> <ol> <li> <p>The following command will display the details of all the existing custom scripts. This will be helpful to get the inum of scripts to perform the update and delete operation.</p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --operation-id get-config-scripts --CC client.crt --CK client.key\n</code></pre> </li> <li> <p>The following command displays the details of selected custom script (by inum). </p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --operation-id get-config-scripts-by-inum --url-suffix inum:_____  \\\n--CC client.crt --CK client.key\n</code></pre> </li> <li> <p>Use the following command to display the details of existing custom scripts of a given type (for example: INTROSPECTION).</p> <pre><code>python3 jans-cli-linux-amd64.pyz --host &lt;FQDN&gt; --client-id $TESTCLIENT --client_secret $TESTCLIENTSECRET --operation-id get-config-scripts-by-type --url-suffix type:INTROSPECTION \\\n--CC client.crt --CK client.key\n</code></pre> </li> </ol>"},{"location":"openbanking/par-jarm/","title":"Pushed Authorization Requests(PAR) and JWT Secured Authorization Response Mode(JARM)","text":"<p>This section covers details of two important features required by the open banking ecosystem. The latest Gluu Open Banking Identity Platform  supports PAR and JARM specifications. These two features are bundled in the installation so when you install the Gluu Open Banking Identity Platform the Authorization  Server(AS) will support these features by default. The older/existing installation may require updating the WAR/ image. </p> <p>Moreover, these features are also FAPI certified for Brazil Open Banking (Based on FAPI 1 Advanced Final).</p>"},{"location":"openbanking/par-jarm/#pushed-authorization-requests-par","title":"Pushed Authorization Requests-PAR:","text":"<p>PAR are handled by an additional endpoint of Authorization Server (AS). Clients POST their authorization parameters to this endpoint,  in return the clients gets a reference (named as request URI value) that will be used in further authorization requests by the client.  PAR enables the OAuth clients to push the payload of an authorization request directly to the authorization server in exchange for a  request URI value. This request URI value is used as a reference to the authorization request payload data in a subsequent call to the  authorization endpoint.</p> <pre><code>We can set different PAR lifetimes for different clients. PAR lifetime will be 600 seconds if it is unspecified.\n</code></pre> <p>We have two new configuration properties for PAR:</p> <pre><code>*     parEndpoint - String, corresponds to pushed_authorization_request_endpoint \n      as defined by specification.\n*     requirePar - Boolean parameter indicating whether the only means of \n      initiating an authorization request the client is allowed to use is a \n      pushed authorization request. If omitted, the default value is \"false\".\n</code></pre> <p>Moreover, there is a new client configuration:</p> <pre><code>*     parLifetime: An integer parameter representing the lifetime (in seconds) of \n      the pushed authorization request.\n</code></pre>"},{"location":"openbanking/par-jarm/#jwt-secured-authorization-response-mode-jarm","title":"JWT Secured Authorization Response Mode-JARM","text":"<p>This is a new JWT-based response mode to encode authorization responses known as JARM, (see Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0).  Here clients are enabled to request the transmission of the authorization response parameters along with additional data in JWT format.  This mechanism enhances the security of the standard authorization response since it adds support for signing and encryption,sender authentication,  and audience restriction. It also provides protection from replay, credential leakage, and mix-up attacks. It can be combined with any response type.</p> <p>For this feature AS supports new response modes (<code>query.jwt</code>,<code>fragment.jwt</code>,<code>form_post.jwt</code>,<code>jwt</code>) and additional signing, encryption algorithms. </p>"},{"location":"reference/","title":"Overview","text":"<p>The Gluu Flex reference guide includes technical references for Flex-specific components and deployments. References for Janssen components, including database references, can be found in the Janssen Project documentation.</p> <p></p>","tags":["administration","reference"]},{"location":"reference/json-config/","title":"Index","text":""},{"location":"reference/json-config/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"reference/json-config/properties/","title":"Index","text":""},{"location":"reference/json-config/properties/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"reference/json-config/properties/casa-properties/","title":"Casa properties","text":""},{"location":"reference/json-config/properties/casa-properties/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"reference/json-config/properties/casaconfig-properties/","title":"Casaconfig properties","text":""},{"location":"reference/json-config/properties/casaconfig-properties/#where-is-this-content","title":"Where is this content?","text":"<p>The Gluu Flex documentation is a work in progress, and this document is currently a draft. Keep an eye on this page for updates.</p>"},{"location":"reference/kubernetes/","title":"Reference Guide","text":"<p>This Reference guide helps you learn about the components and architecture of Gluu Flex.</p>","tags":["administration","reference","kubernetes","architecture","components"]},{"location":"reference/kubernetes/#gluu-flex-components","title":"Gluu Flex components","text":"<ul> <li>auth-server: The OAuth Authorization Server, the OpenID Connect Provider, the UMA Authorization Server--this is the main Internet facing component of Janssen. It's the service that returns tokens, JWT's and identity assertions. This service must be Internet facing.</li> <li>auth-key-rotation: Responsible for regenerating auth-keys per x hours.</li> <li>config-api: The API to configure the auth-server and other components is consolidated in this component. This service should not be Internet-facing.</li> <li>Fido: Provides the server side endpoints to enroll and validate devices that use FIDO. It provides both FIDO U2F (register, authenticate) and FIDO 2 (attestation, assertion) endpoints. This service must be internet facing.</li> <li>SCIM: a JSON/REST API to manage user data. Use it to add, edit and update user information. This service should not be Internet facing.</li> <li>Casa: self-service web portal for end-users to manage authentication and authorization preferences for their account in a Gluu Server.</li> <li>Admin UI: The admin web portal to configure and control your Gluu server.</li> </ul>","tags":["administration","reference","kubernetes","architecture","components"]},{"location":"reference/kubernetes/#architectural-diagram-of-gluu","title":"Architectural diagram of Gluu","text":"","tags":["administration","reference","kubernetes","architecture","components"]},{"location":"reference/kubernetes/docker-admin-ui/","title":"docker-admin-ui","text":"<p>A containerized application for Gluu Admin UI frontend.</p>","tags":["administration","reference","kubernetes","docker image"]},{"location":"reference/kubernetes/docker-admin-ui/#versions","title":"Versions","text":"<p>See Releases for stable versions. For bleeding-edge/unstable version, use <code>gluufederation/admin-ui:0.0.0-nightly</code>.</p>","tags":["administration","reference","kubernetes","docker image"]},{"location":"reference/kubernetes/docker-admin-ui/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables are supported by the container:</p> <ul> <li><code>CN_CONFIG_ADAPTER</code>: The config backend adapter, can be <code>consul</code> (default), <code>kubernetes</code>, or <code>google</code>.</li> <li><code>CN_CONFIG_CONSUL_HOST</code>: hostname or IP of Consul (default to <code>localhost</code>).</li> <li><code>CN_CONFIG_CONSUL_PORT</code>: port of Consul (default to <code>8500</code>).</li> <li><code>CN_CONFIG_CONSUL_CONSISTENCY</code>: Consul consistency mode (choose one of <code>default</code>, <code>consistent</code>, or <code>stale</code>). Default to <code>stale</code> mode.</li> <li><code>CN_CONFIG_CONSUL_SCHEME</code>: supported Consul scheme (<code>http</code> or <code>https</code>).</li> <li><code>CN_CONFIG_CONSUL_VERIFY</code>: whether to verify cert or not (default to <code>false</code>).</li> <li><code>CN_CONFIG_CONSUL_CACERT_FILE</code>: path to Consul CA cert file (default to <code>/etc/certs/consul_ca.crt</code>). This file will be used if it exists and <code>CN_CONFIG_CONSUL_VERIFY</code> set to <code>true</code>.</li> <li><code>CN_CONFIG_CONSUL_CERT_FILE</code>: path to Consul cert file (default to <code>/etc/certs/consul_client.crt</code>).</li> <li><code>CN_CONFIG_CONSUL_KEY_FILE</code>: path to Consul key file (default to <code>/etc/certs/consul_client.key</code>).</li> <li><code>CN_CONFIG_CONSUL_TOKEN_FILE</code>: path to file contains ACL token (default to <code>/etc/certs/consul_token</code>).</li> <li><code>CN_CONFIG_KUBERNETES_NAMESPACE</code>: Kubernetes namespace (default to <code>default</code>).</li> <li><code>CN_CONFIG_KUBERNETES_CONFIGMAP</code>: Kubernetes configmaps name (default to <code>jans</code>).</li> <li><code>CN_CONFIG_KUBERNETES_USE_KUBE_CONFIG</code>: Load credentials from <code>$HOME/.kube/config</code>, only useful for non-container environment (default to <code>false</code>).</li> <li><code>CN_SECRET_ADAPTER</code>: The secrets' adapter, can be <code>vault</code> (default), <code>kubernetes</code>, or <code>google</code>.</li> <li><code>CN_SECRET_VAULT_VERIFY</code>: whether to verify cert or not (default to <code>false</code>).</li> <li><code>CN_SECRET_VAULT_ROLE_ID_FILE</code>: path to file contains Vault AppRole role ID (default to <code>/etc/certs/vault_role_id</code>).</li> <li><code>CN_SECRET_VAULT_SECRET_ID_FILE</code>: path to file contains Vault AppRole secret ID (default to <code>/etc/certs/vault_secret_id</code>).</li> <li><code>CN_SECRET_VAULT_CERT_FILE</code>: path to Vault cert file (default to <code>/etc/certs/vault_client.crt</code>).</li> <li><code>CN_SECRET_VAULT_KEY_FILE</code>: path to Vault key file (default to <code>/etc/certs/vault_client.key</code>).</li> <li><code>CN_SECRET_VAULT_CACERT_FILE</code>: path to Vault CA cert file (default to <code>/etc/certs/vault_ca.crt</code>). This file will be used if it exists and <code>CN_SECRET_VAULT_VERIFY</code> set to <code>true</code>.</li> <li><code>CN_SECRET_VAULT_ADDR</code>: URL of Vault (default to <code>http://localhost:8200</code>).</li> <li><code>CN_SECRET_VAULT_NAMESPACE</code>: Namespace used to access secrets (default to empty string).</li> <li><code>CN_SECRET_VAULT_KV_PATH</code>: Path to KV secrets engine (default to <code>secret</code>).</li> <li><code>CN_SECRET_VAULT_PREFIX</code>: Base prefix name used to build secret path (default to <code>jans</code>).</li> <li><code>CN_SECRET_VAULT_APPROLE_PATH</code>: Path to AppRole (default to <code>approle</code>).</li> <li><code>CN_SECRET_KUBERNETES_NAMESPACE</code>: Kubernetes namespace (default to <code>default</code>).</li> <li><code>CN_SECRET_KUBERNETES_CONFIGMAP</code>: Kubernetes secrets name (default to <code>jans</code>).</li> <li><code>CN_SECRET_KUBERNETES_USE_KUBE_CONFIG</code>: Load credentials from <code>$HOME/.kube/config</code>, only useful for non-container environment (default to <code>false</code>).</li> <li><code>CN_WAIT_MAX_TIME</code>: How long the startup \"health checks\" should run (default to <code>300</code> seconds).</li> <li><code>CN_WAIT_SLEEP_DURATION</code>: Delay between startup \"health checks\" (default to <code>10</code> seconds).</li> <li><code>GOOGLE_PROJECT_ID</code>: Google Project ID (default to empty string). Used when <code>CN_CONFIG_ADAPTER</code> or <code>CN_SECRET_ADAPTER</code> set to <code>google</code>.</li> <li><code>GOOGLE_APPLICATION_CREDENTIALS</code>: Optional JSON file (contains Google credentials) that can be injected into container for authentication. Refer to https://cloud.google.com/docs/authentication/provide-credentials-adc#how-to for supported credentials.</li> <li><code>CN_GOOGLE_SECRET_VERSION_ID</code>: Janssen secret version ID in Google Secret Manager. Defaults to <code>latest</code>, which is recommended.</li> <li><code>CN_GOOGLE_SECRET_NAME_PREFIX</code>: Prefix for Janssen secret in Google Secret Manager. Defaults to <code>jans</code>. If left <code>jans-secret</code> secret will be created.</li> <li><code>CN_GOOGLE_SECRET_MANAGER_PASSPHRASE</code>: Passphrase for Janssen secret in Google Secret Manager. This is recommended to be changed and defaults to <code>secret</code>.</li> <li><code>CN_AUTH_BASE_URL</code>: Base URL of auth server (default to empty).</li> <li><code>CN_CONFIG_API_BASE_URL</code>: Base URL of config-api server (default to empty).</li> <li><code>CN_TOKEN_SERVER_BASE_URL</code>: Base URL of token server (default to empty).</li> <li><code>CN_TOKEN_SERVER_AUTHZ_ENDPOINT</code>: Authorization endpoint at token server (default to <code>/jans-auth/authorize.htm</code>).</li> <li><code>CN_TOKEN_SERVER_TOKEN_ENDPOINT</code>: Token endpoint at token server (default to <code>/jans-auth/restv1/token</code>).</li> <li><code>CN_TOKEN_SERVER_INTROSPECTION_ENDPOINT</code>: Introspection endpoint at token server (default to <code>/jans-auth/restv1/introspection</code>).</li> <li><code>CN_TOKEN_SERVER_USERINFO_ENDPOINT</code>: User info endpoint at token server (default to <code>/jans-auth/restv1/userinfo</code>).</li> <li><code>CN_TOKEN_SERVER_CLIENT_ID</code>: Client ID registered at token server.</li> <li><code>CN_TOKEN_SERVER_CERT_FILE</code>: Path to token server certificate (default to <code>/etc/certs/token_server.crt</code>).</li> <li><code>CN_PERSISTENCE_TYPE</code>: Persistence backend being used (one of <code>sql</code>, <code>spanner</code>, <code>couchbase</code>, or <code>hybrid</code>; default to <code>sql</code>).</li> <li><code>CN_HYBRID_MAPPING</code>: Specify data mapping for each persistence (default to <code>\"{}\"</code>). Note this environment only takes effect when <code>CN_PERSISTENCE_TYPE</code> is set to <code>hybrid</code>. See hybrid mapping section for details.</li> <li><code>CN_COUCHBASE_URL</code>: Address of Couchbase server (default to <code>localhost</code>).</li> <li><code>CN_COUCHBASE_USER</code>: Username of Couchbase server (default to <code>admin</code>).</li> <li><code>CN_COUCHBASE_CERT_FILE</code>: Couchbase root certificate location (default to <code>/etc/certs/couchbase.crt</code>).</li> <li><code>CN_COUCHBASE_PASSWORD_FILE</code>: Path to file contains Couchbase password (default to <code>/etc/jans/conf/couchbase_password</code>).</li> <li><code>CN_COUCHBASE_CONN_TIMEOUT</code>: Connect timeout used when a bucket is opened (default to <code>10000</code> milliseconds).</li> <li><code>CN_COUCHBASE_CONN_MAX_WAIT</code>: Maximum time to wait before retrying connection (default to <code>20000</code> milliseconds).</li> <li><code>CN_COUCHBASE_SCAN_CONSISTENCY</code>: Default scan consistency; one of <code>not_bounded</code>, <code>request_plus</code>, or <code>statement_plus</code> (default to <code>not_bounded</code>).</li> <li><code>CN_COUCHBASE_BUCKET_PREFIX</code>: Prefix for Couchbase buckets (default to <code>jans</code>).</li> <li><code>CN_COUCHBASE_TRUSTSTORE_ENABLE</code>: Enable truststore for encrypted Couchbase connection (default to <code>true</code>).</li> <li><code>CN_COUCHBASE_KEEPALIVE_INTERVAL</code>: Keep-alive interval for Couchbase connection (default to <code>30000</code> milliseconds).</li> <li><code>CN_COUCHBASE_KEEPALIVE_TIMEOUT</code>: Keep-alive timeout for Couchbase connection (default to <code>2500</code> milliseconds).</li> <li><code>CN_SQL_DB_DIALECT</code>: Dialect name of SQL backend (one of <code>mysql</code>, <code>pgsql</code>; default to <code>mysql</code>).</li> <li><code>CN_SQL_DB_HOST</code>: Host of SQL backend (default to <code>localhost</code>).</li> <li><code>CN_SQL_DB_PORT</code>: Port of SQL backend (default to <code>3306</code>).</li> <li><code>CN_SQL_DB_NAME</code>: Database name (default to <code>jans</code>)</li> <li><code>CN_SQL_DB_USER</code>: Username to interact with SQL backend (default to <code>jans</code>).</li> <li><code>CN_GOOGLE_SPANNER_INSTANCE_ID</code>: Instance ID of Google Spanner (default to empty string).</li> <li><code>CN_GOOGLE_SPANNER_DATABASE_ID</code>: Database ID of Google Spanner (default to empty string).</li> <li><code>GOOGLE_PROJECT_ID</code>: Google Project ID (default to empty string).</li> <li><code>GOOGLE_PROJECT_ID</code>: Google Project ID (default to empty string). Used when <code>CN_CONFIG_ADAPTER</code> or <code>CN_SECRET_ADAPTER</code> set to <code>google</code>.</li> <li><code>CN_GOOGLE_SPANNER_INSTANCE_ID</code>: Google Spanner instance ID.</li> <li><code>CN_GOOGLE_SPANNER_DATABASE_ID</code>: Google Spanner database ID.</li> <li><code>GLUU_ADMIN_UI_AUTH_METHOD</code>: Authentication method for admin-ui (default to <code>basic</code>). Note, changing the value require restart to jans-config-api.</li> </ul>","tags":["administration","reference","kubernetes","docker image"]},{"location":"reference/kubernetes/docker-admin-ui/#hybrid-mapping","title":"Hybrid mapping","text":"<p>Hybrid persistence supports all available persistence types. To configure hybrid persistence and its data mapping, follow steps below:</p> <ol> <li> <p>Set <code>CN_PERSISTENCE_TYPE</code> environment variable to <code>hybrid</code></p> </li> <li> <p>Set <code>CN_HYBRID_MAPPING</code> with the following format:</p> <pre><code>{\n    \"default\": \"&lt;couchbase|spanner|sql&gt;\",\n    \"user\": \"&lt;couchbase|spanner|sql&gt;\",\n    \"site\": \"&lt;couchbase|spanner|sql&gt;\",\n    \"cache\": \"&lt;couchbase|spanner|sql&gt;\",\n    \"token\": \"&lt;couchbase|spanner|sql&gt;\",\n    \"session\": \"&lt;couchbase|spanner|sql&gt;\",\n}\n</code></pre> <p>Example:</p> <pre><code>{\n    \"default\": \"sql\",\n    \"user\": \"spanner\",\n    \"site\": \"sql\",\n    \"cache\": \"sql\",\n    \"token\": \"couchbase\",\n    \"session\": \"spanner\",\n}\n</code></pre> </li> </ol>","tags":["administration","reference","kubernetes","docker image"]},{"location":"reference/kubernetes/docker-flex-monolith/","title":"Flex Monolith Container Configuration","text":"<p>Warning</p> <p>This image is for testing and development purposes only. Use Flex helm charts for production setups.</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#overview","title":"Overview","text":"<p>Docker monolith image packaging for Gluu Flex. This image packs janssen services including the auth-server, config-api, fido2, casa, scim and the Gluu admin ui.</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Docker</li> <li>Docker compose</li> </ul>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#versions","title":"Versions","text":"<p>See Releases for stable versions. This image should never be used in production. For bleeding-edge/unstable version, use <code>gluufederation/monolith:0.0.0-nightly</code>.</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#environment-variables","title":"Environment Variables","text":"<p>Installation depends on the set of environment variables shown below. These environment variables can be set to customize installation as per the need. If not set, the installer uses default values.</p> ENV Description Default <code>CN_HOSTNAME</code> Hostname to install gluu with. <code>demoexample.gluu.org</code> <code>CN_ADMIN_PASS</code> Password of the admin user. <code>1t5Fin3#security</code> <code>CN_ORG_NAME</code> Organization name. Used for ssl cert generation. <code>Gluu</code> <code>CN_EMAIL</code> Email. Used for ssl cert generation. <code>team@gluu.org</code> <code>CN_CITY</code> City. Used for ssl cert generation. <code>Austin</code> <code>CN_STATE</code> State. Used for ssl cert generation <code>TX</code> <code>CN_COUNTRY</code> Country. Used for ssl cert generation. <code>US</code> <code>CN_INSTALL_MYSQL</code> Install gluu with mysql as the backend <code>false</code> <code>CN_INSTALL_PGSQL</code> Install gluu with Postgres as the backend <code>false</code> <code>CN_INSTALL_ADMIN_UI</code> Installs the Admin-UI <code>true</code> <code>CN_INSTALL_CONFIG_API</code> Installs the Config API service. <code>true</code> <code>CN_INSTALL_SCIM</code> Installs the SCIM  API service. <code>true</code> <code>CN_INSTALL_FIDO2</code> Installs the FIDO2 API service. <code>true</code> <code>RDBMS_DATABASE</code> RDBMS gluu database for MySQL or Postgres. <code>gluu</code> <code>RDBMS_USER</code> RDBMS database user for MySQL or Postgres. <code>gluu</code> <code>RDBMS_PASSWORD</code> RDBMS database user password for MySQL or Postgres. <code>1t5Fin3#security</code> <code>RDBMS_HOST</code> RDBMS host for MySQL or Postgres. <code>mysql</code> which is the docker compose service name <code>TEST_CLIENT_ID</code> ID of test client in UUID which has all available scopes to access any gluu API <code>9876baac-de39-4c23-8a78-674b59df8c09</code> <code>TEST_CLIENT_SECRET</code> Secret for test client <code>1t5Fin3#security</code> <code>TEST_CLIENT_TRUSTED</code> Trust test client <code>true</code> <code>TEST_CLIENT_REDIRECT_URI</code> Not Implemented yet Redirect URI for test client. Multiple uri's with comma may be provided, if not provided redirect uris will be same as the config-api-client ``","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#how-to-run","title":"How to run","text":"<p>Download the compose file of your chosen persistence from mysql or postgres</p> <pre><code>wget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/flex-mysql-compose.yml \nwget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/flex-postgres-compose.yml \n</code></pre> <p>Download the script files </p> <pre><code>wget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/up.sh\nwget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/down.sh\nwget https://raw.githubusercontent.com/GluuFederation/flex/main/docker-flex-monolith/clean.sh\n</code></pre> <p>Give execute permission to the scripts <code>chmod u+x up.sh down.sh clean.sh</code></p> <p>This docker compose file runs two containers, the flex monolith container and mysql container.</p> <p>To start the containers.</p> <pre><code>./up.sh #You can pass mysql|postgres as an argument to the script. If you don't pass any, it will default to mysql.\n</code></pre> <p>To view the containers running</p> <pre><code>docker compose -f flex-mysql-compose.yml ps\n</code></pre> <p>To stop the containers.</p> <pre><code>./down.sh #You can pass mysql|postgres as an argument to the script. If you don't pass any, it will default to mysql.\n</code></pre>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#configure-gluu-flex","title":"Configure Gluu flex","text":"<ol> <li> <p>Access the Docker container shell using:</p> <pre><code>docker compose -f flex-mysql-compose.yml exec flex /bin/bash #This opens a bash terminal in the running container\n</code></pre> </li> <li> <p>You can grab <code>client_id</code> and <code>client_pw</code>(secret), and other values from <code>setup.properties</code> or <code>/opt/jans/jans-setup/setup.properties.last</code></p> </li> <li> <p>Use the CLI tools located under <code>/opt/jans/jans-cli/</code> to configure Gluu flex as needed. For example you can run the TUI:     <pre><code>python3 /opt/jans/jans-cli/config-cli-tui.py\n</code></pre></p> </li> </ol>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#access-endpoints-externally","title":"Access endpoints externally","text":"<p>Add to your <code>/etc/hosts</code> file the ip domain record which should be the ip of the instance docker is installed at and the domain used in the env above <code>CN_HOSTNAME</code>.</p> <pre><code># For-example\n172.22.0.3      demoexample.gluu.org\n</code></pre> <p>After adding the record you can hit endpoints such as https://demoexample.gluu.org/.well-known/openid-configuration</p>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/docker-flex-monolith/#clean-up","title":"Clean up","text":"<p>Remove setup and volumes</p> <pre><code>./clean.sh #You can pass mysql|postgres as an argument to the script. If you don't pass any, it will default to mysql.\n</code></pre>","tags":["administration","reference","kubernetes","docker image","docker compose"]},{"location":"reference/kubernetes/helm-chart/","title":"gluu","text":"<p>Gluu Access and Identity Management</p> <p>Homepage: https://www.gluu.org</p>"},{"location":"reference/kubernetes/helm-chart/#maintainers","title":"Maintainers","text":"Name Email Url moabu team@gluu.org"},{"location":"reference/kubernetes/helm-chart/#source-code","title":"Source Code","text":"<ul> <li>https://docs.gluu.org</li> </ul>"},{"location":"reference/kubernetes/helm-chart/#requirements","title":"Requirements","text":"<p>Kubernetes: <code>&gt;=v1.21.0-0</code></p> Repository Name Version admin-ui 5.11.0 auth-server 1.11.0 auth-server-key-rotation 1.11.0 casa 1.11.0 cleanup 1.11.0 cn-istio-ingress 1.11.0 config 1.11.0 config-api 1.11.0 fido2 1.11.0 kc-scheduler 1.11.0 nginx-ingress 1.11.0 persistence 1.11.0 saml 1.11.0 scim 1.11.0"},{"location":"reference/kubernetes/helm-chart/#values","title":"Values","text":"Key Type Default Description admin-ui object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/gluufederation/flex/admin-ui\",\"tag\":\"5.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"failureThreshold\":20,\"initialDelaySeconds\":60,\"periodSeconds\":25,\"tcpSocket\":{\"port\":8080},\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"failureThreshold\":20,\"initialDelaySeconds\":60,\"periodSeconds\":25,\"tcpSocket\":{\"port\":8080},\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"2000Mi\"},\"requests\":{\"cpu\":\"2000m\",\"memory\":\"2000Mi\"}},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Admin GUI for configuration of the auth-server admin-ui.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of admin-ui.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of admin-ui.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. admin-ui.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh admin-ui.dnsConfig object <code>{}</code> Add custom dns config admin-ui.dnsPolicy string <code>\"\"</code> Add custom dns policy admin-ui.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler admin-ui.hpa.behavior object <code>{}</code> Scaling Policies admin-ui.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set admin-ui.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. admin-ui.image.pullSecrets list <code>[]</code> Image Pull Secrets admin-ui.image.repository string <code>\"ghcr.io/gluufederation/flex/admin-ui\"</code> Image  to use for deploying. admin-ui.image.tag string <code>\"5.11.0-1\"</code> Image  tag to use for deploying. admin-ui.livenessProbe object <code>{\"failureThreshold\":20,\"initialDelaySeconds\":60,\"periodSeconds\":25,\"tcpSocket\":{\"port\":8080},\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for the admin ui if needed. admin-ui.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) admin-ui.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget admin-ui.readinessProbe object <code>{\"failureThreshold\":20,\"initialDelaySeconds\":60,\"periodSeconds\":25,\"tcpSocket\":{\"port\":8080},\"timeoutSeconds\":5}</code> Configure the readiness healthcheck for the admin ui if needed. admin-ui.replicas int <code>1</code> Service replica number. admin-ui.resources object <code>{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"2000Mi\"},\"requests\":{\"cpu\":\"2000m\",\"memory\":\"2000Mi\"}}</code> Resource specs. admin-ui.resources.limits.cpu string <code>\"2000m\"</code> CPU limit. admin-ui.resources.limits.memory string <code>\"2000Mi\"</code> Memory limit. admin-ui.resources.requests.cpu string <code>\"2000m\"</code> CPU request. admin-ui.resources.requests.memory string <code>\"2000Mi\"</code> Memory request. admin-ui.tolerations list <code>[]</code> Add tolerations for the pods admin-ui.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ admin-ui.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service admin-ui.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 admin-ui.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 admin-ui.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers admin-ui.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod auth-server object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/auth-server\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"2500m\",\"memory\":\"2500Mi\"},\"requests\":{\"cpu\":\"2500m\",\"memory\":\"2500Mi\"}},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> OAuth Authorization Server, the OpenID Connect Provider, the UMA Authorization Server--this is the main Internet facing component of Gluu. It's the service that returns tokens, JWT's and identity assertions. This service must be Internet facing. auth-server-key-rotation object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"cronJobSchedule\":\"\",\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/cloudtools\",\"tag\":\"1.11.0-1\"},\"keysLife\":48,\"keysPushDelay\":0,\"keysPushStrategy\":\"NEWER\",\"keysStrategy\":\"NEWER\",\"lifecycle\":{},\"nodeSelector\":{},\"resources\":{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}},\"tolerations\":[],\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Responsible for regenerating auth-keys per x hours auth-server-key-rotation.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of auth-server-key-rotation.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of auth-server-key-rotation.cronJobSchedule string <code>\"\"</code> Auth server key rotation job schedule. It accepts any Cron syntax supported by Kubernetes. If empty, the schedule will run based on keysLife value. auth-server-key-rotation.customCommand list <code>[]</code> Add custom job's command. If passed, it will override the default conditional command. auth-server-key-rotation.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh auth-server-key-rotation.dnsConfig object <code>{}</code> Add custom dns config auth-server-key-rotation.dnsPolicy string <code>\"\"</code> Add custom dns policy auth-server-key-rotation.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. auth-server-key-rotation.image.pullSecrets list <code>[]</code> Image Pull Secrets auth-server-key-rotation.image.repository string <code>\"ghcr.io/janssenproject/jans/cloudtools\"</code> Image  to use for deploying. auth-server-key-rotation.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. auth-server-key-rotation.keysLife int <code>48</code> Auth server key rotation keys life in hours auth-server-key-rotation.keysPushDelay int <code>0</code> Delay (in seconds) before pushing private keys to Auth server auth-server-key-rotation.keysPushStrategy string <code>\"NEWER\"</code> Set key selection strategy after pushing private keys to Auth server (only takes effect when keysPushDelay value is greater than 0) auth-server-key-rotation.keysStrategy string <code>\"NEWER\"</code> Set key selection strategy used by Auth server auth-server-key-rotation.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) auth-server-key-rotation.resources object <code>{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}}</code> Resource specs. auth-server-key-rotation.resources.limits.cpu string <code>\"300m\"</code> CPU limit. auth-server-key-rotation.resources.limits.memory string <code>\"300Mi\"</code> Memory limit. auth-server-key-rotation.resources.requests.cpu string <code>\"300m\"</code> CPU request. auth-server-key-rotation.resources.requests.memory string <code>\"300Mi\"</code> Memory request. auth-server-key-rotation.tolerations list <code>[]</code> Add tolerations for the pods auth-server-key-rotation.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service auth-server-key-rotation.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 auth-server-key-rotation.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 auth-server-key-rotation.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers auth-server-key-rotation.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod auth-server.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of auth-server.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of auth-server.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. auth-server.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh auth-server.dnsConfig object <code>{}</code> Add custom dns config auth-server.dnsPolicy string <code>\"\"</code> Add custom dns policy auth-server.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler auth-server.hpa.behavior object <code>{}</code> Scaling Policies auth-server.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set auth-server.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. auth-server.image.pullSecrets list <code>[]</code> Image Pull Secrets auth-server.image.repository string <code>\"ghcr.io/janssenproject/jans/auth-server\"</code> Image  to use for deploying. auth-server.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. auth-server.livenessProbe object <code>{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for the auth server if needed. auth-server.livenessProbe.exec object <code>{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]}</code> Executes the python3 healthcheck. https://github.com/JanssenProject/docker-jans-auth-server/blob/master/scripts/healthcheck.py auth-server.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) auth-server.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget auth-server.readinessProbe object <code>{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5}</code> Configure the readiness healthcheck for the auth server if needed. https://github.com/JanssenProject/docker-jans-auth-server/blob/master/scripts/healthcheck.py auth-server.replicas int <code>1</code> Service replica number. auth-server.resources object <code>{\"limits\":{\"cpu\":\"2500m\",\"memory\":\"2500Mi\"},\"requests\":{\"cpu\":\"2500m\",\"memory\":\"2500Mi\"}}</code> Resource specs. auth-server.resources.limits.cpu string <code>\"2500m\"</code> CPU limit. auth-server.resources.limits.memory string <code>\"2500Mi\"</code> Memory limit. This value is used to calculate memory allocation for Java. Currently it only supports <code>Mi</code>. Please refrain from using other units. auth-server.resources.requests.cpu string <code>\"2500m\"</code> CPU request. auth-server.resources.requests.memory string <code>\"2500Mi\"</code> Memory request. auth-server.tolerations list <code>[]</code> Add tolerations for the pods auth-server.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ auth-server.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service auth-server.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 auth-server.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 auth-server.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers auth-server.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod casa object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/casa\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"httpGet\":{\"path\":\"/jans-casa/health-check\",\"port\":\"http-casa\"},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"httpGet\":{\"path\":\"/jans-casa/health-check\",\"port\":\"http-casa\"},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"}},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Janssen Casa (\"Casa\") is a self-service web portal for end-users to manage authentication and authorization preferences for their account in a Janssen Auth Server. casa.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of casa.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of casa.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. casa.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh casa.dnsConfig object <code>{}</code> Add custom dns config casa.dnsPolicy string <code>\"\"</code> Add custom dns policy casa.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler casa.hpa.behavior object <code>{}</code> Scaling Policies casa.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set casa.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. casa.image.pullSecrets list <code>[]</code> Image Pull Secrets casa.image.repository string <code>\"ghcr.io/janssenproject/jans/casa\"</code> Image  to use for deploying. casa.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. casa.livenessProbe object <code>{\"httpGet\":{\"path\":\"/jans-casa/health-check\",\"port\":\"http-casa\"},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for casa if needed. casa.livenessProbe.httpGet.path string <code>\"/jans-casa/health-check\"</code> http liveness probe endpoint casa.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) casa.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget casa.readinessProbe object <code>{\"httpGet\":{\"path\":\"/jans-casa/health-check\",\"port\":\"http-casa\"},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5}</code> Configure the readiness healthcheck for the casa if needed. casa.readinessProbe.httpGet.path string <code>\"/jans-casa/health-check\"</code> http readiness probe endpoint casa.replicas int <code>1</code> Service replica number. casa.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"}}</code> Resource specs. casa.resources.limits.cpu string <code>\"500m\"</code> CPU limit. casa.resources.limits.memory string <code>\"500Mi\"</code> Memory limit. This value is used to calculate memory allocation for Java. Currently it only supports <code>Mi</code>. Please refrain from using other units. casa.resources.requests.cpu string <code>\"500m\"</code> CPU request. casa.resources.requests.memory string <code>\"500Mi\"</code> Memory request. casa.tolerations list <code>[]</code> Add tolerations for the pods casa.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ casa.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service casa.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 casa.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 casa.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers casa.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod cleanup object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/cloudtools\",\"tag\":\"1.11.0-1\"},\"interval\":60,\"lifecycle\":{},\"limit\":1000,\"nodeSelector\":{},\"resources\":{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}},\"tolerations\":[],\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Cleanup expired entries in persistence cleanup.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of cleanup.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of cleanup.customCommand list <code>[]</code> Add custom job's command. If passed, it will override the default conditional command. cleanup.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh cleanup.dnsConfig object <code>{}</code> Add custom dns config cleanup.dnsPolicy string <code>\"\"</code> Add custom dns policy cleanup.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. cleanup.image.pullSecrets list <code>[]</code> Image Pull Secrets cleanup.image.repository string <code>\"ghcr.io/janssenproject/jans/cloudtools\"</code> Image  to use for deploying. cleanup.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. cleanup.interval int <code>60</code> Interval of running the cleanup process (in minutes) cleanup.limit int <code>1000</code> Max. numbers of entries to cleanup cleanup.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) cleanup.resources object <code>{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}}</code> Resource specs. cleanup.resources.limits.cpu string <code>\"300m\"</code> CPU limit. cleanup.resources.limits.memory string <code>\"300Mi\"</code> Memory limit. cleanup.resources.requests.cpu string <code>\"300m\"</code> CPU request. cleanup.resources.requests.memory string <code>\"300Mi\"</code> Memory request. cleanup.tolerations list <code>[]</code> Add tolerations for the pods cleanup.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service cleanup.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 cleanup.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 cleanup.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers cleanup.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod config object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"adminPassword\":\"Test1234#\",\"city\":\"Austin\",\"configmap\":{\"cnAwsAccessKeyId\":\"\",\"cnAwsDefaultRegion\":\"us-west-1\",\"cnAwsProfile\":\"gluu\",\"cnAwsSecretAccessKey\":\"\",\"cnAwsSecretsEndpointUrl\":\"\",\"cnAwsSecretsNamePrefix\":\"gluu\",\"cnAwsSecretsReplicaRegions\":[],\"cnCacheType\":\"NATIVE_PERSISTENCE\",\"cnConfigKubernetesConfigMap\":\"cn\",\"cnGoogleProjectId\":\"google-project-to-save-config-and-secrets-to\",\"cnGoogleSecretManagerServiceAccount\":\"SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=\",\"cnGoogleSecretNamePrefix\":\"gluu\",\"cnGoogleSecretVersionId\":\"latest\",\"cnJettyRequestHeaderSize\":8192,\"cnMaxRamPercent\":\"75.0\",\"cnMessageType\":\"DISABLED\",\"cnPersistenceHybridMapping\":\"{}\",\"cnRedisSentinelGroup\":\"\",\"cnRedisSslTruststore\":\"\",\"cnRedisType\":\"STANDALONE\",\"cnRedisUrl\":\"redis.redis.svc.cluster.local:6379\",\"cnRedisUseSsl\":false,\"cnScimProtectionMode\":\"OAUTH\",\"cnSecretKubernetesSecret\":\"cn\",\"cnSqlDbDialect\":\"mysql\",\"cnSqlDbHost\":\"my-release-mysql.default.svc.cluster.local\",\"cnSqlDbName\":\"gluu\",\"cnSqlDbPort\":3306,\"cnSqlDbSchema\":\"\",\"cnSqlDbTimezone\":\"UTC\",\"cnSqlDbUser\":\"gluu\",\"cnSqldbUserPassword\":\"Test1234#\",\"cnVaultAddr\":\"http://localhost:8200\",\"cnVaultAppRolePath\":\"approle\",\"cnVaultKvPath\":\"secret\",\"cnVaultNamespace\":\"\",\"cnVaultPrefix\":\"jans\",\"cnVaultRoleId\":\"\",\"cnVaultRoleIdFile\":\"/etc/certs/vault_role_id\",\"cnVaultSecretId\":\"\",\"cnVaultSecretIdFile\":\"/etc/certs/vault_secret_id\",\"cnVaultVerify\":false,\"kcAdminPassword\":\"Test1234#\",\"kcAdminUsername\":\"admin\",\"kcDbPassword\":\"Test1234#\",\"kcDbSchema\":\"keycloak\",\"kcDbUrlDatabase\":\"keycloak\",\"kcDbUrlHost\":\"mysql.kc.svc.cluster.local\",\"kcDbUrlPort\":3306,\"kcDbUrlProperties\":\"?useUnicode=true&amp;characterEncoding=UTF-8&amp;character_set_server=utf8mb4\",\"kcDbUsername\":\"keycloak\",\"kcDbVendor\":\"mysql\",\"kcLogLevel\":\"INFO\",\"lbAddr\":\"\",\"quarkusTransactionEnableRecovery\":true},\"countryCode\":\"US\",\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"email\":\"team@gluu.org\",\"image\":{\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/configurator\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"migration\":{\"enabled\":false,\"migrationDataFormat\":\"ldif\",\"migrationDir\":\"/ce-migration\"},\"nodeSelector\":{},\"orgName\":\"Gluu\",\"redisPassword\":\"P@assw0rd\",\"resources\":{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}},\"salt\":\"\",\"state\":\"TX\",\"tolerations\":[],\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Configuration parameters for setup and initial configuration secret and config layers used by Gluu services. config-api object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/config-api\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"httpGet\":{\"path\":\"/jans-config-api/api/v1/health/live\",\"port\":8074},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"httpGet\":{\"path\":\"jans-config-api/api/v1/health/ready\",\"port\":8074},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1200Mi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"1200Mi\"}},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Config Api endpoints can be used to configure the auth-server, which is an open-source OpenID Connect Provider (OP) and UMA Authorization Server (AS). config-api.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of config-api.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of config-api.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. config-api.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh config-api.dnsConfig object <code>{}</code> Add custom dns config config-api.dnsPolicy string <code>\"\"</code> Add custom dns policy config-api.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler config-api.hpa.behavior object <code>{}</code> Scaling Policies config-api.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set config-api.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. config-api.image.pullSecrets list <code>[]</code> Image Pull Secrets config-api.image.repository string <code>\"ghcr.io/janssenproject/jans/config-api\"</code> Image  to use for deploying. config-api.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. config-api.livenessProbe object <code>{\"httpGet\":{\"path\":\"/jans-config-api/api/v1/health/live\",\"port\":8074},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for the auth server if needed. config-api.livenessProbe.httpGet object <code>{\"path\":\"/jans-config-api/api/v1/health/live\",\"port\":8074}</code> http liveness probe endpoint config-api.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) config-api.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget config-api.readinessProbe.httpGet object <code>{\"path\":\"jans-config-api/api/v1/health/ready\",\"port\":8074}</code> http readiness probe endpoint config-api.replicas int <code>1</code> Service replica number. config-api.resources object <code>{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1200Mi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"1200Mi\"}}</code> Resource specs. config-api.resources.limits.cpu string <code>\"1000m\"</code> CPU limit. config-api.resources.limits.memory string <code>\"1200Mi\"</code> Memory limit. This value is used to calculate memory allocation for Java. Currently it only supports <code>Mi</code>. Please refrain from using other units. config-api.resources.requests.cpu string <code>\"1000m\"</code> CPU request. config-api.resources.requests.memory string <code>\"1200Mi\"</code> Memory request. config-api.tolerations list <code>[]</code> Add tolerations for the pods config-api.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ config-api.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service config-api.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 config-api.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 config-api.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers config-api.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod config.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of config.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of config.adminPassword string <code>\"Test1234#\"</code> Admin password to log in to the UI. config.city string <code>\"Austin\"</code> City. Used for certificate creation. config.configmap.cnCacheType string <code>\"NATIVE_PERSISTENCE\"</code> Cache type. <code>NATIVE_PERSISTENCE</code>, <code>REDIS</code>. or <code>IN_MEMORY</code>. Defaults to <code>NATIVE_PERSISTENCE</code> . config.configmap.cnConfigKubernetesConfigMap string <code>\"cn\"</code> The name of the Kubernetes ConfigMap that will hold the configuration layer config.configmap.cnGoogleProjectId string <code>\"google-project-to-save-config-and-secrets-to\"</code> Project id of the Google project the secret manager belongs to. Used only when global.configAdapterName and global.configSecretAdapter is set to google. config.configmap.cnGoogleSecretManagerServiceAccount string <code>\"SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=\"</code> Service account with roles roles/secretmanager.admin base64 encoded string. This is used often inside the services to reach the configuration layer. Used only when global.configAdapterName and global.configSecretAdapter is set to google. config.configmap.cnGoogleSecretNamePrefix string <code>\"gluu\"</code> Prefix for Gluu secret in Google Secret Manager. Defaults to gluu. If left gluu-secret secret will be created. Used only when global.configAdapterName and global.configSecretAdapter is set to google. config.configmap.cnGoogleSecretVersionId string <code>\"latest\"</code> Secret version to be used for secret configuration. Defaults to latest and should normally always stay that way. Used only when global.configAdapterName and global.configSecretAdapter is set to google. config.configmap.cnJettyRequestHeaderSize int <code>8192</code> Jetty header size in bytes in the auth server config.configmap.cnMaxRamPercent string <code>\"75.0\"</code> Value passed to Java option -XX:MaxRAMPercentage config.configmap.cnMessageType string <code>\"DISABLED\"</code> Message type (one of POSTGRES, REDIS, or DISABLED) config.configmap.cnPersistenceHybridMapping string <code>\"{}\"</code> Specify data that should be saved in persistence (one of default, user, cache, site, token, or session; default to default). Note this environment only takes effect when <code>global.cnPersistenceType</code>  is set to <code>hybrid</code>. config.configmap.cnRedisSentinelGroup string <code>\"\"</code> Redis Sentinel Group. Often set when <code>config.configmap.cnRedisType</code> is set to <code>SENTINEL</code>. Can be used when  <code>config.configmap.cnCacheType</code> is set to <code>REDIS</code>. config.configmap.cnRedisSslTruststore string <code>\"\"</code> Redis SSL truststore. Optional. Can be used when  <code>config.configmap.cnCacheType</code> is set to <code>REDIS</code>. config.configmap.cnRedisType string <code>\"STANDALONE\"</code> Redis service type. <code>STANDALONE</code> or <code>CLUSTER</code>. Can be used when  <code>config.configmap.cnCacheType</code> is set to <code>REDIS</code>. config.configmap.cnRedisUrl string <code>\"redis.redis.svc.cluster.local:6379\"</code> Redis URL and port number :. Can be used when  <code>config.configmap.cnCacheType</code> is set to <code>REDIS</code>. config.configmap.cnRedisUseSsl bool <code>false</code> Boolean to use SSL in Redis. Can be used when  <code>config.configmap.cnCacheType</code> is set to <code>REDIS</code>. config.configmap.cnScimProtectionMode string <code>\"OAUTH\"</code> SCIM protection mode OAUTH config.configmap.cnSecretKubernetesSecret string <code>\"cn\"</code> Kubernetes secret name holding configuration keys. Used when global.configSecretAdapter is set to kubernetes which is the default. config.configmap.cnSqlDbDialect string <code>\"mysql\"</code> SQL database dialect. <code>mysql</code> or <code>pgsql</code> config.configmap.cnSqlDbHost string <code>\"my-release-mysql.default.svc.cluster.local\"</code> SQL database host uri. config.configmap.cnSqlDbName string <code>\"gluu\"</code> SQL database name. config.configmap.cnSqlDbPort int <code>3306</code> SQL database port. config.configmap.cnSqlDbSchema string <code>\"\"</code> Schema name used by SQL database (default to empty-string; if using MySQL, the schema name will be resolved as the database name, whereas in PostgreSQL the schema name will be resolved as <code>\"public\"</code>). config.configmap.cnSqlDbTimezone string <code>\"UTC\"</code> SQL database timezone. config.configmap.cnSqlDbUser string <code>\"gluu\"</code> SQL database username. config.configmap.cnSqldbUserPassword string <code>\"Test1234#\"</code> SQL password  injected the secrets . config.configmap.cnVaultAddr string <code>\"http://localhost:8200\"</code> Base URL of Vault. config.configmap.cnVaultAppRolePath string <code>\"approle\"</code> Path to Vault AppRole. config.configmap.cnVaultKvPath string <code>\"secret\"</code> Path to Vault KV secrets engine. config.configmap.cnVaultNamespace string <code>\"\"</code> Vault namespace used to access the secrets. config.configmap.cnVaultPrefix string <code>\"jans\"</code> Base prefix name used to access secrets. config.configmap.cnVaultRoleId string <code>\"\"</code> Vault AppRole RoleID. config.configmap.cnVaultRoleIdFile string <code>\"/etc/certs/vault_role_id\"</code> Path to file contains Vault AppRole role ID. config.configmap.cnVaultSecretId string <code>\"\"</code> Vault AppRole SecretID. config.configmap.cnVaultSecretIdFile string <code>\"/etc/certs/vault_secret_id\"</code> Path to file contains Vault AppRole secret ID. config.configmap.cnVaultVerify bool <code>false</code> Verify connection to Vault. config.configmap.kcAdminPassword string <code>\"Test1234#\"</code> Keycloak  admin UI password config.configmap.kcAdminUsername string <code>\"admin\"</code> Keycloak admin UI username config.configmap.kcDbPassword string <code>\"Test1234#\"</code> Password for Keycloak database access config.configmap.kcDbSchema string <code>\"keycloak\"</code> Keycloak database schema name (note that PostgreSQL may be using \"public\" schema). config.configmap.kcDbUrlDatabase string <code>\"keycloak\"</code> Keycloak database name. config.configmap.kcDbUrlHost string <code>\"mysql.kc.svc.cluster.local\"</code> Keycloak database host uri config.configmap.kcDbUrlPort int <code>3306</code> Keycloak database port (default to port 3306 for mysql). config.configmap.kcDbUrlProperties string <code>\"?useUnicode=true&amp;characterEncoding=UTF-8&amp;character_set_server=utf8mb4\"</code> Keycloak database connection properties. If using postgresql, the value can be set to empty string. config.configmap.kcDbUsername string <code>\"keycloak\"</code> Keycloak database username config.configmap.kcDbVendor string <code>\"mysql\"</code> Keycloak database vendor name (default to MySQL server). To use PostgreSQL server, change the value to postgres. config.configmap.kcLogLevel string <code>\"INFO\"</code> Keycloak logging level config.configmap.lbAddr string <code>\"\"</code> Load balancer address for AWS if the FQDN is not registered. config.configmap.quarkusTransactionEnableRecovery bool <code>true</code> Quarkus transaction recovery. When using MySQL, there could be issue regarding XA_RECOVER_ADMIN; refer to https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin for details. config.countryCode string <code>\"US\"</code> Country code. Used for certificate creation. config.customCommand list <code>[]</code> Add custom job's command. If passed, it will override the default conditional command. config.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh config.dnsConfig object <code>{}</code> Add custom dns config config.dnsPolicy string <code>\"\"</code> Add custom dns policy config.email string <code>\"team@gluu.org\"</code> Email address of the administrator usually. Used for certificate creation. config.image.pullSecrets list <code>[]</code> Image Pull Secrets config.image.repository string <code>\"ghcr.io/janssenproject/jans/configurator\"</code> Image  to use for deploying. config.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. config.migration object <code>{\"enabled\":false,\"migrationDataFormat\":\"ldif\",\"migrationDir\":\"/ce-migration\"}</code> CE to CN Migration section config.migration.enabled bool <code>false</code> Boolean flag to enable migration from CE config.migration.migrationDataFormat string <code>\"ldif\"</code> migration data-format depending on persistence backend. Supported data formats are ldif, postgresql+json, and mysql+json. config.migration.migrationDir string <code>\"/ce-migration\"</code> Directory holding all migration files config.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) config.orgName string <code>\"Gluu\"</code> Organization name. Used for certificate creation. config.redisPassword string <code>\"P@assw0rd\"</code> Redis admin password if <code>config.configmap.cnCacheType</code> is set to <code>REDIS</code>. config.resources object <code>{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}}</code> Resource specs. config.resources.limits.cpu string <code>\"300m\"</code> CPU limit. config.resources.limits.memory string <code>\"300Mi\"</code> Memory limit. config.resources.requests.cpu string <code>\"300m\"</code> CPU request. config.resources.requests.memory string <code>\"300Mi\"</code> Memory request. config.salt string <code>\"\"</code> Salt. Used for encoding/decoding sensitive data. If omitted or set to empty string, the value will be self-generated. Otherwise, a 24 alphanumeric characters are allowed as its value. config.state string <code>\"TX\"</code> State code. Used for certificate creation. config.tolerations list <code>[]</code> Add tolerations for the pods config.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service. config.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service. variable1: value1 config.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service. variable1: value1 config.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers config.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod fido2 object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/fido2\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"httpGet\":{\"path\":\"/jans-fido2/sys/health-check\",\"port\":\"http-fido2\"},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"httpGet\":{\"path\":\"/jans-fido2/sys/health-check\",\"port\":\"http-fido2\"},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"}},\"service\":{\"name\":\"http-fido2\",\"port\":8080},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> FIDO 2.0 (FIDO2) is an open authentication standard that enables leveraging common devices to authenticate to online services in both mobile and desktop environments. fido2.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of fido2.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of fido2.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. fido2.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh fido2.dnsConfig object <code>{}</code> Add custom dns config fido2.dnsPolicy string <code>\"\"</code> Add custom dns policy fido2.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler fido2.hpa.behavior object <code>{}</code> Scaling Policies fido2.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set fido2.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. fido2.image.pullSecrets list <code>[]</code> Image Pull Secrets fido2.image.repository string <code>\"ghcr.io/janssenproject/jans/fido2\"</code> Image  to use for deploying. fido2.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. fido2.livenessProbe object <code>{\"httpGet\":{\"path\":\"/jans-fido2/sys/health-check\",\"port\":\"http-fido2\"},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for the fido2 if needed. fido2.livenessProbe.httpGet object <code>{\"path\":\"/jans-fido2/sys/health-check\",\"port\":\"http-fido2\"}</code> http liveness probe endpoint fido2.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) fido2.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget fido2.readinessProbe object <code>{\"httpGet\":{\"path\":\"/jans-fido2/sys/health-check\",\"port\":\"http-fido2\"},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5}</code> Configure the readiness healthcheck for the fido2 if needed. fido2.replicas int <code>1</code> Service replica number. fido2.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"500Mi\"}}</code> Resource specs. fido2.resources.limits.cpu string <code>\"500m\"</code> CPU limit. fido2.resources.limits.memory string <code>\"500Mi\"</code> Memory limit. This value is used to calculate memory allocation for Java. Currently it only supports <code>Mi</code>. Please refrain from using other units. fido2.resources.requests.cpu string <code>\"500m\"</code> CPU request. fido2.resources.requests.memory string <code>\"500Mi\"</code> Memory request. fido2.service.name string <code>\"http-fido2\"</code> The name of the fido2 port within the fido2 service. Please keep it as default. fido2.service.port int <code>8080</code> Port of the fido2 service. Please keep it as default. fido2.tolerations list <code>[]</code> Add tolerations for the pods fido2.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ fido2.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service fido2.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 fido2.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 fido2.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers fido2.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod global object <code>{\"admin-ui\":{\"adminUiServiceName\":\"admin-ui\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"secret\":{},\"service\":{},\"virtualService\":{}},\"enabled\":true,\"ingress\":{\"adminUiAdditionalAnnotations\":{},\"adminUiEnabled\":false,\"adminUiLabels\":{}}},\"alb\":{\"ingress\":false},\"auth-server\":{\"appLoggers\":{\"auditStatsLogLevel\":\"INFO\",\"auditStatsLogTarget\":\"FILE\",\"authLogLevel\":\"INFO\",\"authLogTarget\":\"STDOUT\",\"enableStdoutLogPrefix\":\"true\",\"httpLogLevel\":\"INFO\",\"httpLogTarget\":\"FILE\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"},\"authEncKeys\":\"RSA1_5 RSA-OAEP\",\"authServerServiceName\":\"auth-server\",\"authSigKeys\":\"RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512\",\"cnCustomJavaOptions\":\"\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"secret\":{},\"service\":{},\"virtualService\":{}},\"enabled\":true,\"ingress\":{\"authServerAdditionalAnnotations\":{},\"authServerEnabled\":true,\"authServerLabels\":{},\"authServerProtectedRegister\":false,\"authServerProtectedRegisterAdditionalAnnotations\":{},\"authServerProtectedRegisterLabels\":{},\"authServerProtectedToken\":false,\"authServerProtectedTokenAdditionalAnnotations\":{},\"authServerProtectedTokenLabels\":{},\"authzenAdditionalAnnotations\":{},\"authzenConfigEnabled\":true,\"authzenConfigLabels\":{},\"deviceCodeAdditionalAnnotations\":{},\"deviceCodeEnabled\":true,\"deviceCodeLabels\":{},\"firebaseMessagingAdditionalAnnotations\":{},\"firebaseMessagingEnabled\":true,\"firebaseMessagingLabels\":{},\"lockAdditionalAnnotations\":{},\"lockConfigAdditionalAnnotations\":{},\"lockConfigEnabled\":false,\"lockConfigLabels\":{},\"lockEnabled\":false,\"lockLabels\":{},\"openidAdditionalAnnotations\":{},\"openidConfigEnabled\":true,\"openidConfigLabels\":{},\"u2fAdditionalAnnotations\":{},\"u2fConfigEnabled\":true,\"u2fConfigLabels\":{},\"uma2AdditionalAnnotations\":{},\"uma2ConfigEnabled\":true,\"uma2ConfigLabels\":{},\"webdiscoveryAdditionalAnnotations\":{},\"webdiscoveryEnabled\":true,\"webdiscoveryLabels\":{},\"webfingerAdditionalAnnotations\":{},\"webfingerEnabled\":true,\"webfingerLabels\":{}},\"lockEnabled\":false},\"auth-server-key-rotation\":{\"customAnnotations\":{\"cronjob\":{},\"secret\":{},\"service\":{}},\"enabled\":true,\"initKeysLife\":48},\"awsStorageType\":\"io1\",\"azureStorageAccountType\":\"Standard_LRS\",\"azureStorageKind\":\"Managed\",\"casa\":{\"appLoggers\":{\"casaLogLevel\":\"INFO\",\"casaLogTarget\":\"STDOUT\",\"enableStdoutLogPrefix\":\"true\",\"timerLogLevel\":\"INFO\",\"timerLogTarget\":\"FILE\"},\"casaServiceName\":\"casa\",\"cnCustomJavaOptions\":\"\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"secret\":{},\"service\":{},\"virtualService\":{}},\"enabled\":true,\"ingress\":{\"casaAdditionalAnnotations\":{},\"casaEnabled\":false,\"casaLabels\":{}}},\"cleanup\":{\"enabled\":true},\"cloud\":{\"testEnviroment\":false},\"cnAwsConfigFile\":\"/etc/jans/conf/aws_config_file\",\"cnAwsSecretsReplicaRegionsFile\":\"/etc/jans/conf/aws_secrets_replica_regions\",\"cnAwsSharedCredentialsFile\":\"/etc/jans/conf/aws_shared_credential_file\",\"cnConfiguratorConfigurationFile\":\"/etc/jans/conf/configuration.json\",\"cnConfiguratorCustomSchema\":{\"secretName\":\"\"},\"cnConfiguratorDumpFile\":\"/etc/jans/conf/configuration.out.json\",\"cnConfiguratorKey\":\"\",\"cnConfiguratorKeyFile\":\"/etc/jans/conf/configuration.key\",\"cnDocumentStoreType\":\"DB\",\"cnGoogleApplicationCredentials\":\"/etc/jans/conf/google-credentials.json\",\"cnObExtSigningAlias\":\"\",\"cnObExtSigningJwksCrt\":\"\",\"cnObExtSigningJwksKey\":\"\",\"cnObExtSigningJwksKeyPassPhrase\":\"\",\"cnObExtSigningJwksUri\":\"\",\"cnObStaticSigningKeyKid\":\"\",\"cnObTransportAlias\":\"\",\"cnObTransportCrt\":\"\",\"cnObTransportKey\":\"\",\"cnObTransportKeyPassPhrase\":\"\",\"cnObTransportTrustStore\":\"\",\"cnPersistenceType\":\"sql\",\"cnPrometheusPort\":\"\",\"cnSqlPasswordFile\":\"/etc/jans/conf/sql_password\",\"config\":{\"customAnnotations\":{\"clusterRoleBinding\":{},\"configMap\":{},\"job\":{},\"role\":{},\"roleBinding\":{},\"secret\":{},\"service\":{},\"serviceAccount\":{}},\"enabled\":true},\"config-api\":{\"adminUiAppLoggers\":{\"adminUiAuditLogLevel\":\"INFO\",\"adminUiAuditLogTarget\":\"FILE\",\"adminUiLogLevel\":\"INFO\",\"adminUiLogTarget\":\"FILE\",\"enableStdoutLogPrefix\":\"true\"},\"appLoggers\":{\"configApiLogLevel\":\"INFO\",\"configApiLogTarget\":\"STDOUT\",\"enableStdoutLogPrefix\":\"true\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"},\"cnCustomJavaOptions\":\"\",\"configApiServerServiceName\":\"config-api\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"service\":{},\"virtualService\":{}},\"enabled\":true,\"ingress\":{\"configApiAdditionalAnnotations\":{},\"configApiEnabled\":true,\"configApiLabels\":{}},\"plugins\":\"admin-ui,fido2,scim,user-mgt\"},\"configAdapterName\":\"kubernetes\",\"configSecretAdapter\":\"kubernetes\",\"distribution\":\"default\",\"fido2\":{\"appLoggers\":{\"enableStdoutLogPrefix\":\"true\",\"fido2LogLevel\":\"INFO\",\"fido2LogTarget\":\"STDOUT\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"},\"cnCustomJavaOptions\":\"\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"secret\":{},\"service\":{},\"virtualService\":{}},\"enabled\":true,\"fido2ServiceName\":\"fido2\",\"ingress\":{\"fido2AdditionalAnnotations\":{},\"fido2ConfigAdditionalAnnotations\":{},\"fido2ConfigEnabled\":false,\"fido2ConfigLabels\":{},\"fido2Enabled\":false,\"fido2Labels\":{},\"fido2WebauthnAdditionalAnnotations\":{},\"fido2WebauthnEnabled\":false,\"fido2WebauthnLabels\":{}}},\"fqdn\":\"demoexample.gluu.org\",\"gcePdStorageType\":\"pd-standard\",\"isFqdnRegistered\":false,\"istio\":{\"additionalAnnotations\":{},\"additionalLabels\":{},\"enabled\":false,\"gateways\":[],\"ingress\":false,\"namespace\":\"istio-system\"},\"jobTtlSecondsAfterFinished\":300,\"kc-scheduler\":{\"enabled\":false},\"lbIp\":\"22.22.22.22\",\"nginx-ingress\":{\"enabled\":true},\"persistence\":{\"customAnnotations\":{\"job\":{},\"secret\":{},\"service\":{}},\"enabled\":true},\"saml\":{\"cnCustomJavaOptions\":\"\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"secret\":{},\"service\":{},\"virtualService\":{}},\"enabled\":false,\"ingress\":{\"samlAdditionalAnnotations\":{},\"samlEnabled\":false,\"samlLabels\":{}},\"samlServiceName\":\"saml\"},\"scim\":{\"appLoggers\":{\"enableStdoutLogPrefix\":\"true\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scimLogLevel\":\"INFO\",\"scimLogTarget\":\"STDOUT\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"},\"cnCustomJavaOptions\":\"\",\"customAnnotations\":{\"deployment\":{},\"destinationRule\":{},\"horizontalPodAutoscaler\":{},\"pod\":{},\"podDisruptionBudget\":{},\"secret\":{},\"service\":{},\"virtualService\":{}},\"enabled\":true,\"ingress\":{\"scimAdditionalAnnotations\":{},\"scimConfigAdditionalAnnotations\":{},\"scimConfigEnabled\":false,\"scimConfigLabels\":{},\"scimEnabled\":false,\"scimLabels\":{}},\"scimServiceName\":\"scim\"},\"serviceAccountName\":\"default\",\"storageClass\":{\"allowVolumeExpansion\":true,\"allowedTopologies\":[],\"mountOptions\":[\"debug\"],\"parameters\":{},\"provisioner\":\"microk8s.io/hostpath\",\"reclaimPolicy\":\"Retain\",\"volumeBindingMode\":\"WaitForFirstConsumer\"},\"usrEnvs\":{\"normal\":{},\"secret\":{}}}</code> Parameters used globally across all services helm charts. global.admin-ui.adminUiServiceName string <code>\"admin-ui\"</code> Name of the admin-ui service. Please keep it as default. global.admin-ui.enabled bool <code>true</code> Boolean flag to enable/disable the admin-ui chart and admin ui config api plugin. global.admin-ui.ingress.adminUiAdditionalAnnotations object <code>{}</code> Admin UI ingress resource additional annotations. global.admin-ui.ingress.adminUiEnabled bool <code>false</code> Enable Admin UI endpoints in either istio or nginx ingress depending on users choice global.admin-ui.ingress.adminUiLabels object <code>{}</code> Admin UI ingress resource labels. key app is taken. global.alb.ingress bool <code>false</code> Activates ALB ingress global.auth-server-key-rotation.enabled bool <code>true</code> Boolean flag to enable/disable the auth-server-key rotation cronjob chart. global.auth-server-key-rotation.initKeysLife int <code>48</code> The initial auth server key rotation keys life in hours global.auth-server.appLoggers object <code>{\"auditStatsLogLevel\":\"INFO\",\"auditStatsLogTarget\":\"FILE\",\"authLogLevel\":\"INFO\",\"authLogTarget\":\"STDOUT\",\"enableStdoutLogPrefix\":\"true\",\"httpLogLevel\":\"INFO\",\"httpLogTarget\":\"FILE\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"}</code> App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed. global.auth-server.appLoggers.auditStatsLogLevel string <code>\"INFO\"</code> jans-auth_audit.log level global.auth-server.appLoggers.auditStatsLogTarget string <code>\"FILE\"</code> jans-auth_script.log target global.auth-server.appLoggers.authLogLevel string <code>\"INFO\"</code> jans-auth.log level global.auth-server.appLoggers.authLogTarget string <code>\"STDOUT\"</code> jans-auth.log target global.auth-server.appLoggers.enableStdoutLogPrefix string <code>\"true\"</code> Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e auth-server-script ===&gt; 2022-12-20 17:49:55,744 INFO global.auth-server.appLoggers.httpLogLevel string <code>\"INFO\"</code> http_request_response.log level global.auth-server.appLoggers.httpLogTarget string <code>\"FILE\"</code> http_request_response.log target global.auth-server.appLoggers.persistenceDurationLogLevel string <code>\"INFO\"</code> jans-auth_persistence_duration.log level global.auth-server.appLoggers.persistenceDurationLogTarget string <code>\"FILE\"</code> jans-auth_persistence_duration.log target global.auth-server.appLoggers.persistenceLogLevel string <code>\"INFO\"</code> jans-auth_persistence.log level global.auth-server.appLoggers.persistenceLogTarget string <code>\"FILE\"</code> jans-auth_persistence.log target global.auth-server.appLoggers.scriptLogLevel string <code>\"INFO\"</code> jans-auth_script.log level global.auth-server.appLoggers.scriptLogTarget string <code>\"FILE\"</code> jans-auth_script.log target global.auth-server.authEncKeys string <code>\"RSA1_5 RSA-OAEP\"</code> space-separated key algorithm for encryption (default to <code>RSA1_5 RSA-OAEP</code>) global.auth-server.authServerServiceName string <code>\"auth-server\"</code> Name of the auth-server service. Please keep it as default. global.auth-server.authSigKeys string <code>\"RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512\"</code> space-separated key algorithm for signing (default to <code>RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512</code>) global.auth-server.cnCustomJavaOptions string <code>\"\"</code> passing custom java options to auth-server. Notice you do not need to pass in any loggers options as they are introduced below in appLoggers. DO NOT PASS JAVA_OPTIONS in envs. global.auth-server.enabled bool <code>true</code> Boolean flag to enable/disable auth-server chart. You should never set this to false. global.auth-server.ingress object <code>{\"authServerAdditionalAnnotations\":{},\"authServerEnabled\":true,\"authServerLabels\":{},\"authServerProtectedRegister\":false,\"authServerProtectedRegisterAdditionalAnnotations\":{},\"authServerProtectedRegisterLabels\":{},\"authServerProtectedToken\":false,\"authServerProtectedTokenAdditionalAnnotations\":{},\"authServerProtectedTokenLabels\":{},\"authzenAdditionalAnnotations\":{},\"authzenConfigEnabled\":true,\"authzenConfigLabels\":{},\"deviceCodeAdditionalAnnotations\":{},\"deviceCodeEnabled\":true,\"deviceCodeLabels\":{},\"firebaseMessagingAdditionalAnnotations\":{},\"firebaseMessagingEnabled\":true,\"firebaseMessagingLabels\":{},\"lockAdditionalAnnotations\":{},\"lockConfigAdditionalAnnotations\":{},\"lockConfigEnabled\":false,\"lockConfigLabels\":{},\"lockEnabled\":false,\"lockLabels\":{},\"openidAdditionalAnnotations\":{},\"openidConfigEnabled\":true,\"openidConfigLabels\":{},\"u2fAdditionalAnnotations\":{},\"u2fConfigEnabled\":true,\"u2fConfigLabels\":{},\"uma2AdditionalAnnotations\":{},\"uma2ConfigEnabled\":true,\"uma2ConfigLabels\":{},\"webdiscoveryAdditionalAnnotations\":{},\"webdiscoveryEnabled\":true,\"webdiscoveryLabels\":{},\"webfingerAdditionalAnnotations\":{},\"webfingerEnabled\":true,\"webfingerLabels\":{}}</code> Enable endpoints in either istio or nginx ingress depending on users choice global.auth-server.ingress.authServerAdditionalAnnotations object <code>{}</code> Auth server ingress resource additional annotations. global.auth-server.ingress.authServerEnabled bool <code>true</code> Enable Auth server endpoints /jans-auth global.auth-server.ingress.authServerLabels object <code>{}</code> Auth server ingress resource labels. key app is taken global.auth-server.ingress.authServerProtectedRegister bool <code>false</code> Enable mTLS onn Auth server endpoint /jans-auth/restv1/register. Currently not working in Istio. global.auth-server.ingress.authServerProtectedRegisterAdditionalAnnotations object <code>{}</code> Auth server protected register ingress resource additional annotations. global.auth-server.ingress.authServerProtectedRegisterLabels object <code>{}</code> Auth server protected token ingress resource labels. key app is taken global.auth-server.ingress.authServerProtectedToken bool <code>false</code> Enable mTLS on Auth server endpoint /jans-auth/restv1/token. Currently not working in Istio. global.auth-server.ingress.authServerProtectedTokenAdditionalAnnotations object <code>{}</code> Auth server protected token ingress resource additional annotations. global.auth-server.ingress.authServerProtectedTokenLabels object <code>{}</code> Auth server protected token ingress resource labels. key app is taken global.auth-server.ingress.authzenAdditionalAnnotations object <code>{}</code> authzen config ingress resource additional annotations. global.auth-server.ingress.authzenConfigEnabled bool <code>true</code> Enable endpoint /.well-known/authzen-configuration global.auth-server.ingress.authzenConfigLabels object <code>{}</code> authzen config ingress resource labels. key app is taken global.auth-server.ingress.deviceCodeAdditionalAnnotations object <code>{}</code> device-code ingress resource additional annotations. global.auth-server.ingress.deviceCodeEnabled bool <code>true</code> Enable endpoint /device-code global.auth-server.ingress.deviceCodeLabels object <code>{}</code> device-code ingress resource labels. key app is taken global.auth-server.ingress.firebaseMessagingAdditionalAnnotations object <code>{}</code> Firebase Messaging ingress resource additional annotations. global.auth-server.ingress.firebaseMessagingEnabled bool <code>true</code> Enable endpoint /firebase-messaging-sw.js global.auth-server.ingress.firebaseMessagingLabels object <code>{}</code> Firebase Messaging ingress resource labels. key app is taken global.auth-server.ingress.lockAdditionalAnnotations object <code>{}</code> Lock ingress resource additional annotations. global.auth-server.ingress.lockConfigAdditionalAnnotations object <code>{}</code> Lock config ingress resource additional annotations. global.auth-server.ingress.lockConfigEnabled bool <code>false</code> Enable endpoint /.well-known/lock-server-configuration global.auth-server.ingress.lockConfigLabels object <code>{}</code> Lock config ingress resource labels. key app is taken global.auth-server.ingress.lockEnabled bool <code>false</code> Enable endpoint /jans-lock global.auth-server.ingress.lockLabels object <code>{}</code> Lock ingress resource labels. key app is taken global.auth-server.ingress.openidAdditionalAnnotations object <code>{}</code> openid-configuration ingress resource additional annotations. global.auth-server.ingress.openidConfigEnabled bool <code>true</code> Enable endpoint /.well-known/openid-configuration global.auth-server.ingress.openidConfigLabels object <code>{}</code> openid-configuration ingress resource labels. key app is taken global.auth-server.ingress.u2fAdditionalAnnotations object <code>{}</code> u2f config ingress resource additional annotations. global.auth-server.ingress.u2fConfigEnabled bool <code>true</code> Enable endpoint /.well-known/fido-configuration global.auth-server.ingress.u2fConfigLabels object <code>{}</code> u2f config ingress resource labels. key app is taken global.auth-server.ingress.uma2AdditionalAnnotations object <code>{}</code> uma2 config ingress resource additional annotations. global.auth-server.ingress.uma2ConfigEnabled bool <code>true</code> Enable endpoint /.well-known/uma2-configuration global.auth-server.ingress.uma2ConfigLabels object <code>{}</code> uma2 config ingress resource labels. key app is taken global.auth-server.ingress.webdiscoveryAdditionalAnnotations object <code>{}</code> webdiscovery ingress resource additional annotations. global.auth-server.ingress.webdiscoveryEnabled bool <code>true</code> Enable endpoint /.well-known/simple-web-discovery global.auth-server.ingress.webdiscoveryLabels object <code>{}</code> webdiscovery ingress resource labels. key app is taken global.auth-server.ingress.webfingerAdditionalAnnotations object <code>{}</code> webfinger ingress resource additional annotations. global.auth-server.ingress.webfingerEnabled bool <code>true</code> Enable endpoint /.well-known/webfinger global.auth-server.ingress.webfingerLabels object <code>{}</code> webfinger ingress resource labels. key app is taken global.auth-server.lockEnabled bool <code>false</code> Enable jans-lock as service running inside auth-server global.awsStorageType string <code>\"io1\"</code> Volume storage type if using AWS volumes. global.azureStorageAccountType string <code>\"Standard_LRS\"</code> Volume storage type if using Azure disks. global.azureStorageKind string <code>\"Managed\"</code> Azure storage kind if using Azure disks global.casa.appLoggers object <code>{\"casaLogLevel\":\"INFO\",\"casaLogTarget\":\"STDOUT\",\"enableStdoutLogPrefix\":\"true\",\"timerLogLevel\":\"INFO\",\"timerLogTarget\":\"FILE\"}</code> App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed. global.casa.appLoggers.casaLogLevel string <code>\"INFO\"</code> casa.log level global.casa.appLoggers.casaLogTarget string <code>\"STDOUT\"</code> casa.log target global.casa.appLoggers.enableStdoutLogPrefix string <code>\"true\"</code> Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e casa ===&gt; 2022-12-20 17:49:55,744 INFO global.casa.appLoggers.timerLogLevel string <code>\"INFO\"</code> casa timer log level global.casa.appLoggers.timerLogTarget string <code>\"FILE\"</code> casa timer log target global.casa.casaServiceName string <code>\"casa\"</code> Name of the casa service. Please keep it as default. global.casa.cnCustomJavaOptions string <code>\"\"</code> passing custom java options to casa. Notice you do not need to pass in any loggers options as they are introduced below in appLoggers. DO NOT PASS JAVA_OPTIONS in envs. global.casa.enabled bool <code>true</code> Boolean flag to enable/disable the casa chart. global.casa.ingress object <code>{\"casaAdditionalAnnotations\":{},\"casaEnabled\":false,\"casaLabels\":{}}</code> Enable endpoints in either istio or nginx ingress depending on users choice global.casa.ingress.casaAdditionalAnnotations object <code>{}</code> Casa ingress resource additional annotations. global.casa.ingress.casaEnabled bool <code>false</code> Enable casa endpoints /casa global.casa.ingress.casaLabels object <code>{}</code> Casa ingress resource labels. key app is taken global.cleanup object <code>{\"enabled\":true}</code> Enable cleanup job global.cleanup.enabled bool <code>true</code> Boolean flag to enable/disable the cleanup cronjob chart. global.cloud.testEnviroment bool <code>false</code> Boolean flag if enabled will strip resources requests and limits from all services. global.cnConfiguratorConfigurationFile string <code>\"/etc/jans/conf/configuration.json\"</code> Path to configuration schema file global.cnConfiguratorCustomSchema object <code>{\"secretName\":\"\"}</code> Use custom configuration schema in existing secrets. Note, the secrets has to contain the key configuration.json or any basename as specified in cnConfiguratorConfigurationFile. global.cnConfiguratorCustomSchema.secretName string <code>\"\"</code> The name of the secrets used for storing custom configuration schema. global.cnConfiguratorDumpFile string <code>\"/etc/jans/conf/configuration.out.json\"</code> Path to dumped configuration schema file global.cnConfiguratorKey string <code>\"\"</code> Key to encrypt/decrypt configuration schema file using AES-256 CBC mode. Set the value to empty string to disable encryption/decryption, or 32 alphanumeric characters to enable it. global.cnConfiguratorKeyFile string <code>\"/etc/jans/conf/configuration.key\"</code> Path to the file that contains the key to encrypt/decrypt the configuration schema file. global.cnDocumentStoreType string <code>\"DB\"</code> Document store type to use for shibboleth files DB. global.cnGoogleApplicationCredentials string <code>\"/etc/jans/conf/google-credentials.json\"</code> Base64 encoded service account. The sa must have roles/secretmanager.admin to use Google secrets. Leave as this is a sensible default. global.cnObExtSigningAlias string <code>\"\"</code> Open banking external signing AS Alias. This is a kid value.Used in SSA Validation, kid used while encoding a JWT sent to token URL i.e. XkwIzWy44xWSlcWnMiEc8iq9s2G global.cnObExtSigningJwksCrt string <code>\"\"</code> Open banking external signing jwks AS certificate authority string. Used in SSA Validation. This must be encoded using base64.. Used when <code>.global.cnObExtSigningJwksUri</code> is set. global.cnObExtSigningJwksKey string <code>\"\"</code> Open banking external signing jwks AS key string. Used in SSA Validation. This must be encoded using base64. Used when <code>.global.cnObExtSigningJwksUri</code> is set. global.cnObExtSigningJwksKeyPassPhrase string <code>\"\"</code> Open banking external signing jwks AS key passphrase to unlock provided key. This must be encoded using base64. Used when <code>.global.cnObExtSigningJwksUri</code> is set. global.cnObExtSigningJwksUri string <code>\"\"</code> Open banking external signing jwks uri. Used in SSA Validation. global.cnObStaticSigningKeyKid string <code>\"\"</code> Open banking  signing AS kid to force the AS to use a specific signing key. i.e. Wy44xWSlcWnMiEc8iq9s2G global.cnObTransportAlias string <code>\"\"</code> Open banking transport Alias used inside the JVM. global.cnObTransportCrt string <code>\"\"</code> Open banking AS transport crt. Used in SSA Validation. This must be encoded using base64. global.cnObTransportKey string <code>\"\"</code> Open banking AS transport key. Used in SSA Validation. This must be encoded using base64. global.cnObTransportKeyPassPhrase string <code>\"\"</code> Open banking AS transport key passphrase to unlock AS transport key. This must be encoded using base64. global.cnObTransportTrustStore string <code>\"\"</code> Open banking AS transport truststore crt. This is normally generated from the OB issuing CA, OB Root CA and Signing CA. Used when .global.cnObExtSigningJwksUri is set. Used in SSA Validation. This must be encoded using base64. global.cnPersistenceType string <code>\"sql\"</code> Persistence backend to run Gluu with hybrid global.cnPrometheusPort string <code>\"\"</code> Port used by Prometheus JMX agent (default to empty string). To enable Prometheus JMX agent, set the value to a number. global.cnSqlPasswordFile string <code>\"/etc/jans/conf/sql_password\"</code> Path to SQL password file global.config-api.adminUiAppLoggers.adminUiAuditLogLevel string <code>\"INFO\"</code> config-api admin-ui plugin audit log level global.config-api.adminUiAppLoggers.adminUiAuditLogTarget string <code>\"FILE\"</code> config-api admin-ui plugin audit log target global.config-api.adminUiAppLoggers.adminUiLogLevel string <code>\"INFO\"</code> config-api admin-ui plugin log target global.config-api.adminUiAppLoggers.adminUiLogTarget string <code>\"FILE\"</code> config-api admin-ui plugin log level global.config-api.adminUiAppLoggers.enableStdoutLogPrefix string <code>\"true\"</code> Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e config-api_persistence ===&gt; 2022-12-20 17:49:55,744 INFO global.config-api.appLoggers object <code>{\"configApiLogLevel\":\"INFO\",\"configApiLogTarget\":\"STDOUT\",\"enableStdoutLogPrefix\":\"true\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"}</code> App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed. global.config-api.appLoggers.configApiLogLevel string <code>\"INFO\"</code> configapi.log level global.config-api.appLoggers.configApiLogTarget string <code>\"STDOUT\"</code> configapi.log target global.config-api.appLoggers.enableStdoutLogPrefix string <code>\"true\"</code> Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e config-api_persistence ===&gt; 2022-12-20 17:49:55,744 INFO global.config-api.appLoggers.persistenceDurationLogLevel string <code>\"INFO\"</code> config-api_persistence_duration.log level global.config-api.appLoggers.persistenceDurationLogTarget string <code>\"FILE\"</code> config-api_persistence_duration.log target global.config-api.appLoggers.persistenceLogLevel string <code>\"INFO\"</code> config-api_persistence.log level global.config-api.appLoggers.persistenceLogTarget string <code>\"FILE\"</code> config-api_persistence.log target global.config-api.appLoggers.scriptLogLevel string <code>\"INFO\"</code> config-api_script.log level global.config-api.appLoggers.scriptLogTarget string <code>\"FILE\"</code> config-api_script.log target global.config-api.cnCustomJavaOptions string <code>\"\"</code> passing custom java options to config-api. Notice you do not need to pass in any loggers options as they are introduced below in appLoggers. DO NOT PASS JAVA_OPTIONS in envs. global.config-api.configApiServerServiceName string <code>\"config-api\"</code> Name of the config-api service. Please keep it as default. global.config-api.enabled bool <code>true</code> Boolean flag to enable/disable the config-api chart. global.config-api.ingress object <code>{\"configApiAdditionalAnnotations\":{},\"configApiEnabled\":true,\"configApiLabels\":{}}</code> Enable endpoints in either istio or nginx ingress depending on users choice global.config-api.ingress.configApiAdditionalAnnotations object <code>{}</code> ConfigAPI ingress resource additional annotations. global.config-api.ingress.configApiLabels object <code>{}</code> configAPI ingress resource labels. key app is taken global.config-api.plugins string <code>\"admin-ui,fido2,scim,user-mgt\"</code> Comma-separated values of enabled plugins (supported plugins are \"admin-ui\",\"fido2\",\"scim\",\"user-mgt\", \"kc-saml\") global.config.enabled bool <code>true</code> Boolean flag to enable/disable the configuration chart. This normally should never be false global.configAdapterName string <code>\"kubernetes\"</code> The config backend adapter that will hold Gluu configuration layer. aws global.configSecretAdapter string <code>\"kubernetes\"</code> The config backend adapter that will hold Gluu secret layer. vault global.distribution string <code>\"default\"</code> Gluu distributions supported are: default global.fido2.appLoggers object <code>{\"enableStdoutLogPrefix\":\"true\",\"fido2LogLevel\":\"INFO\",\"fido2LogTarget\":\"STDOUT\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"}</code> App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed. global.fido2.appLoggers.enableStdoutLogPrefix string <code>\"true\"</code> Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e fido2 ===&gt; 2022-12-20 17:49:55,744 INFO global.fido2.appLoggers.fido2LogLevel string <code>\"INFO\"</code> fido2.log level global.fido2.appLoggers.fido2LogTarget string <code>\"STDOUT\"</code> fido2.log target global.fido2.appLoggers.persistenceDurationLogLevel string <code>\"INFO\"</code> fido2_persistence_duration.log level global.fido2.appLoggers.persistenceDurationLogTarget string <code>\"FILE\"</code> fido2_persistence_duration.log target global.fido2.appLoggers.persistenceLogLevel string <code>\"INFO\"</code> fido2_persistence.log level global.fido2.appLoggers.persistenceLogTarget string <code>\"FILE\"</code> fido2_persistence.log target global.fido2.appLoggers.scriptLogLevel string <code>\"INFO\"</code> fido2_script.log level global.fido2.appLoggers.scriptLogTarget string <code>\"FILE\"</code> fido2_script.log target global.fido2.cnCustomJavaOptions string <code>\"\"</code> passing custom java options to fido2. Notice you do not need to pass in any loggers options as they are introduced below in appLoggers. DO NOT PASS JAVA_OPTIONS in envs. global.fido2.enabled bool <code>true</code> Boolean flag to enable/disable the fido2 chart. global.fido2.fido2ServiceName string <code>\"fido2\"</code> Name of the fido2 service. Please keep it as default. global.fido2.ingress object <code>{\"fido2AdditionalAnnotations\":{},\"fido2ConfigAdditionalAnnotations\":{},\"fido2ConfigEnabled\":false,\"fido2ConfigLabels\":{},\"fido2Enabled\":false,\"fido2Labels\":{},\"fido2WebauthnAdditionalAnnotations\":{},\"fido2WebauthnEnabled\":false,\"fido2WebauthnLabels\":{}}</code> Enable endpoints in either istio or nginx ingress depending on users choice global.fido2.ingress.fido2AdditionalAnnotations object <code>{}</code> fido2 ingress resource additional annotations. global.fido2.ingress.fido2ConfigAdditionalAnnotations object <code>{}</code> fido2 config ingress resource additional annotations. global.fido2.ingress.fido2ConfigEnabled bool <code>false</code> Enable endpoint /.well-known/fido2-configuration global.fido2.ingress.fido2ConfigLabels object <code>{}</code> fido2 config ingress resource labels. key app is taken global.fido2.ingress.fido2Enabled bool <code>false</code> Enable endpoint /jans-fido2 global.fido2.ingress.fido2Labels object <code>{}</code> fido2 ingress resource labels. key app is taken global.fido2.ingress.fido2WebauthnAdditionalAnnotations object <code>{}</code> fido2 webauthn ingress resource additional annotations. global.fido2.ingress.fido2WebauthnEnabled bool <code>false</code> Enable endpoint /.well-known/webauthn global.fido2.ingress.fido2WebauthnLabels object <code>{}</code> fido2 webauthn ingress resource labels. key app is taken global.fqdn string <code>\"demoexample.gluu.org\"</code> Fully qualified domain name to be used for Gluu installation. This address will be used to reach Gluu services. global.gcePdStorageType string <code>\"pd-standard\"</code> GCE storage kind if using Google disks global.isFqdnRegistered bool <code>false</code> Boolean flag to enable mapping global.lbIp  to global.fqdn inside pods on clouds that provide static ip for load balancers. On cloud that provide only addresses to the LB this flag will enable a script to actively scan config.configmap.lbAddr and update the hosts file inside the pods automatically. global.istio.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of global.istio.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of global.istio.enabled bool <code>false</code> Boolean flag that enables using istio side-cars with Gluu services. global.istio.gateways list <code>[]</code> Override the gateway that can be created by default. This is used when istio ingress has already been setup and the gateway exists. global.istio.ingress bool <code>false</code> Boolean flag that enables using istio gateway for Gluu. This assumes istio ingress is installed and hence the LB is available. global.istio.namespace string <code>\"istio-system\"</code> The namespace istio is deployed in. The is normally istio-system. global.jobTtlSecondsAfterFinished int <code>300</code> https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/ global.kc-scheduler.enabled bool <code>false</code> Boolean flag to enable/disable the kc-scheduler cronjob chart. global.lbIp string <code>\"22.22.22.22\"</code> The Loadbalancer IP created by nginx or istio on clouds that provide static IPs. This is not needed if <code>global.fqdn</code> is globally resolvable. global.nginx-ingress.enabled bool <code>true</code> Boolean flag to enable/disable the nginx-ingress definitions chart. global.persistence.enabled bool <code>true</code> Boolean flag to enable/disable the persistence chart. global.saml.cnCustomJavaOptions string <code>\"\"</code> passing custom java options to saml. DO NOT PASS JAVA_OPTIONS in envs. global.saml.enabled bool <code>false</code> Boolean flag to enable/disable the saml chart. global.saml.ingress object <code>{\"samlAdditionalAnnotations\":{},\"samlEnabled\":false,\"samlLabels\":{}}</code> Enable endpoints in either istio or nginx ingress depending on users choice global.saml.ingress.samlAdditionalAnnotations object <code>{}</code> SAML ingress resource additional annotations. global.saml.ingress.samlLabels object <code>{}</code> SAML ingress resource labels. key app is taken global.saml.samlServiceName string <code>\"saml\"</code> Name of the saml service. Please keep it as default. global.scim.appLoggers object <code>{\"enableStdoutLogPrefix\":\"true\",\"persistenceDurationLogLevel\":\"INFO\",\"persistenceDurationLogTarget\":\"FILE\",\"persistenceLogLevel\":\"INFO\",\"persistenceLogTarget\":\"FILE\",\"scimLogLevel\":\"INFO\",\"scimLogTarget\":\"STDOUT\",\"scriptLogLevel\":\"INFO\",\"scriptLogTarget\":\"FILE\"}</code> App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed. global.scim.appLoggers.enableStdoutLogPrefix string <code>\"true\"</code> Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e jans-scim ===&gt; 2022-12-20 17:49:55,744 INFO global.scim.appLoggers.persistenceDurationLogLevel string <code>\"INFO\"</code> jans-scim_persistence_duration.log level global.scim.appLoggers.persistenceDurationLogTarget string <code>\"FILE\"</code> jans-scim_persistence_duration.log target global.scim.appLoggers.persistenceLogLevel string <code>\"INFO\"</code> jans-scim_persistence.log level global.scim.appLoggers.persistenceLogTarget string <code>\"FILE\"</code> jans-scim_persistence.log target global.scim.appLoggers.scimLogLevel string <code>\"INFO\"</code> jans-scim.log level global.scim.appLoggers.scimLogTarget string <code>\"STDOUT\"</code> jans-scim.log target global.scim.appLoggers.scriptLogLevel string <code>\"INFO\"</code> jans-scim_script.log level global.scim.appLoggers.scriptLogTarget string <code>\"FILE\"</code> jans-scim_script.log target global.scim.cnCustomJavaOptions string <code>\"\"</code> passing custom java options to scim. Notice you do not need to pass in any loggers options as they are introduced below in appLoggers. DO NOT PASS JAVA_OPTIONS in envs. global.scim.enabled bool <code>true</code> Boolean flag to enable/disable the SCIM chart. global.scim.ingress object <code>{\"scimAdditionalAnnotations\":{},\"scimConfigAdditionalAnnotations\":{},\"scimConfigEnabled\":false,\"scimConfigLabels\":{},\"scimEnabled\":false,\"scimLabels\":{}}</code> Enable endpoints in either istio or nginx ingress depending on users choice global.scim.ingress.scimAdditionalAnnotations object <code>{}</code> SCIM ingress resource additional annotations. global.scim.ingress.scimConfigAdditionalAnnotations object <code>{}</code> SCIM config ingress resource additional annotations. global.scim.ingress.scimConfigEnabled bool <code>false</code> Enable endpoint /.well-known/scim-configuration global.scim.ingress.scimConfigLabels object <code>{}</code> SCIM config ingress resource labels. key app is taken global.scim.ingress.scimEnabled bool <code>false</code> Enable SCIM endpoints /jans-scim global.scim.ingress.scimLabels object <code>{}</code> SCIM ingress resource labels. key app is taken global.scim.scimServiceName string <code>\"scim\"</code> Name of the scim service. Please keep it as default. global.serviceAccountName string <code>\"default\"</code> service account used by Kubernetes resources global.storageClass object <code>{\"allowVolumeExpansion\":true,\"allowedTopologies\":[],\"mountOptions\":[\"debug\"],\"parameters\":{},\"provisioner\":\"microk8s.io/hostpath\",\"reclaimPolicy\":\"Retain\",\"volumeBindingMode\":\"WaitForFirstConsumer\"}</code> StorageClass section. This is not currently used by the openbanking distribution. You may specify custom parameters as needed. global.storageClass.parameters object <code>{}</code> parameters: fsType: \"\" kind: \"\" pool: \"\" storageAccountType: \"\" type: \"\" global.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service. Envs defined in global.userEnvs will be globally available to all services global.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service. variable1: value1 global.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service. variable1: value1 installer-settings object <code>{\"acceptLicense\":\"\",\"aws\":{\"arn\":{\"arnAcmCert\":\"\",\"enabled\":\"\"},\"lbType\":\"\",\"vpcCidr\":\"0.0.0.0/0\"},\"confirmSettings\":false,\"currentVersion\":\"\",\"google\":{\"useSecretManager\":\"\"},\"images\":{\"edit\":\"\"},\"namespace\":\"\",\"nginxIngress\":{\"namespace\":\"\",\"releaseName\":\"\"},\"nodes\":{\"ips\":\"\",\"names\":\"\",\"zones\":\"\"},\"openbanking\":{\"cnObTransportTrustStoreP12password\":\"\",\"hasCnObTransportTrustStore\":false},\"postgres\":{\"install\":\"\",\"namespace\":\"\"},\"redis\":{\"install\":\"\",\"namespace\":\"\"},\"releaseName\":\"\",\"sql\":{\"install\":\"\",\"namespace\":\"\"},\"volumeProvisionStrategy\":\"\"}</code> Only used by the installer. These settings do not affect nor are used by the chart kc-scheduler object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/cloudtools\",\"tag\":\"1.11.0-1\"},\"interval\":10,\"lifecycle\":{},\"nodeSelector\":{},\"resources\":{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}},\"tolerations\":[],\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Responsible for synchronizing Keycloak SAML clients kc-scheduler.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of kc-scheduler.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of kc-scheduler.customCommand list <code>[]</code> Add custom job's command. If passed, it will override the default conditional command. kc-scheduler.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh kc-scheduler.dnsConfig object <code>{}</code> Add custom dns config kc-scheduler.dnsPolicy string <code>\"\"</code> Add custom dns policy kc-scheduler.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. kc-scheduler.image.pullSecrets list <code>[]</code> Image Pull Secrets kc-scheduler.image.repository string <code>\"ghcr.io/janssenproject/jans/cloudtools\"</code> Image  to use for deploying. kc-scheduler.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. kc-scheduler.interval int <code>10</code> Interval of running the scheduler (in minutes) kc-scheduler.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) kc-scheduler.resources object <code>{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}}</code> Resource specs. kc-scheduler.resources.limits.cpu string <code>\"300m\"</code> CPU limit. kc-scheduler.resources.limits.memory string <code>\"300Mi\"</code> Memory limit. kc-scheduler.resources.requests.cpu string <code>\"300m\"</code> CPU request. kc-scheduler.resources.requests.memory string <code>\"300Mi\"</code> Memory request. kc-scheduler.tolerations list <code>[]</code> Add tolerations for the pods kc-scheduler.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service kc-scheduler.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 kc-scheduler.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 kc-scheduler.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers kc-scheduler.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod nginx-ingress object <code>{\"certManager\":{\"certificate\":{\"enabled\":false,\"issuerGroup\":\"cert-manager.io\",\"issuerKind\":\"ClusterIssuer\",\"issuerName\":\"\"}},\"ingress\":{\"additionalAnnotations\":{},\"additionalLabels\":{},\"hosts\":[\"demoexample.gluu.org\"],\"ingressClassName\":\"nginx\",\"path\":\"/\",\"tls\":[{\"hosts\":[\"demoexample.gluu.org\"],\"secretName\":\"tls-certificate\"}]}}</code> Nginx ingress definitions chart nginx-ingress.ingress.additionalAnnotations object <code>{}</code> Additional annotations that will be added across all ingress definitions in the format of {cert-manager.io/issuer: \"letsencrypt-prod\"} Enable client certificate authentication nginx.ingress.kubernetes.io/auth-tls-verify-client: \"optional\" Create the secret containing the trusted ca certificates nginx.ingress.kubernetes.io/auth-tls-secret: \"gluu/tls-certificate\" Specify the verification depth in the client certificates chain nginx.ingress.kubernetes.io/auth-tls-verify-depth: \"1\" Specify if certificates are passed to upstream server nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: \"true\" nginx-ingress.ingress.additionalLabels object <code>{}</code> Additional labels that will be added across all ingress definitions in the format of nginx-ingress.ingress.tls list <code>[{\"hosts\":[\"demoexample.gluu.org\"],\"secretName\":\"tls-certificate\"}]</code> Secrets holding HTTPS CA cert and key. persistence object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/persistence-loader\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"nodeSelector\":{},\"resources\":{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}},\"tolerations\":[],\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> Job to generate data and initial config for Gluu Server persistence layer. persistence.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of persistence.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of persistence.customCommand list <code>[]</code> Add custom job's command. If passed, it will override the default conditional command. persistence.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh persistence.dnsConfig object <code>{}</code> Add custom dns config persistence.dnsPolicy string <code>\"\"</code> Add custom dns policy persistence.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. persistence.image.pullSecrets list <code>[]</code> Image Pull Secrets persistence.image.repository string <code>\"ghcr.io/janssenproject/jans/persistence-loader\"</code> Image  to use for deploying. persistence.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. persistence.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) persistence.resources object <code>{\"limits\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"},\"requests\":{\"cpu\":\"300m\",\"memory\":\"300Mi\"}}</code> Resource specs. persistence.resources.limits.cpu string <code>\"300m\"</code> CPU limit persistence.resources.limits.memory string <code>\"300Mi\"</code> Memory limit. persistence.resources.requests.cpu string <code>\"300m\"</code> CPU request. persistence.resources.requests.memory string <code>\"300Mi\"</code> Memory request. persistence.tolerations list <code>[]</code> Add tolerations for the pods persistence.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service persistence.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 persistence.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 persistence.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers persistence.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod saml object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/saml\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"failureThreshold\":10,\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"failureThreshold\":10,\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"1200Mi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"1200Mi\"}},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> SAML. saml.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of saml.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of saml.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. saml.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh saml.dnsConfig object <code>{}</code> Add custom dns config saml.dnsPolicy string <code>\"\"</code> Add custom dns policy saml.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler saml.hpa.behavior object <code>{}</code> Scaling Policies saml.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set saml.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. saml.image.pullSecrets list <code>[]</code> Image Pull Secrets saml.image.repository string <code>\"ghcr.io/janssenproject/jans/saml\"</code> Image  to use for deploying. saml.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. saml.livenessProbe object <code>{\"exec\":{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]},\"failureThreshold\":10,\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for the auth server if needed. saml.livenessProbe.exec object <code>{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]}</code> http liveness probe endpoint saml.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) saml.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget saml.readinessProbe.exec object <code>{\"command\":[\"python3\",\"/app/scripts/healthcheck.py\"]}</code> http readiness probe endpoint saml.replicas int <code>1</code> Service replica number. saml.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"1200Mi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"1200Mi\"}}</code> Resource specs. saml.resources.limits.cpu string <code>\"500m\"</code> CPU limit. saml.resources.limits.memory string <code>\"1200Mi\"</code> Memory limit. This value is used to calculate memory allocation for Java. Currently it only supports <code>Mi</code>. Please refrain from using other units. saml.resources.requests.cpu string <code>\"500m\"</code> CPU request. saml.resources.requests.memory string <code>\"1200Mi\"</code> Memory request. saml.tolerations list <code>[]</code> Add tolerations for the pods saml.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ saml.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service saml.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 saml.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 saml.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers saml.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod scim object <code>{\"additionalAnnotations\":{},\"additionalLabels\":{},\"customCommand\":[],\"customScripts\":[],\"dnsConfig\":{},\"dnsPolicy\":\"\",\"hpa\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/janssenproject/jans/scim\",\"tag\":\"1.11.0-1\"},\"lifecycle\":{},\"livenessProbe\":{\"httpGet\":{\"path\":\"/jans-scim/sys/health-check\",\"port\":8080},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"nodeSelector\":{},\"pdb\":{\"enabled\":true,\"maxUnavailable\":\"90%\"},\"readinessProbe\":{\"httpGet\":{\"path\":\"/jans-scim/sys/health-check\",\"port\":8080},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1200Mi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"1200Mi\"}},\"service\":{\"name\":\"http-scim\",\"port\":8080},\"tolerations\":[],\"topologySpreadConstraints\":{},\"usrEnvs\":{\"normal\":{},\"secret\":{}},\"volumeMounts\":[],\"volumes\":[]}</code> System for Cross-domain Identity Management (SCIM) version 2.0 scim.additionalAnnotations object <code>{}</code> Additional annotations that will be added across the gateway in the format of scim.additionalLabels object <code>{}</code> Additional labels that will be added across the gateway in the format of scim.customCommand list <code>[]</code> Add custom pod's command. If passed, it will override the default conditional command. scim.customScripts list <code>[]</code> Add custom scripts that have been mounted to run before the entrypoint. - /tmp/custom.sh - /tmp/custom2.sh scim.dnsConfig object <code>{}</code> Add custom dns config scim.dnsPolicy string <code>\"\"</code> Add custom dns policy scim.hpa object <code>{\"behavior\":{},\"enabled\":true,\"maxReplicas\":10,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50}</code> Configure the HorizontalPodAutoscaler scim.hpa.behavior object <code>{}</code> Scaling Policies scim.hpa.metrics list <code>[]</code> metrics if targetCPUUtilizationPercentage is not set scim.image.pullPolicy string <code>\"IfNotPresent\"</code> Image pullPolicy to use for deploying. scim.image.pullSecrets list <code>[]</code> Image Pull Secrets scim.image.repository string <code>\"ghcr.io/janssenproject/jans/scim\"</code> Image  to use for deploying. scim.image.tag string <code>\"1.11.0-1\"</code> Image  tag to use for deploying. scim.livenessProbe object <code>{\"httpGet\":{\"path\":\"/jans-scim/sys/health-check\",\"port\":8080},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5}</code> Configure the liveness healthcheck for SCIM if needed. scim.livenessProbe.httpGet.path string <code>\"/jans-scim/sys/health-check\"</code> http liveness probe endpoint scim.nodeSelector object <code>{}</code> Add nodeSelector (see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) scim.pdb object <code>{\"enabled\":true,\"maxUnavailable\":\"90%\"}</code> Configure the PodDisruptionBudget scim.readinessProbe object <code>{\"httpGet\":{\"path\":\"/jans-scim/sys/health-check\",\"port\":8080},\"initialDelaySeconds\":25,\"periodSeconds\":25,\"timeoutSeconds\":5}</code> Configure the readiness healthcheck for the SCIM if needed. scim.readinessProbe.httpGet.path string <code>\"/jans-scim/sys/health-check\"</code> http readiness probe endpoint scim.replicas int <code>1</code> Service replica number. scim.resources.limits.cpu string <code>\"1000m\"</code> CPU limit. scim.resources.limits.memory string <code>\"1200Mi\"</code> Memory limit. This value is used to calculate memory allocation for Java. Currently it only supports <code>Mi</code>. Please refrain from using other units. scim.resources.requests.cpu string <code>\"1000m\"</code> CPU request. scim.resources.requests.memory string <code>\"1200Mi\"</code> Memory request. scim.service.name string <code>\"http-scim\"</code> The name of the scim port within the scim service. Please keep it as default. scim.service.port int <code>8080</code> Port of the scim service. Please keep it as default. scim.tolerations list <code>[]</code> Add tolerations for the pods scim.topologySpreadConstraints object <code>{}</code> Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/ scim.usrEnvs object <code>{\"normal\":{},\"secret\":{}}</code> Add custom normal and secret envs to the service scim.usrEnvs.normal object <code>{}</code> Add custom normal envs to the service variable1: value1 scim.usrEnvs.secret object <code>{}</code> Add custom secret envs to the service variable1: value1 scim.volumeMounts list <code>[]</code> Configure any additional volumesMounts that need to be attached to the containers scim.volumes list <code>[]</code> Configure any additional volumes that need to be attached to the pod"},{"location":"solo/solo-administration-guide/","title":"Gluu Solo Administration","text":"<p>Gluu Solo administration allows you to configure and control various aspects of the cloud infrastructure and the IDP. </p> <p>From the Solo space dashboard click on  <code>Configuration</code> button to open the configurations page. This page lists   different ways to manage the configuration.</p> <p></p> <p>IaC(Infrastructure As Code) using Terraform is the <code>recommended</code> method to  configure Gluu Solo cloud infrastructure and administer the IDP.  Gluu Solo provides processes and guidelines about how to manage the infrastructure. It also provides the actual code that represents the current infrastructure. Use this code and the prescribed  process to configure the cloud infrastructure to your needs.</p>","tags":["solo","gluu","administration","space"]},{"location":"solo/solo-administration-guide/#alternative-methods-for-ad-hoc-administration","title":"Alternative methods for Ad-hoc administration","text":"<pre><code>These tools should not be used as the go to tool for IDP configurations. Please use Terraform for managing your development and production environments.\n</code></pre> <p>Gluu Solo offers two tools to configure the IDP to your needs.</p>","tags":["solo","gluu","administration","space"]},{"location":"solo/solo-administration-guide/#admin-ui","title":"Admin UI","text":"<p>Admin UI is a web-based administration portal for Gluu Solo IDP. Refer to  Admin UI documentation  for more details.</p>","tags":["solo","gluu","administration","space"]},{"location":"solo/solo-administration-guide/#text-based-ui","title":"Text-Based UI","text":"<p>You can use text-based UI to administer the Gluu Solo IDP using terminal/shell access. Install  TUI on your workstation using these instructions and then use  the terminal to connect and administer the IDP remotely.</p>","tags":["solo","gluu","administration","space"]},{"location":"solo/solo-administration-guide/#configuring-cidr-and-integrations","title":"Configuring CIDR and Integrations","text":"<p>Administrators can manage and update the CIDR and integration settings from  <code>Settings</code> Page.</p> <p></p>","tags":["solo","gluu","administration","space"]},{"location":"solo/solo-administration-guide/#gluu-solo-billing","title":"Gluu Solo Billing","text":"<p>Solo spaces billing page provides details of the current billing plan, usage and the payment history.</p> <p></p>","tags":["solo","gluu","administration","space"]},{"location":"solo/solo-getting-started/","title":"Getting Started with Gluu Solo","text":"<p>Gluu Solo is a cloud-based identity management service designed to provide secure, scalable,  and dedicated authentication solutions for businesses. It eliminates the need for complex  infrastructure management by offering a Software-as-a-Service (SaaS) model tailored to various  business requirements.</p> <p>Curious about features! Check out [Gluu Solo] website for more. </p> <p>To start using Gluu Solo, sign into Agama Lab. In a few steps, you'll be able to go-live with Gluu Solo:</p> <pre><code>flowchart TD\n    A(Agama Lab Login) --&gt; B(Subscribe to Solo)  \n    B --&gt; C(Setup the cloud instance)\n    C --&gt; D(Go Live!)   \n\n    click A href \"#agama-lab-sign-in\"\n    click B href \"#subscription\"\n    click C href \"#setting-up-gluu-solo-cloud-environment-and-idp\"\n    click D href \"#go-live\"</code></pre>","tags":["solo","Gluu"]},{"location":"solo/solo-getting-started/#agama-lab-sign-in","title":"Agama Lab Sign in","text":"<p>Sign-in to the Agama Lab using an existing account or create a new account.</p>","tags":["solo","Gluu"]},{"location":"solo/solo-getting-started/#subscription","title":"Subscription","text":"<p>Gluu Solo offers various subscription plans tailored to different business needs.  Each plan allows you to choose from multiple cloud locations and offers an SLA that  aligns with your identity management requirements. Check out subscription process to know more. </p>","tags":["solo","Gluu"]},{"location":"solo/solo-getting-started/#setting-up-gluu-solo-cloud-environment-and-idp","title":"Setting up Gluu Solo cloud environment and IDP","text":"<p>Once your subscription is active, cloud instance provisioning starts. Administrator can set up the domain, configure Gluu Solo, integrate monitoring tools.</p>","tags":["solo","Gluu"]},{"location":"solo/solo-getting-started/#go-live","title":"Go Live","text":"<p>After setting up the cloud environment, Gluu Solo is ready to go live.</p>","tags":["solo","Gluu"]},{"location":"solo/solo-subscription/","title":"Gluu Solo Subscription","text":"<p>Customers require active Gluu Solo subscription in order to avail Gluu Solo  services. Customers can opt one of the Gluu Solo subscription plans according to the business need. </p> <p>New customers can subscribe to Gluu Solo using the  Agama Lab.</p>","tags":["solo","Gluu","Subscription"]},{"location":"solo/solo-subscription/#subscription-process","title":"Subscription process","text":"<ol> <li>Sign-in to the Agama Lab. Navigate to <code>Solo</code>.</li> <li> <p>To begin the subscription process, click the <code>Subscribe</code> button.</p> <p></p> </li> <li> <p>Choose a subscription plan</p> <p>You will see a list of available plans. Select the plan that best suits   your business needs and click <code>Continue</code>. </p> <p></p> </li> <li> <p>Review cost</p> <ul> <li>After clicking <code>Continue</code>, a pop-up will appear showing the <code>cost per request per locations</code> of the selected plan.</li> <li>Click on <code>Continue</code> to proceed to the next step</li> </ul> <p></p> </li> <li> <p>Fill the subscription form</p> <ul> <li>Fill out the subscription form shown in the image below.</li> <li>FQDN: You can either use the domain assigned by Gluu(default choice), or  specify a custom domain that you own in the FQDN input.     If you use a custom domain, you'll need to update the DNS records for the   same. A note related to custom domains will appear (as shown in the image below).  </li> </ul> </li> <li> <p>Checkout</p> <ul> <li>After entering the required information, you will be directed to the checkout page.</li> <li>This page will display details about the selected plan, Gluu components, and a preview of  your instance configuration.</li> <li>You will also need to choose your billing plan: <code>Per Month</code> or <code>Per Year</code>.</li> </ul> <p></p> <p></p> <ul> <li>After reviewing this information, click on <code>Proceed To Payment</code>.</li> </ul> </li> <li> <p>Initiate payment</p> <ul> <li>A pop-up will display the total amount of your order for confirmation.</li> <li>Click <code>Proceed to Checkout</code> to continue.</li> </ul> <p></p> </li> <li> <p>Add account details</p> <ul> <li>You will be prompted to enter your account details.</li> <li>After entering your details, click <code>Next</code> to continue.</li> </ul> <p></p> </li> <li> <p>Add billing address</p> <ul> <li>You will then need to add your billing address.</li> <li>After filling in your address, click <code>Next</code> to continue.</li> </ul> <p></p> </li> <li> <p>Add payment details</p> <ul> <li>Next, you will need to add your payment details.</li> <li>Once the details are entered, click <code>Next</code> to proceed.</li> </ul> <p></p> </li> <li> <p>Verify and confirm payment</p> <ul> <li>A pop-up will appear showing all the details you've entered.</li> <li>Verify the information and, if everything is correct, proceed to Pay to subscribe to the plan.</li> </ul> <p></p> </li> <li> <p>Subscription confirmation</p> <ul> <li>Upon successful payment, you will be directed to a <code>Thank You</code> page.  Click on <code>Go To Solo Space</code> to access your instance dashboard.</li> </ul> <p></p> </li> <li> <p>Access Solo space</p> <ul> <li>Solo space shows your current instance and runtime status.</li> </ul> <p></p> </li> </ol>","tags":["solo","Gluu","Subscription"]}]}